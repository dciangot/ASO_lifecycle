#!/bin/sh

##H Usage: FileDownloadVerify [-c] [-d] [-f] CAT-SCRIPT CAT ACCESS-METHOD
##H                           STATUS PFN SIZE CHECKSUM
##H
##H customisable arguments:
##H    CAT-SCRIPT:    script that turns a PFN into a local path
##H    CAT:           location of TFC
##H    ACCESS-METHOD: how to access files in your storage
##H                   currently supported: posix, rfio, dcap, dpm
##H
##H arguments automatically provided by calling agent:
##H    STATUS:        exit code of the transfer process 
##H                   (or "pre" for pre-transfer valiation check)
##H    PFN:           PFN of transfered file to verify
##H    SIZE:          reference size of transferred file
##H    CHECKSUM:      reference checksums of the transferred file
##H                   may contain MD5 (cksum:) or adler32 (adler32:) checksums
##H                   in a comma-separated list
##H    IS_CUSTODIAL:  whether the transfer was for custodial storage (0 or 1)
##H
##H Verifies that the PFN has been successfully transferred.  The exit
##H code from the transfer program (STATUS) is ignored since the value
##H ends to be unreliable.  Makes sure that size of the transferred
##H file on disk is the same as the one recorded in TMDB (SIZE).  With
##H "-c" option also validates file CHECKSUM; otherwise the checksum
##H is ignored if the file size is correct.  Finally with "-d" option
##H also always removes the downloaded file after all the checks have
##H been made; this is meaningful only for transfer tests.  And as a
##H special goodie hack, with "-f" the return value is forced to be
##H zero (success) -- after all normal checks have been made.

# Process command line arguments
do_checksum=false do_delete=false do_force=false
while [ $# -ge 1 ]; do
  case $1 in
    -c ) do_checksum=true; shift ;;
    -d ) do_delete=true; shift ;;
    -f ) do_force=true; shift ;;
    *  ) break ;;
  esac
done

# Pick up arguments
catscript="$1"; shift;
cat="$1"; shift;
access="$1"; shift;
status="$1" pfn="$2" size="$3" checksum="$4"
validity=0

# Turn PFN into local path
file=$($catscript -catalogue $cat -pfn $pfn);

# If status is "pre" then we are doing a pre-transfer validation Here
# we just return 1 (failure) and bypass this feature.  If we actually
# want to do pre-transfer valiation, the exit codes have the following
# meaning: 
# 0 : Success.  File exists and is valid.  No transfer should
#     be attempted and the task should be marked successful.
# 86: Veto. Storage area not prepared to receive this transfer.  
#     Transfer will not be attempted and the task is marked as a 
#     failure.
# other non-zero: Failure.  The file sould be transferred and 
#                 validated afterwards.
if [ X"$status" = "Xpre" ]; then
  exit 1
fi

# Check file size and mark file invalid on mismatch.
if [ $validity = 0 ]; then
    case $access in
	rfio )
	    disksize=$(rfdir "$file" 2>/dev/null | awk '{print $5}');;
	posix | dcap )
	    disksize=$(ls -l "$file" 2>/dev/null | awk '{print $5}');;
	dpm )
	    disksize=$(dpns-ls -l "$file" 2>/dev/null | awk '{print $5}');
	    if $do_checksum; then
		echo "Checksumming not supported for DPM. Will only use filesize.";
		do_checksum=false;
	    fi;;
	* )
	    echo "unrecognized file access protocoll: $access"
	    exit 10;;
    esac
	    
    [ X"$disksize" != X"$size" ] && echo "size mismatch disk=$disksize db=$size pfn=$file" && validity=2
fi

# Check checksum if requested, mark file invalid on mismatch
if $do_checksum && [ $validity = 0 ]; then
    case $access in
	rfio )
	    csumvals=$(rfcat "$file" 2>/dev/null | cksum | sed 's/[^0-9][^0-9]*/:/g');;
	posix )
	    csumvals=$(cat "$file" 2>/dev/null | cksum | sed 's/[^0-9][^0-9]*/:/g');;
	dcap )
	    csumvals=$(dccp "$file" - 2>/dev/null | cksum | sed 's/[^0-9][^0-9]*/:/g');;
    esac
  checksum=$(echo "$checksum" | sed 's/.*cksum:\([0-9][0-9]*\).*/\1/')
  csum=$(echo "$csumvals" | sed 's/:.*//')
  csize=$(echo "$csumvals" | sed 's/.*://')
  [ X"$csize" != X"$size" ] && validity=3
  [ X"$csum" != X"$checksum" ] && validity=4
fi

# If file deletion was requested, delete the file.
if $do_delete; then
    case $access in
	rfio )
	    rfrm "$file" 2>/dev/null;;
	posix | dcap )
	    rm "$file" 2>/dev/null;;
	dpm )
	    rfrm "$file" 2>/dev/null;;
    esac
fi

# If we are forcing true return value, lie about it all
$do_force && validity=0

# Return file validity
exit $validity

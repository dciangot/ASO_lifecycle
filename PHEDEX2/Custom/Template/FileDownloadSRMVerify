#!/bin/sh
set -o nounset

##H Usage: FileDownloadVerify [-c] [-d] [-f] STATUS PFN SIZE CHECKSUM
##H
##H arguments automatically provided by calling agent:
##H    STATUS:        exit code of the transfer process 
##H                   (or "pre" for pre-transfer valiation check)
##H    PFN:           PFN of transfered file to verify
##H    SIZE:          reference size of transfered file
##H    CHECKSUM:      reference chskum of transfered file
##H    IS_CUSTODIAL:  whether the transfer was for custodial storage (0 or 1)
##H
##H Verifies that the PFN has been successfully transferred.  The exit
##H code from the transfer program (STATUS) is ignored since the value
##H ends to be unreliable.  Makes sure that size of the transferred
##H file on disk is the same as the one recorded in TMDB (SIZE).  With
##H "-c" option also validates file CHECKSUM; otherwise the checksum
##H is ignored if the file size is correct.  Finally with "-d" option
##H also always removes the downloaded file after all the checks have
##H been made; this is meaningful only for transfer tests.  And as a
##H special goodie hack, with "-f" the return value is forced to be
##H zero (success) -- after all normal checks have been made.

getsize () {
  local path=$1
  local protocol=${path%=*}
  local file=${path#*=}
  case "$protocol" in
    *managerv2* ) echo $(srmls            -debug=false -x509_user_proxy=${X509_USER_PROXY} -retry_num=0 "$path" 2>/dev/null| grep $file | cut -d\  -f3);;
    *managerv1* ) echo $(srm-get-metadata -debug=false -x509_user_proxy=${X509_USER_PROXY} -retry_num=0 "$path" 2>/dev/null| grep "size :"|cut -d: -f2);;
              * ) break;;
  esac
}
getChecksum ()
{
  local pfn=$1
  local disksum=
  local disksumtype=
  case "$pfn" in
    *managerv2* )
        fields=($(srmls -l -debug=false -x509_user_proxy=${X509_USER_PROXY} -retry_num=0 "$pfn" 2>/dev/null| grep Checksum))
        if [ $? -eq 0 ]; then
          disksum=${fields[3]}
          disksumtype=${fields[7]}
        fi
        ;;
    *managerv1* )
        disksum=$(srm-get-metadata -x509_user_proxy=${X509_USER_PROXY} -retry_num=0 "$pfn"| grep "checksumValue :"|cut -d: -f2)
        disksumtype=$(srm-get-metadata -x509_user_proxy=${X509_USER_PROXY} -retry_num=0 "$pfn"| grep "checksumType :"|cut -d: -f2)
        ;;
              * ) break ;;
  esac

  eval "$2=$disksum"
  eval "$3=$disksumtype"
}

# Process command line arguments

do_checksum=false do_delete=false do_force=false
while [ $# -ge 1 ]; do
  case $1 in
    -c ) do_checksum=true; shift ;;
    -d ) do_delete=true; shift ;;
    -f ) do_force=true; shift ;;
    *  ) break ;;
  esac
done

# Pick up arguments
status="$1" pfn="$2" size="$3" checksum="$4"
validity=0

# If status was claimed ok, accept it
#[ X"$status" = X0 ] && exit 0

# If status is "pre" then we are doing a pre-transfer validation Here
# we just return 1 (failure) and bypass this feature.  If we actually
# want to do pre-transfer valiation, the exit codes have the following
# meaning: 
# 0 : Success.  File exists and is valid.  No transfer should
#     be attempted and the task should be marked successful.
# 86: Veto. Storage area not prepared to receive this transfer.  
#     Transfer will not be attempted and the task is marked as a 
#     failure.
# other non-zero: Failure.  The file sould be transferred and 
#                 validated afterwards.
if [ X"$status" = "Xpre" ]; then
  exit 1
fi

# Check file size and mark file invalid on mismatch.
if [ $validity = 0 ]; then
    disksize=$(getsize $pfn)
    [ X"$disksize" = X ] && echo "file $pfn doesn't seem to exist" && validity=1
    [ $validity = 0 ] && [ X"$disksize" != X"$size" ] && echo "size mismatch disk=$disksize db=$size pfn=$pfn" && validity=2
fi

# Check checksum if requested, mark file invalid on mismatch
if $do_checksum && [ $validity = 0 ]; then
    disksum= disksumtype=
    getChecksum $pfn disksum disksumtype 
    [ X"$disksum" != X"$checksum" ] && echo "checksum mismatch disk=$disksum db=$checksum diskalgo=$disksumtype" && validity=3
fi

# Inform if exit code of transfer tool claimed status=0 and we found out something different
[ $validity != 0 ] && [ X"$status" = X0 ] && echo "transfer tool claimed exit code 0 although transfer failed validation!"

# If file deletion was requested, delete the file.
if $do_delete; then
    case "$pfn" in
	*managerv2*) srmrm               -x509_user_proxy=${X509_USER_PROXY} -retry_num=0 "$pfn";;
	         * ) srm-advisory-delete -x509_user_proxy=${X509_USER_PROXY} -retry_num=0 "$pfn";;
    esac
fi

# If we are forcing true return value, lie about it all
$do_force && validity=0

# Return file validity
exit $validity

#!/usr/bin/env python
#
# Update DBS2 with block replica information

import sys
import string
from fnmatch import filter
import re
import traceback
import time
from string import lstrip
from DBSAPI.dbsApi import DbsApi
from phedex import PhedexApi

def getStats(dataset):
  sql = """select ds.name dataset, count(distinct f.id) files
             from t_dps_dataset ds
                  join t_dps_block b on b.dataset = ds.id
                  join t_dps_file f on f.inblock = b.id
             where ds.name = :dataset
             group by ds.name
         """
  t_files = 0
  cur = phedex.con.cursor()
  cur.execute(sql, {'dataset':dataset})
  data = cur.fetchall()
  if not data:
    t_files += 0
  else:
    for dataset, n_files in data:
      t_files += n_files

  # dbs
  n_dbs = 0
  try:
    n_dbs = len(dbs.listFiles(dataset))
  except Exception, ex:
    print "DBS ERROR:  ", ex
  
  return (t_files, n_dbs)

def fileDiff(dataset):
  sql = """select f.logical_name
             from t_dps_dataset ds
                  join t_dps_block b on b.dataset = ds.id
                  join t_dps_file f on f.inblock = b.id
            where ds.name = :dataset
            order by f.logical_name
         """
  cur = phedex.con.cursor()
  cur.execute(sql, {'dataset':dataset})
  
  tmdb_files = set()
  for file in cur.fetchall():
    tmdb_files.add(file[0])
    
  dbs_files = set()
  try:
    for file in dbs.listFiles(dataset):
      dbs_files.add(file['LogicalFileName'])
  except Exception, ex:
    print "DBS ERROR:  ", ex

  missing_dbs = tmdb_files - dbs_files
  missing_tmdb = dbs_files - tmdb_files

  return missing_dbs, missing_tmdb
  

def replicaDiff(dataset):
  
  tmdb_blocks = phedex.getBlockReplicas(dataset)
  tmdb_replicas = {}
  for block in tmdb_blocks:
    if not block['se']:  block['se'] = "NULLSE(%s)" % block['node']
    if block['name']  not in tmdb_replicas:
      tmdb_replicas[block['name']] = set()
    tmdb_replicas[block['name']].add(block['se'])

  dbs_blocks = dbs.listBlocks(dataset)
  dbs_replicas = {}
  for block in dbs_blocks:
    dbs_selist = set()
    for se in block['StorageElementList']:
      if se:
        dbs_selist.add(se['Name'])
    dbs_replicas[block['Name']] = dbs_selist
    
  missing = {}
  for block in set(tmdb_replicas.keys()).union(dbs_replicas.keys()):
    missing[block] = {}
    if block in tmdb_replicas:  tmdb_selist = tmdb_replicas[block]
    else:
      missing[block]['missing_tmdb_block'] = 1
      continue
    if block in dbs_replicas:  dbs_selist = dbs_replicas[block]
    else:
      missing[block]['missing_dbs_block'] = 1
      continue
    m_dbs = tmdb_selist - dbs_selist
    m_tmdb = dbs_selist - tmdb_selist
    if m_dbs:
      missing[block]['missing_dbs'] = m_dbs
    if m_tmdb:
      missing[block]['missing_tmdb'] = m_tmdb

  return missing

def parseDatasetNameMap(mapfile):
  map = {}
  f = open(mapfile)
  for line in f:
    if not line.startswith('/'): continue
    a = re.split("\s+", line)
    map[a[0]] = a[1]
  f.close
  return map
     

from optparse import OptionParser

usage =  "usage: %prog [options]\n"
usage += "\nCompares file counts between TMDB and DBS2"
parser = OptionParser(usage=usage)
parser.add_option('-f', '--mapfile', dest='mapfile', help='Old dataset to New Dataset name mapping file')
parser.add_option('-u', '--url', dest='url', help='DBS write URL')
parser.add_option('-c', '--phedex_connect', dest='phedex_connect', help='PhEDEx connection string')
parser.add_option('-d', '--diff_mismatch', action='store_true', dest='diff_mismatch', default=False,
                  help='Perform file diff in case of a mismatch')
parser.add_option('-D', '--diff_all', action='store_true', dest='diff_all', default=False,
                  help='Perform a file diff for every dataset')
parser.add_option('-R', '--diff_replicas', action='store_true', dest='diff_rep', default=False)
(opts, args) = parser.parse_args()

if not opts.mapfile or not opts.phedex_connect:
  print "Missing arguments.  Seek help.  (-h)"
  sys.exit(0)

phedex = PhedexApi(opts.phedex_connect)
dbs = DbsApi({'url':  opts.url})

map = parseDatasetNameMap(opts.mapfile)
flags = ('OK', 'NOTMDB', 'NODBS', 'NOTANYWHERE', 'MISMATCH',
         'TOTALDBSFILES', 'TOTALTMDBFILES',
         'MISFILETMDB', 'MISFILEDBS',
         'MISREPTMDB', 'MISREPDBS',
         'MISBLOCKTMDB', 'MISBLOCKDBS')
stats = {}
for flag in flags:
  stats[flag] = 0

print time.strftime('%Y-%m-%d %H:%M:%S')
print "HEAD:  %s\t%s\t%s\t%s\t%s\t%s" % ("FLAG", "OldDSName", "NewDSName", "N_TMDB", "N_DBS", "DIFF")
for dataset, newName in map.iteritems():
  try:
    n_tmdb, n_dbs = getStats(newName)
    flag = ""
    if n_tmdb == 0 and n_dbs == 0:
      flag = "NOTANYWHERE"
    elif n_tmdb == 0:
      flag = "NOTMDB"
    elif n_dbs == 0:
      flag = "NODBS"
    elif (n_tmdb != n_dbs):
      flag = "MISMATCH"
    else:
      flag = "OK"

    stats[flag] += 1
    stats['TOTALTMDBFILES'] += n_tmdb
    stats['TOTALDBSFILES'] += n_dbs
    
    print "DATASET %s\t%s\t%s\t%s\t%s\t%s" % (flag, dataset, newName, n_tmdb, n_dbs, n_tmdb-n_dbs)

    if (flag == 'MISMATCH' and opts.diff_mismatch) or opts.diff_all:
      missing_dbs, missing_tmdb = fileDiff(newName)
      for file in missing_dbs:  print "FILE NODBS  %s" % file
      for file in missing_tmdb: print "FILE NOTMDB %s" % file
      stats['MISFILETMDB'] += len(missing_tmdb)
      stats['MISFILEDBS'] += len(missing_dbs)

    if (opts.diff_rep and (flag == 'OK' or flag == 'MISMATCH')):
      missing = replicaDiff(newName)
      if missing:
        for block in missing:
          if 'missing_dbs' in missing[block]:
            print "REPLICA NODBS %s %s" % (block, string.join(missing[block]['missing_dbs']))
            stats['MISREPDBS'] += 1
          if 'missing_tmdb' in missing[block]:
            print "REPLICA NOTMDB %s %s" % (block, string.join(missing[block]['missing_tmdb']))
            stats['MISREPTMDB'] += 1
          if 'missing_dbs_block' in missing[block]:
            print "BLOCK NODBS %s" % block
            stats['MISBLOCKDBS'] += 1
          if 'missing_tmdb_block' in missing[block]:
            print "BLOCK NOTMDB %s" % block
            stats['MISBLOCKTMDB'] += 1
          
      else:
        print "REPDIFF OK %s %s" % (dataset, newName)
        
  except Exception, ex:
    print "ERROR:  ",ex
    traceback.print_exc(file=sys.stdout)

for flag in flags:
  print "TOTAL %s\t\t%i" % (flag, stats[flag])

sys.exit(0)

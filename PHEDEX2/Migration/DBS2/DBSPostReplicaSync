#!/usr/bin/env python
#
# Update DBS2 with block replica information

import sys
from fnmatch import filter
import re
from string import lstrip
from DBSAPI.dbsApi import DbsApi
from phedex import PhedexApi


def replicaSync(dataset):
  print "\ndataset "+dataset
  for replica in phedex.getBlockReplicas(dataset):
    global add_answer
    if not replica['se']:
      raise Exception("TMDB has null storage element for node %s, cannot make replica " % (replica['node'], replica['name']))

    while add_answer != 'Yes' and add_answer != 'No' and add_answer != 'Yes all' and add_answer != 'No all':
      add_answer = raw_input("Do you want to add the replica %s (%s) to block %s to DBS? \n[ Yes | No | Yes all | No all ] : " % (replica['se'], replica['node'], replica['name']))
    if add_answer == 'Yes':
      print "Replica added %s (%s) to block %s" % (replica['se'], replica['node'], replica['name'])
      dbs.addReplicaToBlock(replica['name'], replica['se'])
      add_answer = ''
    elif add_answer == 'No':
      print "Replica %s (%s) to block %s not added to DBS" % (replica['se'], replica['node'], replica['name'])
      add_answer = ''
    elif add_answer == 'Yes all':
      print "Replica added %s (%s) to block %s" % (replica['se'], replica['node'], replica['name'])
      dbs.addReplicaToBlock(replica['name'], replica['se'])
    elif add_answer == 'No all':
      print "Replica %s (%s) to block %s not added to DBS" % (replica['se'], replica['node'], replica['name'])
    else:
      print "Option not recognized"

def removeWrongLocation(dataset):
  print "\ndataset "+dataset
  for replica in phedex.getMissLocation(dataset):
    global rem_answer
    if not replica['se']:
      raise Exception("TMDB has null storage element for node %s, cannot remove replica " % (replica['node'], replica['name']))

    while rem_answer != 'Yes' and rem_answer != 'No' and rem_answer != 'Yes all' and rem_answer != 'No all':
      rem_answer = raw_input("Do you want to remove replica %s (%s) to block %s from DBS? \n[ Yes | No | Yes all | No all ] : " % (replica['se'], replica['node'], replica['name'])) 
    if rem_answer == 'Yes':
      print "Removing replica %s (%s) to block %s" % (replica['se'], replica['node'], replica['name'])
      dbs.deleteReplicaFromBlock(replica['name'], replica['se'])
      rem_answer = ''
    elif rem_answer == 'No':    
      print "Replica %s (%s) to block %s not removed from DBS" % (replica['se'], replica['node'], replica['name'])
      rem_answer = ''
    elif rem_answer == 'Yes all':
      print "Removing replica %s (%s) to block %s" % (replica['se'], replica['node'], replica['name'])
      dbs.deleteReplicaFromBlock(replica['name'], replica['se'])
    elif rem_answer == 'No all':
      print "Replica %s (%s) to block %s not removed from DBS" % (replica['se'], replica['node'], replica['name'])
    else:
      print "Option not recognized"

def parseDatasetNameMap(mapfile):
  map = {}
  f = open(mapfile)
  for line in f:
    if not line.startswith('/'): continue
    a = re.split("\s+", line)
    map[a[0]] = a[1]
  f.close
  return map
  
      

from optparse import OptionParser

usage =  "usage: %prog [options]\n"
usage += "\nAdds block replicas known to phedex to DBS2"
parser = OptionParser(usage=usage)
parser.add_option('-f', '--mapfile', dest='mapfile', help='Old dataset to New Dataset name mapping file')
parser.add_option('-u', '--url', dest='url', help='DBS write URL')
parser.add_option('-c', '--phedex_connect', dest='phedex_connect', help='PhEDEx connection string')
parser.add_option('-a', '--add_replica', action='store_true', dest='add', default=False, help='add replica locations to DBS')
parser.add_option('-r', '--remove_replica', action='store_true', dest='remove', default=False, help='remove replica locations from DBS')


(opts, args) = parser.parse_args()

if not opts.url or not opts.mapfile or not opts.phedex_connect:
  print "Missing arguments.  Seek help.  (-h)"
  sys.exit(0)

dbs = DbsApi({'url':  opts.url})
phedex = PhedexApi(opts.phedex_connect)

map = parseDatasetNameMap(opts.mapfile)
add_answer = ''
rem_answer = ''

if opts.add:
  for dataset, newName in map.iteritems():
    try:
      replicaSync(newName)
    except Exception, ex:
      print "ERROR:  ",ex

if opts.remove:
  for dataset, newName in map.iteritems():
    try:
      removeWrongLocation(newName)
    except Exception, ex:
      print "ERROR:  ",ex

sys.exit(0)

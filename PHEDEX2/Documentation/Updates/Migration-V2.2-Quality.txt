Log of restoring quality data to V2.2 databases: filling the new
t_quality_histogram from archived t_transfer_history data.

**********************************************************************
* SC3 INSTANCE

Create temporary table into which we can load temporary data:

  sqlplus $(Schema/OracleConnectId -db Schema/DBParam:SC3/Admin)
    create table xt_transfer_history as
    select * from t_transfer_history where 1=0;

Fetch the old data

  ARCHIVE=/castor/cern.ch/user/p/phedex/TransferHistory
  rfcp $ARCHIVE/History-SC3-200509-20051001Z022934.csv.gz .
  gunzip History-SC3-200509-20051001Z022934.csv.gz
  perl -we '
    chomp ($_ = <STDIN>);
    my @keys = split(/,/);
    while (<STDIN>) {
      chomp;
      my @vals = split(/,/);
      print "xt_transfer_history,", $.-1;
      for (my $i = 0; $i <= $#keys; ++$i) {
        $vals[$i] =~ s/"(.*)"/$1/g;
        print ",$keys[$i],\"$vals[$i]\"";
      }
      print "\n";
    }' < History-SC3-200509-20051001Z022934.csv > loadme

Load the data and process into t_quality_histogram

  split -l 10000 loadme xxloadme
  for f in xxloadme*; do
    echo $f
    Utilities/DBLoad -commit 1000 -db Schema/DBParam:SC3/Admin $f > $f.out
    sqlplus -S $(Schema/OracleConnectId -db Schema/DBParam:SC3/Admin) <<EOF
      merge into t_quality_histogram q
      using
       (select
          trunc (th.timestamp/300)*300 timebin,
          th.from_node, th.to_node,
          th.to_old_state, th.to_new_state,
          count (th.guid) transitions
        from xt_transfer_history th
        where th.from_old_state = 1
          and th.from_new_state = 1
          and th.to_old_state <= 3
          and th.to_new_state >= 2
        group by trunc (th.timestamp/300)*300,
          th.from_node, th.to_node,
          th.to_old_state, th.to_new_state) x
      on (q.timebin = x.timebin
       and q.from_node = x.from_node and q.to_node = x.to_node
       and q.old_state = x.to_old_state and q.new_state = x.to_new_state)
      when matched then
        update set q.transitions = q.transitions + x.transitions
      when not matched then
        insert (timebin, from_node, to_node,
                old_state, new_state, transitions)
        values (x.timebin, x.from_node, x.to_node,
                x.to_old_state, x.to_new_state, x.transitions);

    truncate table xt_transfer_history drop storage;
EOF
  done


**********************************************************************
* PRODUCTION INSTANCE

Create temporary table into which we can load temporary data:

  sqlplus $(Schema/OracleConnectId -db Schema/DBParam:Production/Admin)
    create table xt_transfer_history as
    select * from t_transfer_history where 1=0;

Fetch the old data

  DB=Schema/DBParam:Production/Admin
  for f in History-Production-*.csv.gz; do
    echo $f
    gzip -dc < $f | perl -we '
      my @keys;
      while (<STDIN>) {
        chomp;
        do { @keys = split(/,/); next } if /^TIMESTAMP/;
        my @vals = split(/,/);
        print "xt_transfer_history,", $.-1;
        for (my $i = 0; $i <= $#keys; ++$i) {
          $vals[$i] =~ s/"(.*)"/$1/g;
          print ",$keys[$i],\"$vals[$i]\"";
        }
        print "\n";
      }' | split -l 10000 - xxloadme

    for x in xxloadme*; do
      echo $x
      Utilities/DBLoad -commit 1000 -db $DB $x > out.$x
      sqlplus -S $(Schema/OracleConnectId -db $DB) <<EOF
        merge into t_quality_histogram q
        using
         (select
            trunc (th.timestamp/300)*300 timebin,
            th.from_node, th.to_node,
            th.to_old_state, th.to_new_state,
            count (th.guid) transitions
          from xt_transfer_history th
          where th.from_old_state = 1
            and th.from_new_state = 1
            and th.to_old_state <= 3
            and th.to_new_state >= 2
          group by trunc (th.timestamp/300)*300,
            th.from_node, th.to_node,
            th.to_old_state, th.to_new_state) x
        on (q.timebin = x.timebin
            and q.from_node = x.from_node
            and q.to_node = x.to_node
            and q.old_state = x.to_old_state
            and q.new_state = x.to_new_state)
        when matched then
          update set q.transitions = q.transitions + x.transitions
        when not matched then
          insert (timebin, from_node, to_node,
                  old_state, new_state, transitions)
          values (x.timebin, x.from_node, x.to_node,
                  x.to_old_state, x.to_new_state, x.transitions);
      truncate table xt_transfer_history drop storage;
EOF
    done
    rm xxloadme* out.xxloadme*
  done


/*
 * This is a procedure to add a "request" foriegn key to the
 * subscription and block_delete tables.  It can be ran by sqlplus
 * for all instances as-is
 */

set serveroutput on size 100000

/*
 *  Back up old tables
 */
BEGIN
   --------------------
   -- Tables
   FOR o IN
     (SELECT table_name name FROM user_tables
      WHERE table_name in ('T_DPS_SUBSCRIPTION', 'T_DPS_BLOCK_DELETE'))
   LOOP
      dbms_output.put_line ('Renaming table ' || o.name);
      execute immediate
          'rename ' || o.name
	  || ' to X' || substr (o.name, 1, 29);
   END LOOP;

   --------------------
   -- Constraints
   FOR o IN
     (SELECT constraint_name name, table_name FROM user_constraints
      WHERE table_name in ('XT_DPS_SUBSCRIPTION', 'XT_DPS_BLOCK_DELETE')
        AND constraint_name NOT LIKE 'SYS%')
   LOOP
      dbms_output.put_line ('Renaming constraint ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter table ' || o.table_name
	  || ' rename constraint ' || o.name
	  || ' to X' || substr (o.name, 1, 29);
   END LOOP;

   --------------------
   -- Indices
   FOR o IN
     (SELECT index_name name, table_name FROM user_indexes
      WHERE table_name  in ('XT_DPS_SUBSCRIPTION', 'XT_DPS_BLOCK_DELETE')
        AND index_name NOT LIKE 'SYS%')
   LOOP
      dbms_output.put_line ('Renaming index ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter index ' || o.name
	  || ' rename to X' || substr (o.name, 1, 29);
   END LOOP;
END;
/

/*
 * Create new tables and indexes
 */
PROMPT re-creating tables
create table t_dps_block_delete
  (request              integer,
   block		integer		not null,
   dataset		integer		not null,
   node			integer		not null,
   time_request		float		not null,
   time_complete	float,
   --
   constraint pk_dps_block_delete
     primary key (block, node),
   --
   constraint fk_dps_block_delete_request
     foreign key (request) references t_req_request (id)
 	on delete set null,
   --
   constraint fk_dps_block_delete_block
     foreign key (block) references t_dps_block (id)
     on delete cascade,
   --
   constraint fk_dps_block_delete_dataset
     foreign key (dataset) references t_dps_dataset (id)
     on delete cascade,
   --
   constraint fk_dps_block_delete_node
     foreign key (node) references t_adm_node (id)
     on delete cascade);


create table t_dps_subscription
  (request              integer,
   dataset		integer,
   block		integer,
   destination		integer		not null,
   priority		integer		not null,
   is_move		char (1)	not null,
   is_transient		char (1)	not null,
   time_create		float		not null,
   time_complete	float,
   time_clear		float,
   time_done		float,
   time_suspend_until	float,
   --
   constraint uq_dps_subscription
     unique (dataset, block, destination),
   --
   constraint fk_dps_subscription_request
     foreign key (request) references t_req_request (id)
 	on delete set null,
   --
   constraint fk_dps_subscription_dataset
     foreign key (dataset) references t_dps_dataset (id)
 	on delete cascade,
   --
   constraint fk_dps_subscription_block
     foreign key (block) references t_dps_block (id)
	on delete cascade,
   --
   constraint fk_dps_subscription_dest
     foreign key (destination) references t_adm_node (id)
	on delete cascade,
   --
   constraint ck_dps_subscription_ref
     check (not (block is null and dataset is null)
            and not (block is not null and dataset is not null)),
   --
   constraint ck_dps_subscription_move
     check (is_move in ('y', 'n')),
   --
   constraint ck_dps_subscription_transient
     check (is_transient in ('y', 'n')));


PROMPT re-creating indicies
--
create index ix_dps_block_delete_req
  on t_dps_block_delete (request);

create index ix_dps_block_delete_ds
  on t_dps_block_delete (dataset);

create index ix_dps_block_delete_node
  on t_dps_block_delete (node);

--
create index ix_dps_subscription_req
  on t_dps_subscription (request);

create index ix_dps_subscription_dataset
  on t_dps_subscription (dataset);

create index ix_dps_subscription_block
  on t_dps_subscription (block);

create index ix_dps_subscription_dest
  on t_dps_subscription (destination);

/*
 * Add request foreign keys where possible
 */
PROMPT Migrating table data

insert into t_dps_subscription ( select NULL, s.* from xt_dps_subscription s);
insert into t_dps_block_delete ( select NULL, bd.* from xt_dps_block_delete bd);

PROMPT Adding request foreign keys

PROMPT dataset subscriptions

update t_dps_subscription sup 
   set sup.request = 
(select id from 
  (select s.dataset, s.destination,
          r.time_create, 
          dense_rank() over (partition by s.dataset, s.destination order by r.time_create asc) n,
          r.id
     from t_req_request r 
     join t_req_type rt on rt.id = r.type
     join t_req_node rn on rn.request = r.id
     join t_req_decision rd on rd.request = r.id and rd.node = rn.node
     join t_req_dataset rds on rds.request = r.id
     join t_dps_subscription s on s.dataset = rds.dataset_id and s.destination = rn.node
    where rt.name = 'xfer'
      and rd.decision = 'y'
      and rds.dataset_id is not null
      and rn.point = 'd'
      and r.time_create <= s.time_create
  ) reqs
 where reqs.n = 1
   and reqs.dataset = sup.dataset
   and reqs.destination = sup.destination
)
 where sup.request is null;

PROMPT block subscriptions

update t_dps_subscription sup 
   set sup.request = 
(select id from 
  (select s.block, s.destination,
          r.time_create, 
          dense_rank() over (partition by s.block, s.destination order by r.time_create asc) n,
          r.id
     from t_req_request r 
     join t_req_type rt on rt.id = r.type
     join t_req_node rn on rn.request = r.id
     join t_req_decision rd on rd.request = r.id and rd.node = rn.node
     join t_req_block rb on rb.request = r.id
     join t_dps_subscription s on s.block = rb.block_id and s.destination = rn.node
    where rt.name = 'xfer'
      and rd.decision = 'y'
      and rb.block_id is not null
      and rn.point = 'd'
      and r.time_create <= s.time_create
  ) reqs
 where reqs.n = 1
   and reqs.block = sup.block
   and reqs.destination = sup.destination
)
 where sup.request is null;

PROMPT dataset deletions

update t_dps_block_delete bdup
   set bdup.request = 
(select id from 
  (select bd.dataset, bd.node,
          r.time_create, 
          dense_rank() over (partition by bd.dataset, bd.node order by r.time_create asc) n,
          r.id
     from t_req_request r
     join t_req_type rt on rt.id = r.type
     join t_req_node rn on rn.request = r.id
     join t_req_decision rd on rd.request = r.id and rd.node = rn.node
     join t_req_dataset rds on rds.request = r.id
     join t_dps_block_delete bd on bd.dataset = rds.dataset_id and bd.node = rn.node
    where rt.name = 'delete'
      and rd.decision = 'y'
      and rds.dataset_id is not null
      and r.time_create <= bd.time_request
  ) reqs
 where reqs.n = 1
   and reqs.dataset = bdup.dataset
   and reqs.node = bdup.node
)
 where bdup.request is null;


PROMPT block deletions

update t_dps_block_delete bdup
   set bdup.request = 
(select id from 
  (select bd.block, bd.node,
          r.time_create, 
          dense_rank() over (partition by bd.block, bd.node order by r.time_create asc) n,
          r.id
     from t_req_request r 
     join t_req_type rt on rt.id = r.type
     join t_req_node rn on rn.request = r.id
     join t_req_decision rd on rd.request = r.id and rd.node = rn.node
     join t_req_block rb on rb.request = r.id
     join t_dps_block_delete bd on bd.block = rb.block_id and bd.node = rn.node
    where rt.name = 'delete'
      and rd.decision = 'y'
      and rb.block_id is not null
      and r.time_create <= bd.time_request
  ) reqs
 where reqs.n = 1
   and reqs.block = bdup.block
   and reqs.node = bdup.node
)
 where bdup.request is null;

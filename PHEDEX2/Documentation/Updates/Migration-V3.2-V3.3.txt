** Migration procedure applied to Prod instance **

# This migration should be able to be performed while site agents and
# web services are still active.  Central agents should be shut down
# for the instance, however.

# !!! Make sure the DBA has given the schema access to the SCN!

# cd to a directory where the PHEDEX directory exists and there is an
# RPM installation

# Source environment
source sw/slc*/cms/PHEDEX-admin/PHEDEX_*/etc/profile.d/env.sh

# Set authentication for DB access
export PHEDEX_INSTANCE=Dev;
export PHEDEX_DB="./DBParam:${PHEDEX_INSTANCE}/Admin";
export PHEDEX_DB_R="./DBParam:${PHEDEX_INSTANCE}/Reader";
export PHEDEX_DB_W="./DBParam:${PHEDEX_INSTANCE}/CERN";
export PHEDEX_CON=$(PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB});
export PHEDEX_CON_R=$(PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB_R});
export PHEDEX_CON_W=$(PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB_W});
export PHEDEX_SCHEMA=$(echo $PHEDEX_CON | perl -p -e 's|/.*$||')
export PHEDEX_SCHEMA_R=$(echo $PHEDEX_CON_R | perl -p -e 's|/.*$||')
export PHEDEX_SCHEMA_W=$(echo $PHEDEX_CON_W | perl -p -e 's|/.*$||')
env | egrep 'PHEDEX_(DB|CON|SCHEMA)';

# Get rid of X tables
sqlplus -S $PHEDEX_CON @PHEDEX/Schema/OracleResetOld.sql </dev/null

# Update the triggers
sqlplus -S $PHEDEX_CON @PHEDEX/Schema/OracleCoreTriggers.sql </dev/null

# Connect to DB using SQLPlus
sqlplus $PHEDEX_CON

-- Some session settings
set serveroutput on size 100000;
set timing on;
spool migration.sqllog

-- Rename tables to be updated

rename t_history_dest to xt_history_dest;
rename t_history_link_stats to xt_history_link_stats;
rename t_dps_block_replica to xt_dps_block_replica;

BEGIN
   --------------------
   -- Constraints
   FOR o IN
     (SELECT constraint_name name, table_name FROM user_constraints
      WHERE constraint_name NOT LIKE 'X%'
        AND constraint_name NOT LIKE 'SYS%'
        AND (constraint_name LIKE '%_HISTORY_DEST%' OR
             constraint_name LIKE '%_HISTORY_LINK_STATS%' OR
             constraint_name LIKE '%_DPS_BLOCK_REPLICA%'))
   LOOP
      dbms_output.put_line ('Renaming constraint ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter table ' || o.table_name
	  || ' rename constraint ' || o.name
	  || ' to X' || substr (o.name, 1, 29);
   END LOOP;

   --------------------
   -- Indices
   FOR o IN
     (SELECT index_name name, table_name FROM user_indexes
      WHERE index_name NOT LIKE 'X%'
        AND index_name NOT LIKE 'SYS%'
        AND (index_name LIKE '%_HISTORY_DEST%' OR 
             index_name LIKE '%_HISTORY_LINK_STATS%' OR
             index_name LIKE '%_DPS_BLOCK_REPLICA%'))
   LOOP
      dbms_output.put_line ('Renaming index ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter index ' || o.name
	  || ' rename to X' || substr (o.name, 1, 29);
   END LOOP;
END;

-- Add new temporary tables for updated BlockMonitor routine

create global temporary table t_tmp_br_active
  (block      		integer		not null
) on commit delete rows;

create global temporary table t_tmp_br_src
  (block      		integer		not null,
   node			integer		not null,
   files		integer		not null,
   bytes		integer		not null,
   time_update		integer		not null
) on commit delete rows;

create global temporary table t_tmp_br_dest
  (block      		integer		not null,
   node			integer		not null,
   files		integer		not null,
   bytes		integer		not null,
   time_update		integer		not null
) on commit delete rows;

create global temporary table t_tmp_br_node
  (block      		integer		not null,
   node			integer		not null,
   files		integer		not null,
   bytes		integer		not null,
   time_update		integer		not null
) on commit delete rows;

create global temporary table t_tmp_br_xfer
  (block      		integer		not null,
   node			integer		not null,
   files		integer		not null,
   bytes		integer		not null,
   time_update		integer		not null
) on commit delete rows;

create global temporary table t_tmp_br_flag
  (block      		integer		not null,
   node			integer		not null,
   is_custodial		char(1)		not null,
   user_group		integer		,
   time_update		integer		not null
) on commit delete rows;

-- re-create block replica table

create table t_dps_block_replica
  (block		integer		not null,
   node			integer		not null,
   is_active		char (1)	not null,
   src_files		integer		not null,
   src_bytes		integer		not null,
   dest_files		integer		not null,
   dest_bytes		integer		not null,
   node_files		integer		not null,
   node_bytes		integer		not null,
   xfer_files		integer		not null,
   xfer_bytes		integer		not null,
   is_custodial		char (1)	not null, -- applies to dest_files, node_files
   user_group		integer			, -- applies to dest_files, node_files
   time_create		float		not null,
   time_update		float		not null,
   --
   constraint pk_dps_block_replica
     primary key (block, node),
   --
   constraint fk_dps_block_replica_block
     foreign key (block) references t_dps_block (id)
     on delete cascade,
   --
   constraint fk_dps_block_replica_node
     foreign key (node) references t_adm_node (id)
     on delete cascade,
   --
   constraint ck_dps_block_replica_cust
     check (is_custodial in ('y', 'n')),
   --
   constraint fk_dps_block_replica_group
     foreign key (user_group) references t_adm_group (id)
     on delete set null,
   --
   constraint ck_dps_block_replica_active
     check (is_active in ('y', 'n')));

create index ix_dps_block_replica_node
  on t_dps_block_replica (node);

create index ix_dps_block_replica_group
  on t_dps_block_replica (user_group);

-- New table for missing data statistics

create table t_status_missing
  (time_update		float		not null,
   node			integer		not null,
   is_custodial		char (1)	not null,
   files		integer		not null,
   bytes		integer		not null,
   --
   constraint pk_status_missing
     primary key (node, is_custodial),
   --
   constraint fk_status_missing_node
     foreign key (node) references t_adm_node (id)
     on delete cascade,
   --
   constraint ck_status_missing_cust
     check (is_custodial in ('y', 'n'))
  );

-- Re-create history tables

create table t_history_dest
  (timebin		float		not null,
   timewidth		float		not null,
   node			integer		not null,
   dest_files		integer, -- t_status_block_dest
   dest_bytes		integer,
   cust_dest_files	integer, -- t_status_block_dest
   cust_dest_bytes	integer,
   src_files		integer, -- t_status_file
   src_bytes		integer,
   node_files		integer, -- t_status_replica
   node_bytes		integer,
   cust_node_files	integer, -- t_status_replica
   cust_node_bytes	integer,
   miss_files		integer, -- t_status_missing
   miss_bytes		integer,
   cust_miss_files	integer, -- t_status_missing
   cust_miss_bytes	integer,
   request_files	integer, -- t_status_request
   request_bytes	integer,
   idle_files		integer, -- t_status_request
   idle_bytes		integer,
   --
   constraint pk_history_dest
     primary key (timebin, node),
   --
   constraint fk_history_dest_node
     foreign key (node) references t_adm_node (id)
  );

create table t_history_link_stats
  (timebin		float		not null,
   timewidth		float		not null,
   from_node		integer		not null,
   to_node		integer		not null,
   priority		integer		not null,
   --
   -- statistics for t_xfer_state during/at end of this timebin
   pend_files		integer, -- all tasks
   pend_bytes		integer,
   wait_files		integer, -- tasks not exported
   wait_bytes		integer,
   cool_files		integer, -- cooling off (in error) (obsolete)
   cool_bytes		integer,
   ready_files		integer, -- exported, available for transfer
   ready_bytes		integer,
   xfer_files		integer, -- taken for transfer
   xfer_bytes		integer,
   --
   -- statistics for t_xfer_path during/at end of this bin
   confirm_files	integer, -- t_xfer_path
   confirm_bytes	integer,
   confirm_weight	integer,
   -- 
   -- statistics from t_link_param calculated at the end of this cycle
   param_rate		float,
   param_latency	float,
   --
   constraint pk_history_link_stats
     primary key (timebin, to_node, from_node, priority),
   --
   constraint fk_history_link_stats_from
     foreign key (from_node) references t_adm_node (id),
   --
   constraint fk_history_link_stats_to
     foreign key (to_node) references t_adm_node (id)
  );

/*
 * Re-fill block replica table
 */

insert /*+ append */ into t_dps_block_replica
select * from xt_dps_block_replica;

commit;

/* When filling the new dest table, estimate miss_* as the difference
 * between dest_files and node_files, disallowing negative values.  This
 * will be wrong by the amount of unsubscribed data, but for large sites
 * this should be a small difference.
 */

insert /*+ append */ into t_history_dest
(timebin, timewidth, node,
 dest_files, dest_bytes,
 cust_dest_files, cust_dest_bytes,
 src_files, src_bytes,
 node_files, node_bytes,
 cust_node_files, cust_node_bytes,
 miss_files, miss_bytes,
 cust_miss_files, cust_miss_bytes,
 request_files, request_bytes,
 idle_files, idle_bytes)
select h.timebin, h.timewidth, h.node,
 h.dest_files, h.dest_bytes,
 h.cust_dest_files, h.cust_dest_bytes,
 h.src_files, h.src_bytes,
 h.node_files, h.node_bytes,
 h.cust_node_files, h.cust_node_bytes,
 greatest(h.dest_files - h.node_files,0) miss_files,
 greatest(h.dest_bytes - h.node_bytes,0) miss_bytes,
 greatest(h.cust_dest_files - h.cust_node_files,0) cust_miss_files,
 greatest(h.cust_dest_bytes - h.cust_node_bytes,0) cust_miss_bytes,
 h.request_files, h.request_bytes,
 h.idle_files, h.idle_bytes
from xt_history_dest h;

commit;

-- create FK index
create index ix_history_dest_node
  on t_history_dest (node);

/*
 * Fix priority mismatch in t_history_link_stats, a bug introduced in V2.5! 
 */

-- record the time of the priority error
var mytime number;
BEGIN
   select min(timebin) into :mytime from xt_history_link_stats
    where confirm_files is not null and confirm_weight is null;
END;
/
select gmtime(:mytime) from dual;

-- First fill the table
insert /*+ append */ into t_history_link_stats
select * from xt_history_link_stats;

-- Remove any rows which are *only* confirm_files
delete from t_history_link_stats
 where timebin >= :mytime
   and confirm_files is not null
   and pend_files is null
   and wait_files is null
   and cool_files is null
   and ready_files is null
   and xfer_files is null;

-- Remove all other confirm_* statistics
update t_history_link_stats
   set confirm_files = NULL,
       confirm_bytes = NULL
 where timebin >= :mytime;

commit;

-- Create link indexes

create index ix_history_link_stats_from
  on t_history_link_stats (from_node);

create index ix_history_link_stats_to
  on t_history_link_stats (to_node);

/* Update the rows in the new table based on a selection from the old
 * table after the time the bug was introduced */

merge into t_history_link_stats h
using (
  select x.timebin, x.timewidth, x.from_node, x.to_node,
         2 * x.priority + (1 - decode(l.is_local,'y',1,0)) priority,
	 x.confirm_files, x.confirm_bytes
   from xt_history_link_stats x
   join t_adm_link l on l.from_node = x.from_node and l.to_node = x.to_node
  where x.timebin >= :mytime
    and x.confirm_files is not null
) x
on (h.timebin   = x.timebin and
    h.timewidth = x.timewidth and
    h.from_node = x.from_node and
    h.to_node   = x.to_node and
    h.priority  = x.priority)
when matched then update
  set h.confirm_files = x.confirm_files,
      h.confirm_bytes = x.confirm_bytes
when not matched then insert
 (timebin, timewidth, from_node, to_node, priority,
  confirm_files, confirm_bytes)
 values
 (x.timebin, x.timewidth, x.from_node, x.to_node, x.priority,
  x.confirm_files, x.confirm_bytes);

/* Change priority for local links.  The above conversion assumes that
 * all local links had a "local priority", which can only be an even
 * number.  Since this was not really the case, and we don't have access
 * to the t_xfer_path.is_local that was being used for task-level
 * priority, then we need to move the priority of the statistics.
 */

-- update all odd local link priorities after the bug
merge into t_history_link_stats h
using (
  select hh.timebin, hh.timewidth, hh.from_node, hh.to_node, hh.priority - 1 priority,
         hh.pend_files, hh.pend_bytes, hh.wait_files, hh.wait_bytes, hh.cool_files, hh.cool_bytes,
         hh.ready_files, hh.ready_bytes, hh.xfer_files, hh.xfer_bytes, hh.confirm_files, hh.confirm_bytes
    from t_history_link_stats hh
    join t_adm_link l on l.from_node = hh.from_node and l.to_node = hh.to_node
   where l.is_local = 'y'
     and hh.timebin >= :mytime
     and hh.priority in (1,3,5)
) x
on (h.timebin   = x.timebin and
    h.timewidth = x.timewidth and
    h.from_node = x.from_node and
    h.to_node   = x.to_node and
    h.priority  = x.priority)
when matched then update
 set h.pend_files = nvl(h.pend_files,0) + nvl(x.pend_files,0),
     h.pend_bytes = nvl(h.pend_bytes,0) + nvl(x.pend_bytes,0),
     h.wait_files = nvl(h.wait_files,0) + nvl(x.wait_files,0),
     h.wait_bytes = nvl(h.wait_bytes,0) + nvl(x.wait_bytes,0),
     h.cool_files = nvl(h.cool_files,0) + nvl(x.cool_files,0),
     h.cool_bytes = nvl(h.cool_bytes,0) + nvl(x.cool_bytes,0),
     h.ready_files = nvl(h.ready_files,0) + nvl(x.ready_files,0),
     h.ready_bytes = nvl(h.ready_bytes,0) + nvl(x.ready_bytes,0),
     h.xfer_files = nvl(h.xfer_files,0) + nvl(x.xfer_files,0),
     h.xfer_bytes = nvl(h.xfer_bytes,0) + nvl(x.xfer_bytes,0),
     h.confirm_files = nvl(h.confirm_files,0) + nvl(x.confirm_files,0),
     h.confirm_bytes = nvl(h.confirm_bytes,0) + nvl(x.confirm_bytes,0)
when not matched then insert
 (timebin, timewidth, from_node, to_node, priority,
  pend_files, pend_bytes, wait_files, wait_bytes, cool_files, cool_bytes,
  ready_files, ready_bytes, xfer_files, xfer_bytes, confirm_files, confirm_bytes)
 values
 (x.timebin, x.timewidth, x.from_node, x.to_node, x.priority,
  x.pend_files, x.pend_bytes, x.wait_files, x.wait_bytes, x.cool_files, x.cool_bytes,
  x.ready_files, x.ready_bytes, x.xfer_files, x.xfer_bytes, x.confirm_files, x.confirm_bytes)
;

-- delete the odd local link priorities after the bug
delete from t_history_link_stats
  where (timebin, timewidth, from_node, to_node, priority) in (
  select hh.timebin, hh.timewidth, hh.from_node, hh.to_node, hh.priority
    from t_history_link_stats hh
    join t_adm_link l on l.from_node = hh.from_node and l.to_node = hh.to_node
   where l.is_local = 'y'
     and hh.timebin >= :mytime
     and hh.priority in (1,3,5)
);

commit;

-- verify old vs. new. The numbers should match, we were only changing the priorities!
select sum(pend_files) old_pend_files from xt_history_link_stats;
select sum(pend_files) new_pend_files from t_history_link_stats;

-- these will be slightly different, since the bug resulted in some double-counting before
select sum(confirm_files) old_confirm_files from xt_history_link_stats;
select sum(confirm_files) new_confirm_files from t_history_link_stats;

-- Create new index on t_dps_block

alter table t_dps_block add constraint uk_dps_block_dataset unique (dataset, name);

/* Now drop the redundant index.  However, because this index was very
 * important, make sure the DBA is monitoring the database to see that
 * the new one (above) is being used.
 */

drop index ix_dps_block_dataset;

# If you're running on Test bed, you're done here, otherwise go on
# IMPORTANT: Use the right DB instance below for Dev (_test) and Debug (_sc)!!

# Create synonmys
PHEDEX/Schema/OracleSyns.sh $PHEDEX_SCHEMA $PHEDEX_CON $PHEDEX_CON_R
PHEDEX/Schema/OracleSyns.sh $PHEDEX_SCHEMA $PHEDEX_CON $PHEDEX_CON_W

# Create privileges
PHEDEX/Schema/OraclePrivs.sh $PHEDEX_CON $PHEDEX_SCHEMA_R $PHEDEX_SCHEMA_W

-- All done!
exit;

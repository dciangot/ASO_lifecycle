Changing schema with respect to requests.  This explains how to
migrate old request data.

/*
 *  Back up old request data in "X" tables
 */
set serveroutput on size 100000
BEGIN
   --------------------
   -- Tables
   FOR o IN
     (SELECT table_name name FROM user_tables
      WHERE table_name LIKE 'T_REQ_%')
   LOOP
      dbms_output.put_line ('Renaming table ' || o.name);
      execute immediate
          'rename ' || o.name
	  || ' to X' || substr (o.name, 1, 29);
   END LOOP;

   --------------------
   -- Sequences
   FOR o IN
     (SELECT sequence_name name FROM user_sequences
      WHERE sequence_name LIKE 'SEQ_REQ_%')
   LOOP
      dbms_output.put_line ('Renaming sequence ' || o.name);
      execute immediate
          'rename ' || o.name
	  || ' to X' || substr (o.name, 1, 29);
   END LOOP;

   --------------------
   -- Constraints
   FOR o IN
     (SELECT constraint_name name, table_name FROM user_constraints
      WHERE table_name LIKE 'XT_REQ_%'
        AND constraint_name NOT LIKE 'SYS%')
   LOOP
      dbms_output.put_line ('Renaming constraint ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter table ' || o.table_name
	  || ' rename constraint ' || o.name
	  || ' to X' || substr (o.name, 1, 29);
   END LOOP;

   --------------------
   -- Indices
   FOR o IN
     (SELECT index_name name, table_name FROM user_indexes
      WHERE table_name LIKE 'XT_REQ_%'
        AND index_name NOT LIKE 'SYS%')
   LOOP
      dbms_output.put_line ('Renaming index ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter index ' || o.name
	  || ' rename to X' || substr (o.name, 1, 29);
   END LOOP;
END;
/

/*
 *  Create New Request Schema
 */

> sqlplus $(PHEDEX/Utilities/OracleConnectId -db DBParam:Testbed) @PHEDEX/Schema/OracleCoreReq.sql

/*
 *  Migrate Request Data
 */
insert into t_req_request
(id, type, created_by, time_create)
select r.id, 1,
        r.creator, min(ra.time_apply)
  from xt_req_request r
  join xt_req_action ra on ra.request = r.id
 group by r.id, r.creator;

insert into t_req_dbs
(request, name, dbs_id)
select distinct rds.request, rds.dbs, dbs.id
  from xt_req_info_dataset rds
left join t_dps_dbs dbs on dbs.name = rds.dbs
union
select distinct rb.request, rb.dbs, dbs.id
  from xt_req_info_block rb
left join t_dps_dbs dbs on dbs.name = rb.dbs;

insert into t_req_dataset
(request, name, dataset_id)
select rds.request, rds.dataset, ds.id
  from xt_req_info_dataset rds
left join t_dps_dataset ds on ds.name = rds.dataset;

insert into t_req_block
(request, name, block_id)
select rb.request, rb.block, b.id
  from xt_req_info_block rb
left join t_dps_block b on b.name = rb.block;

insert into t_req_node
(request, node, point)
select rd.request, rd.destination, 'd'
  from xt_req_info_dest rd;

/* "New style" requests */
insert into t_req_decision
(request, node, decision, decided_by, time_decided)
select ra.request, n.id node, 
       case when ra.action = 'Subscribed' then 'y'
            when ra.action = 'Disapproved' then 'n'
            else null
       end decision,
       ra.client, ra.time_apply
  from (select ra.request, raa.value node, min(ra.time_apply) time_apply
          from xt_req_action ra
          join xt_req_action_attr raa on raa.action = ra.id
                                     and raa.name = 'For Node'
         group by ra.request, raa.value) last_dec
  join xt_req_action ra on ra.request = last_dec.request
                       and ra.time_apply = last_dec.time_apply
  join t_adm_node n on n.name = last_dec.node
 order by ra.request, ra.time_apply
;

/* "Old sytle" requests */
insert into t_req_decision
(request, node, decision, decided_by, time_decided)
select dec_act.request, n.id node, 
       case when dec_act.action = 'Subscribed' then 'y'
            when dec_act.action = 'Disapproved' then 'n'
            else null
       end decision,
       dec_act.client, dec_act.time_apply
  from xt_req_action c_act
  join xt_req_action_attr c_node on c_node.action = c_act.id
  join xt_req_action dec_act on dec_act.request = c_act.request
  join t_adm_node n on n.name = c_node.value
 where c_act.action = 'Created'
   and (dec_act.action = 'Subscribed' or dec_act.action = 'Disapproved')
   and c_node.name = 'Destination Node'
   and c_act.request <= 3182 and c_act.request < 50
 order by dec_act.request, dec_act.time_apply
;

insert into t_req_xfer
(request, priority, is_move, is_static, is_transient, is_distributed)
select distinct r.id, rds.priority, rds.is_move, 'n', 'n', 'n'
  from xt_req_request r
  join xt_req_info_dataset rds on rds.request = r.id
left join t_req_xfer rx on rx.request = r.id
 where rx.request is null;

insert into t_req_xfer
(request, priority, is_move, is_static, is_transient, is_distributed)
select distinct r.id, rb.priority, rb.is_move, 'n', 'n', 'n'
  from xt_req_request r
  join xt_req_info_block rb on rb.request = r.id
left join t_req_xfer rx on rx.request = r.id
 where rx.request is null;

insert into t_req_comments
(id, request, comments_by, comments, time_comments)
select rownum, r.id, ra.client, raa.value, ra.time_apply
  from xt_req_request r
  join xt_req_action ra on ra.request = r.id
  join xt_req_action_attr raa on raa.action = ra.id and raa.name = 'Comment'
 where raa.value is not null
 order by ra.time_apply asc;

update t_req_request r
   set r.comments = (
select c.id 
  from t_req_comments c
 where c.request = r.id
   and c.comments_by = r.created_by
   and c.time_comments = r.time_create
);

update t_req_decision d
   set d.comments = (
select c.id
  from t_req_comments c
 where c.request = d.request
   and c.comments_by = d.decided_by
   and c.time_comments = d.time_decided
);

commit;

declare
  dataclob clob := EMPTY_CLOB;
begin
   for r in (select request, data from t_req_xfer)
   loop
      update t_req_xfer set data = empty_clob() where request = r.request returning data into dataclob;
      for d in (select raa.value from xt_req_action ra
                  join xt_req_action_attr raa on raa.action = ra.id
                 where raa.name = 'Data'
                   and ra.request = r.request)
      loop
        dbms_lob.append(dataclob, to_clob(d.value));
        dbms_lob.append(dataclob, to_clob(' '));
      end loop;
      commit;
      dbms_output.put_line ('Copied ' || dbms_lob.getlength(dataclob) || ' bytes for request ' || r.request);
   end loop;
end;
/

/*
 *  Make sequence counters current
 */
Declare
  increment number;
  dummy number;
  seq_table varchar (32);
Begin
    FOR o IN
      (SELECT sequence_name, last_number FROM user_sequences
        WHERE sequence_name LIKE 'SEQ_REQ%')
   LOOP
      seq_table := regexp_replace(o.sequence_name, 'SEQ_', 'T_');
      execute immediate 'select max(id) from ' || seq_table into increment;
      increment := increment - o.last_number;
      dbms_output.put_line('Incrementing '|| o.sequence_name ||' by ' || increment);
      execute immediate 'alter sequence ' || o.sequence_name || ' increment by ' || increment;
      execute immediate 'select ' || o.sequence_name || '.nextval from dual' into dummy;
      execute immediate 'alter sequence ' || o.sequence_name || ' increment by 1';
   END LOOP;
End;
/

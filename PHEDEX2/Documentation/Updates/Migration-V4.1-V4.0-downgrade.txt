# Migration procedure applied to Dev instance **

# This migration should be able to be performed while site agents and web services are still active
# Central agents should be shut down for the instance, however.

# cd to a directory where the PHEDEX directory exists and there is an
# RPM installation

cd /data/DevNodes

# Source environment
source sw/slc*/cms/PHEDEX-admin/PHEDEX_*/etc/profile.d/env.sh

# Checkout the Schema revision for 4.0

cvs co -d PHEDEX_CVS/Schema -r PHEDEX_4_0_1 COMP/PHEDEX/Schema

# Set authentication for DB access
export PHEDEX_INSTANCE=Dev;
export PHEDEX_DB="SITECONF/CH_CERN/PhEDEx/DBParam:${PHEDEX_INSTANCE}/Admin";
export PHEDEX_DB_R="SITECONF/CH_CERN/PhEDEx/DBParam:${PHEDEX_INSTANCE}/Reader";
export PHEDEX_DB_W="SITECONF/CH_CERN/PhEDEx/DBParam:${PHEDEX_INSTANCE}/CERN";
export PHEDEX_CON=$(PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB});
export PHEDEX_CON_R=$(PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB_R});
export PHEDEX_CON_W=$(PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB_W});
export PHEDEX_SCHEMA=$(echo $PHEDEX_CON | perl -p -e 's|/.*$||')
export PHEDEX_SCHEMA_R=$(echo $PHEDEX_CON_R | perl -p -e 's|/.*$||')
export PHEDEX_SCHEMA_W=$(echo $PHEDEX_CON_W | perl -p -e 's|/.*$||')
env | egrep 'PHEDEX_(DB|CON|SCHEMA)';

# Connect to DB using SQLPlus
sqlplus $PHEDEX_CON

-- Deploying the schema over a 4.0 schema
-- From SQLPLUS

set serveroutput on size 100000;
set timing on;
spool migration.sqllog

# Backup new latency tables;
rename t_log_block_latency to nt_log_block_latency;
rename t_log_file_latency to nt_log_file_latency;
rename t_dps_block_latency to nt_dps_block_latency;
rename t_xfer_file_latency to nt_xfer_file_latency;

BEGIN
   --------------------
   -- Constraints
   FOR o IN
     (SELECT constraint_name name, table_name FROM user_constraints
      WHERE constraint_name NOT LIKE 'X%'
        AND constraint_name NOT LIKE 'SYS%'
        AND table_name LIKE 'NT_%_LATENCY')
   LOOP
      dbms_output.put_line ('Renaming constraint ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter table ' || o.table_name
	  || ' rename constraint ' || o.name
	  || ' to N' || substr (o.name, 1, 29);
   END LOOP;

   --------------------
   -- Indices
   FOR o IN
     (SELECT index_name name, table_name FROM user_indexes
      WHERE index_name NOT LIKE 'X%'
        AND index_name NOT LIKE 'SYS%'
        AND table_name LIKE 'NT_%_LATENCY')
   LOOP
      dbms_output.put_line ('Renaming index ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter index ' || o.name
	  || ' rename to N' || substr (o.name, 1, 29);
   END LOOP;
END;
/

-- recreate old latency table;

create table t_log_block_latency
  (time_update		float		not null,
   destination		integer		not null,
   block		integer			, -- block id, can be null if block remvoed
   files		integer		not null, -- number of files
   bytes		integer		not null, -- block size in bytes
   priority		integer		not null, -- t_dps_block_dest priority
   is_custodial		char (1)	not null, -- t_dps_block_dest custodial
   time_subscription	float		not null, -- time block was subscribed
   block_create		float		not null, -- time the block was created
   first_request	float		        , -- time block was first routed (t_xfer_request appeared)
   first_replica	float			, -- time the first file was replicated
   last_replica		float			, -- time the last file was replicated
   last_suspend		float			, -- time the block was last observed suspended
   suspend_time		float			, -- seconds the block was suspended
   latency		float			, -- current latency for this block
   --
   constraint fk_status_block_latency_dest
     foreign key (destination) references t_adm_node (id),
   --
   constraint fk_status_block_latency_block
     foreign key (block) references t_dps_block (id)
     on delete set null,
   --
   constraint ck_status_block_latency_cust
     check (is_custodial in ('y', 'n'))
  );

create index ix_log_block_latency_update
  on t_log_block_latency (time_update);

create index ix_log_block_latency_dest
  on t_log_block_latency (destination);

create index ix_log_block_latency_block
  on t_log_block_latency (block);

create index ix_log_block_latency_subs
  on t_log_block_latency (time_subscription);


-- fill new latency tables into old table
-- completed block destinations

insert /*+ append */ into t_log_block_latency
(time_update, destination, block, files, bytes, priority, is_custodial, time_subscription,
   block_create, first_request, first_replica, last_replica, suspend_time, latency)
select nl.time_update, nl.destination, nl.block, nl.files, nl.bytes,
   nl.priority, nl.is_custodial, nl.time_subscription, 
   nl.block_create, nl.first_request, nl.first_replica, nl.last_replica,
   nl.total_suspend_time, nl.latency from nt_log_block_latency nl;

-- incomplete block destinations

insert /*+ append */ into t_log_block_latency
(time_update, destination, block, files, bytes, priority, is_custodial, time_subscription,
   block_create, first_request, first_replica, last_replica, last_suspend, suspend_time, latency)
select nl.time_update, nl.destination, nl.block, nl.files, nl.bytes,
   nl.priority, nl.is_custodial, nl.time_subscription,
   nl.block_create, min(fl.time_request), min(fl.time_at_destination), nl.last_replica,
   nl.last_suspend, nl.total_suspend_time+nl.partial_suspend_time, nl.latency
  from nt_dps_block_latency nl
  left join nt_xfer_file_latency fl on fl.destination=nl.destination and fl.inblock=nl.block
  group by nl.time_update, nl.destination, nl.block, nl.files, nl.bytes,
        nl.priority, nl.is_custodial, nl.time_subscription,
        nl.block_create, nl.last_replica,
        nl.last_suspend, nl.total_suspend_time+nl.partial_suspend_time, nl.latency;

commit;

-- cross check old/new latency tables

select count(*) from nt_dps_block_latency;
select count(*) from nt_log_block_latency;
select count(*) from t_log_block_latency;

-- These values are expected to be the same

select sum(time_update),sum(destination),sum(block),sum(priority),sum(decode(is_custodial,'y',1,'n',2,NULL,3)),
 sum(time_subscription), sum(block_create),
 sum(suspend_time),sum(latency) from t_log_block_latency where last_replica is null;
select sum(time_update),sum(destination),sum(block),sum(priority),sum(decode(is_custodial,'y',1,'n',2,NULL,3)),
 sum(time_subscription), sum(block_create),
 sum(total_suspend_time),sum(latency) from nt_dps_block_latency;
select sum(time_update),sum(destination),sum(block),sum(priority),sum(decode(is_custodial,'y',1,'n',2,NULL,3)),
 sum(time_subscription), sum(block_create), sum(first_request),
 sum(first_replica),sum(last_replica),sum(suspend_time),sum(latency) from t_log_block_latency
 where last_replica is not null;
select sum(time_update),sum(destination),sum(block),sum(priority),sum(decode(is_custodial,'y',1,'n',2,NULL,3)),
 sum(time_subscription), sum(block_create), sum(first_request),
 sum(first_replica),sum(last_replica),sum(total_suspend_time),sum(latency) from nt_log_block_latency;
select sum(block),sum(files) from t_log_block_latency where last_replica is null;
select sum(block),sum(files) from nt_dps_block_latency;
select sum(block),sum(files) from t_log_block_latency where last_replica is not null;
select sum(block),sum(files) from nt_log_block_latency;

-- Drop the new t_status_block_path table (it is cleaned up on every cycle anyway) and re-create the old one

drop table t_status_block_path;

create table t_status_block_path
  (time_update		float		not null,
   destination		integer		not null,
   src_node		integer		not null,
   block		integer		not null,
   priority		integer		not null, -- t_xfer_path priority
   is_valid		integer		not null, -- t_xfer_path is_valid
   route_files		integer		not null, -- routed files
   route_bytes		integer         not null, -- routed bytes
   xfer_attempts	integer		not null, -- xfer attempts of routed
   time_request		integer		not null, -- min (oldest) request time of routed
   --
   constraint pk_status_block_path
     primary key (destination, src_node, block, priority, is_valid),
   --
   constraint fk_status_block_path_dest
     foreign key (destination) references t_adm_node (id)
     on delete cascade,
   constraint fk_status_block_path_src
     foreign key (src_node) references t_adm_node (id)
     on delete cascade,
    constraint fk_status_block_path_block
     foreign key (block) references t_dps_block (id)
     on delete cascade
);

create index ix_status_block_path_src
  on t_status_block_path (src_node);

create index ix_status_block_path_block
  on t_status_block_path (block);

-- the rest of the 4.1.0 tables are compatible with the 4.0.1 schema and don't need to be rolled back

-- Decrease the schema_version
create or replace function schema_version return varchar is
  result varchar(20);
begin
  return('4.0.1');
end schema_version;
/

select schema_version from dual;

quit;

-- If you're running on Testbed, you're done here, otherwise remember to run
-- the following scripts in a shell
-- PHEDEX_SCHEMA,PHEDEX_SCHEMA_R,PHEDEX_SCHEMA_W : the Admin, Reader, Writer user name (DB instance name)
-- PHEDEX_CON,PHEDEX_CON_R,PHEDEX_CON_W) : the Admin, Reader, Writer connection ID as returned by PHEDEX/Utilities/OracleConnectId

-- Create synonmys
PHEDEX_CVS/Schema/OracleSyns.sh $PHEDEX_SCHEMA $PHEDEX_CON $PHEDEX_CON_R
PHEDEX_CVS/Schema/OracleSyns.sh $PHEDEX_SCHEMA $PHEDEX_CON $PHEDEX_CON_W

-- Create privileges
PHEDEX_CVS/Schema/OraclePrivs.sh $PHEDEX_CON $PHEDEX_SCHEMA_R $PHEDEX_SCHEMA_W
**********************************************************************
** TESTBED

* Load schema:
sqlplus cms_transfermgmt_testbed/phedexedehp@devdb <Schema/OracleCoreTopo.sql
sqlplus cms_transfermgmt_testbed/phedexedehp@devdb <Schema/OracleCoreFiles.sql
sqlplus cms_transfermgmt_testbed/phedexedehp@devdb <Schema/OracleCoreAgents.sql
sqlplus cms_transfermgmt_testbed/phedexedehp@devdb <Schema/OracleCorePerf.sql
sqlplus cms_transfermgmt_testbed/phedexedehp@devdb <Schema/OracleCoreTransfer.sql
sqlplus cms_transfermgmt_testbed/phedexedehp@devdb <Schema/OracleCoreTriggers.sql
sqlplus cms_transfermgmt_testbed/phedexedehp@devdb <Schema/OracleDSB.sql
sqlplus cms_transfermgmt_testbed/phedexedehp@devdb <Schema/OracleFlow.sql
sqlplus cms_transfermgmt_testbed/phedexedehp@devdb <Schema/OracleInfo.sql
sqlplus cms_transfermgmt_testbed/phedexedehp@devdb <Schema/OracleReq.sql

* Load initial data:
insert into t_node values ('PIC_MSS');
insert into t_node values ('CERN_MSS');
insert into t_node values ('CERN_Transfer');
insert into t_node values ('TEST_Transfer');
insert into t_node values ('TEST_MSS');
insert into t_node values ('GLOBAL');

insert into t_node_import values ('CERN_Transfer', 'gsiftp', 1);
insert into t_node_export values ('CERN_Transfer', 'gsiftp');
insert into t_node_export values ('CERN_Transfer', 'srmcp');

insert into t_node_import values ('TEST_Transfer', 'gsiftp', 1);

insert into t_routing values (1105359939, 'CERN_MSS', 'CERN_Transfer', 'CERN_Transfer', 1);
insert into t_routing values (1105359939, 'CERN_Transfer', 'CERN_MSS', 'CERN_MSS', 1);
insert into t_routing values (1105359939, 'TEST_MSS', 'TEST_Transfer', 'TEST_Transfer', 1);
insert into t_routing values (1105359939, 'TEST_Transfer', 'TEST_MSS', 'TEST_MSS', 1);
insert into t_routing values (1105359939, 'CERN_Transfer', 'TEST_Transfer', 'TEST_Transfer', 2);

* Start agents
Custom/CERN/Master start

* Inject initial data samples
Utilities/DSBBlocks -db cms -dbuser cms_transfermgmt -dbpass smalland_round \
  *{PU761,Hit245}*/*Mll2000* | sqlplus cms_transfermgmt_testbed/phedexedehp@devdb
Utilities/DSBDrop -db cms -dbuser cms_transfermgmt -dbpass smalland_round \
  $PHEDEX_STATE/entry/inbox *{PU761,Hit245}*/*Mll2000*

* Subscribe test node for the data
insert into t_subscription
  (select x.value, 'mu03b_DY2mu_Mll2000', 'TEST_MSS' from
   ( select distinct value from t_file_attributes where attribute = 'POOL_owner') x);

**********************************************************************
** DEVDB

* Save old schema and data
(cd Schema; ./OracleSave.sh cms_transfermgmt/smalland_round@devdb)

* Load new schema
(cd Schema; sqlplus cms_transfermgmt/smalland_round@devdb < OracleInit.sql)

* Migrate data
insert into t_node
  (select node_name from xt_nodes);
insert into t_routing
  (select timestamp, from_node, to_node, gateway, hops
   from xt_routing where to_node = gateway);

insert into t_file
  (select rs.time_stamp, f.guid, f.source_node,
          m1.value || '/' || m2.value, m3.value,
	  'LFN-TO-FIX', 'TYPE-TO-FIX',
	  f.filesize, nvl(m4.value, -1)
   from xt_files_for_transfer f
   left join xt_replica_state rs
     on rs.guid = f.guid and rs.node = f.source_node
   left join xt_replica_metadata m1
     on m1.guid = f.guid and m1.attribute = 'POOL_owner'
   left join xt_replica_metadata m2
     on m2.guid = f.guid and m2.attribute = 'POOL_dataset'
   left join xt_replica_metadata m3
     on m3.guid = f.guid and m3.attribute = 'POOL_jobid'
   left join xt_replica_metadata m4
     on m4.guid = f.guid and m4.attribute = 'checksum');
insert into t_file_attributes
  (select guid, attribute, value
   from xt_replica_metadata
   where attribute like 'POOL_%');

alter trigger new_transfer_state disable;
alter trigger update_transfer_state disable;
insert into t_destination
  (select time_stamp, guid, destination_node
   from xt_destinations);
insert into t_replica_state
  (select insert_time_stamp, guid, node, state, time_stamp
   from xt_replica_state);
insert into t_transfer_state
  (select insert_time_stamp, guid,
  	  to_node, to_state, to_time_stamp,
  	  from_node, from_state, from_time_stamp,
          null
   from xt_transfer_state);
insert into t_transfer_history
  (select insert_time_stamp, guid, to_node, null, 0, from_node, null, 0
   from xt_transfer_state);
insert into t_transfer_history
  (select to_time_stamp, guid, to_node, 0, 1, from_node, 0, 0
   from xt_transfer_state where to_state = 1);
insert into t_transfer_history
  (select from_time_stamp, guid, to_node, 1, 1, from_node, 0, 1
   from xt_transfer_state where from_state = 1);
insert into t_transfer_history
  (select to_time_stamp, guid, to_node, 1, 2, from_node, 1, 1
   from xt_transfer_state where to_state = 2);
insert into t_transfer_history
  (select to_time_stamp, guid, to_node, 2, 3, from_node, 1, 1
   from xt_transfer_state where to_state = 3);
insert into t_transfer_history
  (select to_time_stamp, guid, to_node, 2, to_state, from_node, 1, 1
   from xt_transfer_state where to_state >= 100);
alter trigger new_transfer_state enable;
alter trigger update_transfer_state enable;

insert into t_subscription
  (select m.owner, m.dataset, s.destination
   from xt_subscriptions s
   left join (select distinct xm1.value dataset, xm2.value owner
	      from xt_replica_metadata xm1
	      left join xt_replica_metadata xm2
	        on xm2.guid = xm1.guid and xm2.attribute = 'POOL_owner'
	      where xm1.attribute = 'POOL_dataset') m
     on m.dataset = s.stream);

* Remove old data
drop table xt_request_operation;
drop table xt_request_subscription;
drop table xt_request_file_status;
drop table xt_request_file;
drop table xt_request_drop;
drop table xt_request_data;
drop table xt_request;

drop table xt_dsb_dataset_availability;
drop table xt_dsb_dataset_run_file;
drop table xt_dsb_dataset_run;
drop table xt_dsb_dataset;
drop table xt_dsb_file_attributes;
drop table xt_dsb_file;
drop table xt_dsb_fileid;

drop table xt_lookup;
drop table xt_config_messages;
drop table xt_agents;

drop table xt_subscriptions;
drop table xt_destinations;

drop table xt_info_drop_status;
drop table xt_info_file_size_histogram;
drop table xt_info_file_size_overview;
drop table xt_info_replication_details;
drop table xt_info_replication_overview;
drop table xt_info_subscriptions;
drop table xt_info_transfer_rate;
drop table xt_info_transfer_status;

drop table xt_replica_state;
drop table xt_transfer_state;
drop table xt_transfer_history;

drop table xt_replica_metadata;
drop table xt_files_for_transfer;
drop table xt_routing;
drop table xt_nodes;

* Initialise import/export data
for node in NICPB_Transfer INFN_Bari NCP_Transfer CERN_Transfer \
            CIEMAT_Transfer TEST_Transfer PIC_Transfer INFN_Transfer \
            IN2P3_Transfer ASCC_Transfer NCU_Transfer FZK_Transfer; do
  Utilities/NodeManager add-import-protocol -name $node -protocol gsiftp \
    -db devdb -dbuser cms_transfermgmt -dbpass smalland_round
done

for node in RAL_Transfer T1_RAL_Buffer FNAL_Transfer; do
  Utilities/NodeManager add-import-protocol -name $node -protocol srm,gsiftp \
    -db devdb -dbuser cms_transfermgmt -dbpass smalland_round
done

for node in CERN_Transfer; do
  Utilities/NodeManager add-export-protocol -name $node -protocol gsiftp,srm \
    -db devdb -dbuser cms_transfermgmt -dbpass smalland_round
done

* Repopulate DSB, requests
Utilities/DSBFill -db cms -dbuser cms_transfermgmt -dbpass smalland_round
Toolkit/Request/TRSyncWeb $PHEDEX_STATE devdb 2004-* 2005-* V2*

* Initialise LFNs from DSB tables, rest from CERN catalogues
(echo "set lines 1000;"; echo "set pages 0;";
 echo "select filename, filetype, guid from t_dsb_fileid left join t_dsb_file on id = fileid;") |
 sqlplus -S cms_transfermgmt/smalland_round@cms |
 egrep ' [-0-9A-Fa-f]{30,}$' |
 while read lfn type guid; do
   echo "update t_file set lfn='$lfn', filetype='$type' where guid='$guid';"
   echo "commit;"
 done |
 sqlplus -S cms_transfermgmt/smalland_round@devdb

perl -we '
  BEGIN { use lib "Toolkit/Common"; use strict; } use UtilsReaders;
  foreach my $f (@ARGV) {
     foreach my $x (@{&readXMLCatalogue ($f)}) {
       print "update t_file set lfn='\''$x->{LFN}[0]'\'',",
            " filetype='\''$x->{PFN}[0]{TYPE}'\''",
            " where guid='\''$x->{GUID}'\'';\ncommit;\n"
      }
 }' /data/lat/puball/PTDR/bt_Hit752_g133/bt03_ttjj_ttH/*.xml.new |
sqlplus -S cms_transfermgmt/smalland_round@devdb
-- FIXME: sw_Hit245_2_g133/PLAY_Usman_LCG2 needs to be done by Jose

(echo "set lines 1000"; echo "set pages 0"; echo "select distinct inblock from t_file;") |
  sqlplus -S cms_transfermgmt/smalland_round@devdb | grep / |
  xargs Utilities/DSBBlocks -db cms -dbuser cms_transfermgmt -dbpass smalland_round |
  sqlplus -S cms_transfermgmt/smalland_round@devdb

(echo "set lines 1000"; echo "set pages 0";
 echo "select distinct inblock from t_file" \
      " left join t_block on name = inblock" \
      " where name is null;") |
 sqlplus -S cms_transfermgmt/smalland_round@devdb | grep / |
 while read block; do
   ow=$(echo $block | sed 's|/.*||'); ds=$(echo $block | sed 's|.*/||');
   echo "insert into t_block values ('$block', '$ow', '$ds', -1, -1);";
 done | sqlplus -S cms_transfermgmt/smalland_round@devdb

* Restore privileges, recreate synonyms
Schema/OraclePrivs.sh cms_transfermgmt/smalland_round@devdb \
   cms_transfermgmt_reader cms_transfermgmt_writer
Schema/OracleSyns.sh cms_transfermgmt \
   cms_transfermgmt/smalland_round@devdb \
   cms_transfermgmt_reader/slightlyjaundiced@devdb
Schema/OracleSyns.sh cms_transfermgmt \
   cms_transfermgmt/smalland_round@devdb \
   cms_transfermgmt_writer/threebagsfull@devdb
# FIXME: synonyms for sequences?

* Refresh routes
mkdir foo
(echo "set lines 1000"; echo "set pages 0"; echo "select name from t_node;") |
  sqlplus -S cms_transfermgmt/smalland_round@devdb | grep _ |
  xargs -n1 Toolkit/Infrastructure/NodeRouter -once \
    -db devdb -dbuser cms_transfermgmt -dbpass smalland_round \
    -state foo -nodes
rm -fr foo

**********************************************************************
** CMS

* Save old schema and data
(cd Schema; ./OracleSave.sh $PHEDEX_TMDB_USER/$PHEDEX_TMDB_PASS@$PHEDEX_TMDB)

* Load new schema
(cd Schema; sqlplus $PHEDEX_TMDB_USER/$PHEDEX_TMDB_PASS@$PHEDEX_TMDB < OracleInit.sql)

* Migrate data
insert into t_node
  (select node_name from xt_nodes);
insert into t_routing
  (select timestamp, from_node, to_node, gateway, hops
   from xt_routing where to_node = gateway);

insert into t_file
  (select nvl(rs.time_stamp,0), f.guid, f.source_node,
          m1.value || '/' || m2.value, m3.value,
	  'LFN-TO-FIX', 'TYPE-TO-FIX',
	  f.filesize, nvl(m4.value, -1)
   from xt_files_for_transfer f
   left join xt_replica_state rs
     on rs.guid = f.guid and rs.node = f.source_node
   left join xt_replica_metadata m1
     on m1.guid = f.guid and m1.attribute = 'POOL_owner'
   left join xt_replica_metadata m2
     on m2.guid = f.guid and m2.attribute = 'POOL_dataset'
   left join xt_replica_metadata m3
     on m3.guid = f.guid and m3.attribute = 'POOL_jobid'
   left join xt_replica_metadata m4
     on m4.guid = f.guid and m4.attribute = 'checksum');
insert into t_file_attributes
  (select guid, attribute, value
   from xt_replica_metadata
   where attribute like 'POOL_%');

alter trigger new_transfer_state disable;
alter trigger update_transfer_state disable;
insert into t_destination
  (select time_stamp, guid, destination_node
   from xt_destinations);
insert into t_replica_state
  (select insert_time_stamp, guid, node, state, time_stamp
   from xt_replica_state);
insert into t_transfer_state
  (select insert_time_stamp, guid,
  	  to_node, to_state, to_time_stamp,
  	  from_node, from_state, from_time_stamp,
          null
   from xt_transfer_state);
insert into t_transfer_history
  (select insert_time_stamp, guid, to_node, null, 0, from_node, null, 0
   from xt_transfer_state);
insert into t_transfer_history
  (select to_time_stamp, guid, to_node, 0, 1, from_node, 0, 0
   from xt_transfer_state where to_state = 1);
insert into t_transfer_history
  (select from_time_stamp, guid, to_node, 1, 1, from_node, 0, 1
   from xt_transfer_state where from_state = 1);
insert into t_transfer_history
  (select to_time_stamp, guid, to_node, 1, 2, from_node, 1, 1
   from xt_transfer_state where to_state = 2);
insert into t_transfer_history
  (select to_time_stamp, guid, to_node, 2, 3, from_node, 1, 1
   from xt_transfer_state where to_state = 3);
insert into t_transfer_history
  (select to_time_stamp, guid, to_node, 2, to_state, from_node, 1, 1
   from xt_transfer_state where to_state >= 100);
alter trigger new_transfer_state enable;
alter trigger update_transfer_state enable;

insert into t_subscription
  (select nvl(m.owner, 'OBSOLETE'), s.stream, s.destination
   from xt_subscriptions s
   left join (select distinct xm1.value dataset, xm2.value owner
	      from xt_replica_metadata xm1
	      left join xt_replica_metadata xm2
	        on xm2.guid = xm1.guid and xm2.attribute = 'POOL_owner'
	      where xm1.attribute = 'POOL_dataset') m
     on m.dataset = s.stream);

* Initialise import/export data
for node in CERN_Transfer \
            CIEMAT_Transfer TEST_Transfer PIC_Transfer INFN_Transfer \
            IN2P3_Transfer ASCC_Transfer NCU_Transfer FZK_Transfer; do
  Utilities/NodeManager add-import-protocol -name $node -protocol gsiftp \
    -db $PHEDEX_TMDB -dbuser $PHEDEX_TMDB_USER -dbpass $PHEDEX_TMDB_PASS
done

for node in RAL_Transfer T1_RAL_Buffer FNAL_Transfer; do
  Utilities/NodeManager add-import-protocol -name $node -protocol srm,gsiftp \
    -db $PHEDEX_TMDB -dbuser $PHEDEX_TMDB_USER -dbpass $PHEDEX_TMDB_PASS
done

for node in CERN_Transfer; do
  Utilities/NodeManager add-export-protocol -name $node -protocol gsiftp,srm \
    -db $PHEDEX_TMDB -dbuser $PHEDEX_TMDB_USER -dbpass $PHEDEX_TMDB_PASS
done

* Copy catalogue
./Utilities/FCcopy -u RLSOracle:rls1:rlscmspub:pubrlscms \
  -d "mysql:database=cms_fcat;host=cmslcgse02:cms_fcat_writer:fcat" \
  -m 'sfn://castorgrid.cern.ch/%/PCP04/%' -r Custom/CERN/PFNCopyMap

* Initialise LFNs and file type from CERN catalogue
mysql -hcmslcgse02 -ucms_fcat_writer -pfcat cms_fcat -Ne "select guid, lfname from t_lfn;" |
  while read guid lfn; do
    echo "update t_file set lfn='$lfn' where guid='$guid';"
  done |
  sqlplus -S $PHEDEX_TMDB_USER/$PHEDEX_TMDB_PASS@$PHEDEX_TMDB

mysql -hcmslcgse02 -ucms_fcat_writer -pfcat cms_fcat -Ne "select guid, filetype from t_pfn;" |
  while read guid type; do
    echo "update t_file set filetype='$type' where guid='$guid';"
  done |
  sqlplus -S $PHEDEX_TMDB_USER/$PHEDEX_TMDB_PASS@$PHEDEX_TMDB

* Update blocks and subscriptions
(echo "set lines 1000"; echo "set pages 0"; echo "select distinct inblock from t_file;") |
  sqlplus -S $PHEDEX_TMDB_USER/$PHEDEX_TMDB_PASS@$PHEDEX_TMDB | grep / |
  xargs Utilities/DSBBlocks -db $PHEDEX_TMDB -dbuser $PHEDEX_TMDB_USER -dbpass $PHEDEX_TMDB_PASS |
  sqlplus -S $PHEDEX_TMDB_USER/$PHEDEX_TMDB_PASS@$PHEDEX_TMDB

(echo "set lines 1000"; echo "set pages 0";
 echo "select distinct inblock from t_file" \
      " left join t_block on name = inblock" \
      " where name is null;") |
 sqlplus -S $PHEDEX_TMDB_USER/$PHEDEX_TMDB_PASS@$PHEDEX_TMDB | grep / |
 while read block; do
   ow=$(echo $block | sed 's|/.*||'); ds=$(echo $block | sed 's|.*/||');
   echo "insert into t_block values ('$block', '$ow', '$ds', -1, -1);";
 done | sqlplus -S $PHEDEX_TMDB_USER/$PHEDEX_TMDB_PASS@$PHEDEX_TMDB

* Restore privileges, recreate synonyms
Schema/OraclePrivs.sh $PHEDEX_TMDB_USER/$PHEDEX_TMDB_PASS@$PHEDEX_TMDB \
   cms_transfermgmt_reader cms_transfermgmt_writer
Schema/OracleSyns.sh $PHEDEX_TMDB_USER \
   $PHEDEX_TMDB_USER/$PHEDEX_TMDB_PASS@$PHEDEX_TMDB \
   cms_transfermgmt_reader/slightlyjaundiced@$PHEDEX_TMDB
Schema/OracleSyns.sh $PHEDEX_TMDB_USER \
   $PHEDEX_TMDB_USER/$PHEDEX_TMDB_PASS@$PHEDEX_TMDB \
   cms_transfermgmt_writer/threebagsfull@$PHEDEX_TMDB
# FIXME: synonyms for sequences?

* Refresh routes
mkdir foo
(echo "set lines 1000"; echo "set pages 0"; echo "select name from t_node;") |
  sqlplus -S $PHEDEX_TMDB_USER/$PHEDEX_TMDB_PASS@$PHEDEX_TMDB | grep _ |
  xargs -n1 Toolkit/Infrastructure/NodeRouter -once \
    -db $PHEDEX_TMDB -dbuser $PHEDEX_TMDB_USER -dbpass $PHEDEX_TMDB_PASS \
    -state foo -nodes
rm -fr foo

* Repopulate DSB, requests
Utilities/DSBFill -db $PHEDEX_TMDB -dbuser $PHEDEX_TMDB_USER -dbpass $PHEDEX_TMDB_PASS
Toolkit/Request/TRSyncWeb $PHEDEX_STATE $PHEDEX_TMDB 2004-* 2005-* V2*

* Remove old data
drop table xt_request_operation;
drop table xt_request_subscription;
drop table xt_request_file_status;
drop table xt_request_file;
drop table xt_request_drop;
drop table xt_request_data;
drop table xt_request;

drop table xt_dsb_dataset_availability;
drop table xt_dsb_dataset_run_file;
drop table xt_dsb_dataset_run;
drop table xt_dsb_dataset;
drop table xt_dsb_file_attributes;
drop table xt_dsb_file;
drop table xt_dsb_fileid;

drop table xt_lookup;
drop table xt_config_messages;
drop table xt_agents;

drop table xt_subscriptions;
drop table xt_destinations;

drop table xt_info_drop_status;
drop table xt_info_file_size_histogram;
drop table xt_info_file_size_overview;
drop table xt_info_replication_details;
drop table xt_info_replication_overview;
drop table xt_info_subscriptions;
drop table xt_info_transfer_rate;
drop table xt_info_transfer_status;

drop table xt_replica_state;
drop table xt_transfer_state;
drop table xt_transfer_history;

drop table xt_replica_metadata;
drop table xt_files_for_transfer;
drop table xt_routing;
drop table xt_nodes;

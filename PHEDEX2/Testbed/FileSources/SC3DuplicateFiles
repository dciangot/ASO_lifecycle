#!/usr/bin/env perl

##H Duplicate GUIDs in TMDB artificially.
##H
##H Usage:
##H   SC3DuplicateFiles -db FILE[:SECTION] [-count N]
##H
##H -db        database connection configuration parameter file
##H -count     count of additional guids forms to generate (default: 1)

BEGIN {
  $^W = 1; use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}
use UtilsHelp;
use UtilsTiming;
use UtilsDB;
use POSIX;

# Process command line arguments.
my %args = (COUNT => 1);
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-count' && scalar @ARGV > 1)
    { shift (@ARGV); $args{COUNT} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

# Check arguments.
if (@ARGV || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

# Execute
my $tmdb = &connectToDatabase (\%args, 0);
my @positions = (8, 13, 18, 23);
my @letters = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z ! = + _ . , ^ #);
my @guids = map { @$_ } @{&dbexec($tmdb, "select guid from t_file")->fetchall_arrayref()};
my $count = 0;
my ($nfiles) = &dbexec ($tmdb, qq{
    select count(guid) from t_file where guid like '%-%-%-%-%'})->fetchrow();

LOOP: foreach my $pos (@positions)
{
    foreach my $letter (@letters)
    {
        print "$pos/$letter: ";
	do { local $| = 1; print "C"; };
	my $safepat = ("_" x $pos) . ($letter eq '_' ? "\\$letter" : $letter) . "%";
	my $suffix = ".P${pos}${letter}";
	my ($nexists) = &dbexec ($tmdb,
	    "select count(guid) from t_file where guid like :pat escape '\\'",
	    ":pat" => $safepat)->fetchrow();
    	do { print "\n"; next } if $nexists && $nexists == $nfiles;
	do { print "\n"; last LOOP } if ++$count > $args{COUNT};

	do { local $| = 1; print "L"; };
        &dbexec ($tmdb, qq{select * from t_block for update});

	do { local $| = 1; print "F"; };
        &dbexec ($tmdb, qq{
	    insert into t_file
	    (timestamp, guid, node, inblock, insubblock, lfn, filetype, filesize, checksum)
	    (select
	       timestamp,
	       substr(guid,1,:pos) || :letter || substr(guid,:pos+2),
	       node, inblock, insubblock || :suffix, lfn || :suffix, filetype,
	       filesize, checksum
	     from t_file
	     where guid like '%-%-%-%-%'
	       and guid not in (select replace(guid,:letter,'-')
	                        from t_file where guid like :pat))},
	    ":pos" => $pos, ":letter" => $letter, ":pat" => $safepat,
	    ":suffix" => $suffix);

	do { local $| = 1; print "A"; };
        &dbexec ($tmdb, qq{
	    insert into t_file_attributes (guid, attribute, value)
	    (select
	       substr(guid,1,:pos) || :letter || substr(guid,:pos+2),
	       attribute, value
	     from t_file_attributes
	     where guid like '%-%-%-%-%'
	       and guid not in (select replace(guid,:letter,'-')
                                from t_file_attributes where guid like :pat))},
	    ":pos" => $pos, ":letter" => $letter, ":pat" => $safepat);

        &dbexec ($tmdb, qq{
	    update t_file_attributes set value = value || :suffix
	    where guid like :pat and attribute = 'POOL_owner'
	      and value not like '%' || :suffix},
	    ":suffix" => $suffix, ":pat" => $safepat);

	do { local $| = 1; print "R"; };
	foreach my $node (qw(T1_CERN_MSS T1_CERN_Buffer))
	{
            &dbexec ($tmdb, qq{
	        insert into t_replica_state (timestamp, guid, node, state, state_timestamp)
	        (select :now, guid, :node, 0, :now from t_file
	         where guid not in (select guid from t_replica_state where node = :node))},
	        ":now" => &mytimeofday(), ":node" => $node);
	}

        do { local $| = 1; print "B"; };
        &dbexec ($tmdb, qq{
	    update t_block set (files, bytes) =
	    (select count(guid), sum(filesize) from t_file where inblock = name)});

        do { local $| = 1; print "!"; };
	$tmdb->commit();
        print "\n";
    }
}

$tmdb->disconnect();
exit 0;

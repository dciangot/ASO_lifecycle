#!/usr/bin/env perl

## This is a fake transfer agent that pretends to transfer files, but
## does so only as a delay based on a statistical model.  Once the file
## has been "transferred", genuine RLS-type operations are made.

BEGIN { use strict; $^W = 1; }
my ($dropdir, @nextdir, $inbox, $workdir, $outdir, $stopflag, $pidfile);
my @startTime;
my $waittime = 7;		# Seconds to sleep between meta set queries
my $modelfile = undef;		# Delay model data file
my $model = undef;		# Delay model data
my $rewrite = undef;		# Expression to rewrite PFNs
my $parallel = 10;		# Number of concurrent transfers
my $catalog = undef;		# Catalog to add replicas to
my %pending = ();		# Transfers currently being made
my %bad = ();			# Drops we've warned are bad
my %junk = ();			# Drops we've warned are junk in inbox

my $me = $0; $me =~ s|.*/||;
my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";

use POSIX; # strftime
use File::Path;
eval qx(cat "$home/UtilsCommand.pm"); die $@ if $@;
eval qx(cat "$home/UtilsTiming.pm"); die $@ if $@;
eval qx(cat "$home/UtilsLogging.pm"); die $@ if $@;
eval qx(cat "$home/UtilsAgent.pm"); die $@ if $@;
eval qx(cat "$home/UtilsDelay.pm"); die $@ if $@;

######################################################################
# Routines specific to this agent.

# Actually process the drop.
sub processDrop
{
    my ($drop) = @_;

    # Sanity checking.  Count real processing time for this file.
    return if (! &inspectDrop ($drop));
    delete $bad{$drop};
    &timeStart();
    $startTime[0] = (stat("$workdir/$drop/go"))[9];

    # Determine the file we're supposed to read
    my $stamp = "$workdir/$drop/transfer-stamp";
    my $lfn = &input ("$workdir/$drop/lfn");
    my $pfn = &input ("$workdir/$drop/pfn");
    my $guid = &input ("$workdir/$drop/guid");
    do { &alert ("null lfn, pfn or guid in $drop"); &markBad ($drop); return; }
        if (! $lfn || ! $pfn);

    # Check if a transfer is pending for this file.  Start if not.
    # If we run out transfer slots, give up.
    if (! -f $stamp)
    {
	return if scalar keys %pending >= $parallel;
	my $expires = time() + &sampleDelayModel ($model);
	do { &alert ("cannot create transfer stamp $stamp"); return; }
	    if (! &touch ("-t", strftime('%Y%m%d%H%M.%S', localtime($expires)), $stamp));
    }

    $pending{$lfn} = (stat($stamp))[9];

    # Check for expired transfer.
    return if $pending{$lfn} >= time ();

    # Done, register the new PFN
    $pfn = do { $_ = $pfn; eval $rewrite; $_; };
    my $ret = &runcmd ("FCaddReplica", "-r", $pfn, "-g", $guid, "-u", $catalog);
    if ($ret)
    {
	# Assume it's a transient failure -- FIXME: retry only N times?
	&alert ("FCaddReplica failed: " . &runerror ($ret));
	return;
    }
    delete $pending{$lfn};

    # We've completed this one.  Pass on or delete.
    &touch ("$workdir/$drop/done");
    &relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime()]} success");
}

while (scalar @ARGV)
{
    if ($ARGV[0] eq '-in' && scalar @ARGV > 1)
    { shift (@ARGV); $dropdir = shift(@ARGV); }
    elsif ($ARGV[0] eq '-out' && scalar @ARGV > 1)
    { shift (@ARGV); push (@nextdir, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $waittime = shift(@ARGV); }
    elsif ($ARGV[0] eq '-catalog' && scalar @ARGV > 1)
    { shift (@ARGV); $catalog = shift(@ARGV); }
    elsif ($ARGV[0] eq '-rewrite' && scalar @ARGV > 1)
    { shift (@ARGV); $rewrite = shift(@ARGV); }
    elsif ($ARGV[0] eq '-parallel' && scalar @ARGV > 1)
    { shift (@ARGV); $parallel = shift(@ARGV); }
    elsif ($ARGV[0] eq '-model' && scalar @ARGV > 1)
    { shift (@ARGV); $modelfile = shift(@ARGV); }
    else
    { last; }
}
	
if (scalar @ARGV || !$dropdir || !$rewrite || !$catalog)
{
    print STDERR
	"usage: $me -in IN-DROP-BOX [-out NEXT-DROP-BOX]\n",
	"    -catalog CATALOG -rewrite PFN-REWRITE-EXPRESSION\n",
	"    [-model MODEL] [-wait SECS-TO-WAIT]\n";
    exit (1);
}

$model = &readDelayModel ($modelfile) if $modelfile;
&process();

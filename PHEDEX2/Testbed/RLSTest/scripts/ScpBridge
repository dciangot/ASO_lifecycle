#!/usr/bin/env perl

## This T0 agent that bridges drop boxes between two hosts using RFIO.

BEGIN { use strict; $^W = 1; }
my ($dropdir, @nextdir, $inbox, $workdir, $outdir, $stopflag, $pidfile);
my @startTime;
my $waittime = 7;		# Seconds to sleep between meta set queries
my %bad = ();			# Drops we've warned are bad
my %junk = ();			# Drops we've warned are junk in inbox

my $bridge = undef;		# Host and drop box to copy to

my $me = $0; $me =~ s|.*/||;
my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";

use File::Path;
eval qx(cat "$home/UtilsCommand.pm"); die $@ if $@;
eval qx(cat "$home/UtilsTiming.pm"); die $@ if $@;
eval qx(cat "$home/UtilsLogging.pm"); die $@ if $@;
eval qx(cat "$home/UtilsRFIO.pm"); die $@ if $@;
eval qx(cat "$home/UtilsAgent.pm"); die $@ if $@;

######################################################################
# Routines specific to this agent.

# Utility to undo from failed bridge operation
sub bridgeFailed
{
    my ($stats, $msg, $remote) = @_;
    # &runcmd ("ssh", $host, "rm -fr $remote");
    &alert ($msg);
    &logmsg ("$stats @{[&formatElapsedTime()]} failed");
    return 0;
}

sub bridgeDrop
{
    my ($drop) = @_;

    my $stats = "stats: $drop";
    my $targetdir = "$bridge/inbox/$drop";
    return &bridgeFailed ($stats, "failed to chmod $drop", $targetdir)
	if ! chmod(0775, "$workdir/$drop");

    return &bridgeFailed ($stats, "failed to copy $drop", $targetdir)
	if &runcmd ("scp", "-r", "$workdir/$drop", "$targetdir");

    &touch ("$workdir/$drop/done");
    return 1;
}

# Actually process the drop.
sub processDrop
{
    my ($drop) = @_;

    # Sanity checking
    return if (! &inspectDrop ($drop));
    delete $bad{$drop};
    &timeStart();

    # Pass on and kill it.
    return if ! &bridgeDrop ($drop);
    &relayDrop ($drop);

    &logmsg("stats: $drop @{[&formatElapsedTime()]} success");
}

while (scalar @ARGV)
{
    if ($ARGV[0] eq '-in' && scalar @ARGV > 1)
    { shift (@ARGV); $dropdir = shift(@ARGV); }
    elsif ($ARGV[0] eq '-bridge' && scalar @ARGV > 1)
    { shift (@ARGV); $bridge = shift(@ARGV); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $waittime = shift(@ARGV); }
    else
    { last; }
}
	
if (scalar @ARGV || !$dropdir || !$bridge || scalar @nextdir)
{
    print STDERR
	"usage: $me -in IN-DROP-BOX -bridge NEXT-DROP-BOX\n",
	"    [-wait SECS-TO-WAIT]\n";
    exit (1);
}

&process();

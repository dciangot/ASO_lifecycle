#!/usr/bin/env perl

## This T0 agent receives files from the T0 batch reconstruction farm
## into the Global Distribution Buffer (GDB) Castor pool and registers
## them to the RLS catalog.
##
## A T0 batch reconstruction farm produces data files, a XML catalog
## file, a summary file and a checksum file.  At the end of the job,
## the event data files are copied into the GDB Castor pool with RFIO.
## The catalog, summary and checksum are copied to the inbox of this
## agent.
##
## The agent merges the XML catalog into the RLS catalog and moves
## the files forward to the T0 TMDB publishing agent,
## which initiates the assignment and copy of the files to the T1s.
##
## This order is currently required because the transfer agents from
## the GDB to the export buffers expect the files to be registered
## in the RLS.  This may change in future.  This agent may become a
## part of the config agent.
##
## This agent periodically inspects the drop box, looking for new
## incoming directories from completed batch jobs.  For each such
## new assignment, it goes through the registration process.  At
## each step we update the state so that if the script terminates,
## crashes or is otherwise stopped, it will pick up in the right
## place.  At the end, we pass the assignment to the next agent.

BEGIN { use strict; $^W = 1; }
my ($dropdir, @nextdir, $inbox, $workdir, $outdir, $stopflag, $pidfile);
my @startTime;
my $waittime = 7;		# Seconds to sleep between meta set queries
my $rls_catalog = undef;	# Catalog to register into
my %bad = ();			# Drops we've warned are bad
my %junk = ();			# Drops we've warned are junk in inbox

my $me = $0; $me =~ s|.*/||;
my $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";

use File::Path;
eval qx(cat "$home/UtilsCommand.pm"); die $@ if $@;
eval qx(cat "$home/UtilsTiming.pm"); die $@ if $@;
eval qx(cat "$home/UtilsLogging.pm"); die $@ if $@;
eval qx(cat "$home/UtilsAgent.pm"); die $@ if $@;

######################################################################
# Routines specific to this agent.

# Import the XML catalog fragment to the RLS catalog.
sub updateRLS
{
    my ($drop, $xmlcat) = @_;
    my $ret = &runcmd ("FCpublish", "-d", $rls_catalog, "-u", "file:$xmlcat");

    if ($ret)
    {
	&alert("FCpublish failed for $drop: " . &runerror ($ret));
	&markBad ($drop);
	return 1;
    }

    unlink("$xmlcat.BAK");
    &touch("$workdir/$drop/done");
    return 0;
}

# Actually process the drop.
sub processDrop
{
    my ($drop) = @_;

    # Sanity checking
    return if (! &inspectDrop ($drop));
    delete $bad{$drop};
    &timeStart();

    # Find the catalog file.
    my $xmlcat = (<$workdir/$drop/XMLCatFragment.*.{txt,xml}>)[0];
    if (! defined $xmlcat)
    {
	&alert("no xml catalog file found in $drop");
	&markBad ($drop);
	return;
    }

    # Merge XML contents into RLS.
    return if &updateRLS ($drop, $xmlcat);
    &relayDrop ($drop);
    &logmsg("stats: $drop @{[&formatElapsedTime()]} success");
}

while (scalar @ARGV)
{
    if ($ARGV[0] eq '-catalog' && scalar @ARGV > 1)
    { shift (@ARGV); $rls_catalog = shift(@ARGV); }
    elsif ($ARGV[0] eq '-in' && scalar @ARGV > 1)
    { shift (@ARGV); $dropdir = shift(@ARGV); }
    elsif ($ARGV[0] eq '-out' && scalar @ARGV > 1)
    { shift (@ARGV); push (@nextdir, shift(@ARGV)); }
    elsif ($ARGV[0] eq '-wait' && scalar @ARGV > 1)
    { shift (@ARGV); $waittime = shift(@ARGV); }
    else
    { last; }
}
	
if (scalar @ARGV || !$dropdir || !$rls_catalog)
{
    print STDERR
	"usage: $me -catalog CATALOG\n",
	"    -in IN-DROP-BOX [-out NEXT-DROP-BOX]\n",
	"    [-wait SECS-TO-WAIT]\n";
    exit (1);
}

&process();

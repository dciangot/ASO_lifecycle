#!/usr/bin/env perl

BEGIN { use strict; use warnings; $^W=1; }

my $me = $0; $me =~ s|.*/||;
my %args = (DBITYPE => "Oracle");
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBNAME} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbi' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBITYPE} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbuser' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBUSER} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-dbpass' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBPASS} = shift(@ARGV); }
    else
    { last; }
}

if (scalar @ARGV || !$args{DBNAME} || !$args{DBUSER} || !$args{DBPASS} || !$args{DBITYPE})
{
    print STDERR "usage: $me -db NAME -dbuser USER -dbpass PASSWORD [-dbitype TYPE]\n";
    exit (1);
}

my $test = new Test (%args);
$SIG{INT} = sub { exit(1) }; # Recapture interrupt signal, oracle swallows it.
$test->run ();

######################################################################
# Routines specific to the agent.
package Test; use strict; use warnings; use base 'Exporter';
use DBI;


sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = {};
    my %params = (DBITYPE => undef,		# Database driver binding
    		  DBNAME => undef,		# Database name
	  	  DBUSER => undef,		# Database user name
	  	  DBPASS => undef);		# Database user password
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

sub guids
{
    my ($self, $dbh, $n) = @_;
    my @guids = ();
    my $stmt = &dbexec($dbh, qq{select guid from t_file});
    while (my ($guid) = $stmt->fetchrow())
    {
	push (@guids, $guid);
	last if scalar @guids >= $n;
    }

    return @guids;
}

sub checksum
{
    my ($self, $dbh, $guid) = @_;
    return &dbexec($dbh, qq{
	select checksum from t_file where guid = :guid},
	":guid" => $guid)->fetchrow_array();
}

sub run
{
    my ($self) = @_;
    system ("ps u -p $$ | tail +2");
    for (my $i = 0; $i < 100; ++$i)
    {
        my $dbh = &connectToDatabase ($self);
	my @guids = $self->guids($dbh, 1_000);
	my @sums = ();
	foreach my $guid (@guids)
	{
	    my $sum = $self->checksum($dbh, $guid);
	    push (@sums, $sum) if defined $sum;
	}
	print "$i: fetched @{[scalar @sums]} sums for @{[scalar @guids]} guids\n";
	system ("ps u -p $$ | tail +2");

        $dbh->disconnect();
        undef $dbh;
    }
}

######################################################################
# Create a connection to the transfer database.  Updates the agent's
# last contact, inserting the agent entries if necessary.  Takes one
# argument, the reference to the agent, which must have the standard
# database-related data members DBITYPE, DBNAME, DBUSER, DBPASS, and
# the TMDB node MYNODE.  The automatic identification is suppressed
# if a second optional argument is given and it's value is zero.
sub connectToDatabase
{
    my ($self) = @_;

    # Connect to the database.
    return DBI->connect ("DBI:$self->{DBITYPE}:$self->{DBNAME}",
	    		 $self->{DBUSER}, $self->{DBPASS},
			 { RaiseError => 1, AutoCommit => 0 });
}

# Simple utility to prepare a SQL statement
sub dbprep
{
    my ($dbh, $sql) = @_;
    return $dbh->prepare ($sql);
}

# Simple utility to prepare, bind and execute a SQL statement.
sub dbexec
{
    my ($dbh, $sql, %params) = @_;
    my $stmt = &dbprep ($dbh, $sql);
    my $rv = &dbbindexec ($stmt, %params);
    return wantarray ? ($stmt, $rv) : $stmt;
}

# Simple bind and execute a SQL statement.
sub dbbindexec
{
    my ($stmt, %params) = @_;

    while (my ($param, $val) = each %params) {
	$stmt->bind_param ($param, $val);
    }

    if ($ENV{DEBUG_LOG_SQL})
    {
        my $sql = $stmt->{Statement};
	$sql =~ s/\s+/ /g; $sql =~ s/^\s+//; $sql =~ s/\s+$//;
	my $bound = join (", ", map { "($_, $params{$_})" } sort keys %params);
        print STDERR "executing statement `$sql' [$bound]";
    }

    return $stmt->execute();
}

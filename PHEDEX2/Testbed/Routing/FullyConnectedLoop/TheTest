#!/usr/bin/env perl

BEGIN {
    use strict; use warnings;
    our $me = $0; $me =~ s|.*/||;
    our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../../Toolkit/Common";
    unshift(@INC, $home);
}

######################################################################

use UtilsHelp;

my %args = ();
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-workdir' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WORKDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-duration' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DURATION} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-period' && scalar @ARGV > 1)
    { shift (@ARGV); $args{PERIOD} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-testdir' && scalar @ARGV > 1)
    { shift (@ARGV); $args{TESTDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else
    { last; }
}

if (@ARGV || !$args{DBCONFIG} || !$args{WORKDIR} || !$args{TESTDIR})
{
    die "TheTest- Sorry, you're missing parameters, use -h for help.\n";
}

(new MyTest (%args))->process();

package MyTest; use strict; use warnings; use base 'UtilsTest';
use UtilsDB;
use UtilsLogging;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,
                  WORKDIR => undef,
                  DURATION => 60,
                  PERIOD => 1,
                  TESTDIR => undef);
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

######################################################################   
sub test {
    my ($self, $dbh) = @_;

    # First check to see if the total number of routes is as expected
    my $count = 0;
    my $sql = "select count(*) from t_routing where gateway like 'Test-FCL-%'"; 
    my $query = $dbh->prepare($sql);
    $query->execute();
    while (my @row = $query->fetchrow())
    {
        if ($row[0] != 132) {
            &logmsg( "Found $row[0] routes instead of 132" );
        }
    }
    $query->finish();
    
    # Now check whether the table has changed since the last iteration
    # In this test it should remain the same, I think
    
    # Restore the routing table information form the last iteration
    my %lastTable = ();
    system( "touch $self->{WORKDIR}/temp/last-routes.txt" );
    open ( LAST, "$self->{WORKDIR}/temp/last-routes.txt" );
    while (<LAST>) {
        chop;
        my ($from,$to,$gate,$hops) = split (/ /);
        my $route = "$from $to";
        $lastTable{"$route"} = "$gate $hops";
    }
    close( LAST );
    
    # Get the new routing table
    my %actualTable = ();
    $sql = "select from_node,to_node,gateway,hops
            from t_routing
            where to_node like 'Test-FCL-%' order by 'from_node' asc";
    $query = $dbh->prepare($sql);
    $query->execute();
    my @longRoutes = ();
    my $longRoutesFail = 0;
    while (my @row = $query->fetchrow())
    {
        $actualTable{"$row[0] $row[1]"} = "$row[2] $row[3]";
        if ( $row[3] > 3 ) {
            push ( @longRoutes, "@row" );
            $longRoutesFail = 1;
        }
    }
    $query->finish();
    if ( $longRoutesFail == 1 ) {
        foreach my $row ( @longRoutes ) {
            my ($from,$to,$gate,$hops) = split( / /,$row );
            &traceRoute( \%actualTable, $from, $to );
        }
    }
    
    # Compare the routing tables
    my $tableCompFailed = 0;
    foreach my $route ( keys %actualTable ) {
        if ( ! exists $lastTable{$route} || $actualTable{$route} ne $lastTable{$route}) {
            $tableCompFailed = 1;
        }
	$count++;
    }
    if ($tableCompFailed == 1) {
	&logmsg( "$count routes have changed" );
    }

    # Store the routing table for the next iteration
    system( "rm $self->{WORKDIR}/temp/last-routes.txt; touch $self->{WORKDIR}/temp/last-routes.txt" );
    open ( NEWLAST, ">$self->{WORKDIR}/temp/last-routes.txt" );
    $count = 0;
    foreach my $route ( keys %actualTable ) {
	print NEWLAST "$route $actualTable{$route}\n";
    }
    close( NEWLAST );

}

# Idea of this subroutine is to determine the hops in a route between
# A and B givena  complete routing table. Table is passed as a ref to a
# hash: hash is {"from to"} = "gateway hops"
sub traceRoute {
    my ($table,$from,$to) = @_;
    my $current;
    my @route = ();

    $current = $from;

    while ( $current ne $to ) {
	no strict 'refs';
	if ( ! defined $$table{"$current $to"} ) {
	    push( @route, "No route from $current to $to!" );
	    last;
	}
	my ($next,$hops) = split( / /, $$table{"$current $to"} );
	use strict 'refs';
	push ( @route, "$current:$hops" );
	$current = $next;
    }

    push( @route, "$to:0" );
    &logmsg( "[ Whole route $from:$to ] @route" );
}

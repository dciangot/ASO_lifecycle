#!/usr/bin/env perl

##H This is a skeleton test that can be copied into place and modified
##H to meet specific test needs, like periodically checking the content
##H of the TMDB. The test checks logs automatically for certain things-
##H see checkLogs in PHEDEX/Toolkit/Common/UtilsTest.pm for details.
##H
##H To customize this test, just modify the test subroutine below. The
##H RunTest master script will provide this script with the following
##H options-
##H
##H -db         your DB parameter file
##H -workdir    somewhere to put logs and temp cache data
##H -duration   the duration of the test
##H -period     the period over which to cycle calls to the test sub

BEGIN {
    use strict; use warnings;
    our $me = $0; $me =~ s|.*/||;
    our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../../Toolkit/Common";
    unshift(@INC, $home);
}

######################################################################
# This section should be common to every test

use UtilsHelp;

my %args = ();
while (scalar @ARGV)
{
    if ($ARGV[0] eq '-db' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DBCONFIG} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-workdir' && scalar @ARGV > 1)
    { shift (@ARGV); $args{WORKDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-duration' && scalar @ARGV > 1)
    { shift (@ARGV); $args{DURATION} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-period' && scalar @ARGV > 1)
    { shift (@ARGV); $args{PERIOD} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-testdir' && scalar @ARGV > 1)
    { shift (@ARGV); $args{TESTDIR} = shift(@ARGV); }
    elsif ($ARGV[0] eq '-h')
    { &usage(); }
    else 
    { last; }
}

if (@ARGV || !$args{DBCONFIG} || !$args{WORKDIR} || !$args{TESTDIR})
{
    die "TheTest- Sorry, you're missing parameters, use -h for help (saw @ARGV).\n";
}

(new MyTest (%args))->process();

package MyTest; use strict; use warnings; use base 'UtilsTest';
use UtilsDB;
use UtilsLogging;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my %params = (DBCONFIG => undef,            
		  WORKDIR => undef,
		  DURATION => 60,
		  PERIOD => 1,
		  TESTDIR => undef);
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

######################################################################   
# Routines specific to this test

sub test {
    my ($self, $dbh) = @_;

    # First we check the database against expected contents 
    my @idealTable = ();
    open ( IDEAL, "$self->{TESTDIR}/idealtable.txt" );
    while (<IDEAL>) {
        chop;
        push( @idealTable, $_ );
    }
    close( IDEAL );

    my @actualTable = ();

    my $sql = "select from_node,to_node,gateway,hops   
            from t_routing          
            where to_node like 'Tim-%'";
    my $query = $dbh->prepare($sql);
    $query->execute();
    while (my @row = $query->fetchrow())
    {
        push( @actualTable, "@row" );
	&logmsg( "@row" )
    }
    $query->finish();

    my $count = 0;
    my $tableCompFailed = 0;
    foreach my $row ( @actualTable ) {
        if ( $row ne $idealTable[$count] ) {
            print "Actual: $row\tIdeal: $idealTable[$count]\n";
            $tableCompFailed = 1;
        }
        $count++;
    }

    if ( $tableCompFailed == 1 ) {
        &logmsg( "Table comparison failed" );
    }
}

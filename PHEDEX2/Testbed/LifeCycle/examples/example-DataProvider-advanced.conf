# This example makes a representation of a dataset using the lifecycle dataprovider package
# by Valentin.
%Lifecycle::Lite = (
  Name		=> 'PhEDEx Lifecycle Agent', # don't worry about this
  NCycles       => -1,

  Templates => {
    DataProvider => {
      Events => [ 'makeDataset', 'makeBlocks', 'makeFiles', 'addData', 'dumpData' ],
      Intervals => {
         addData  => 3,
         dumpData => 6,
      },
    },
  },

  Defaults => {
    Namespace	=> 'PHEDEX::Testbed::Lifecycle',
    Module => {
      makeDataset => 'DataProvider',
      makeBlocks  => 'DataProvider',
      makeFiles   => 'DataProvider',
      addData     => 'DataProvider',
      dumpData    => 'DataProvider',
    },
    DataProvider => {
      addData  => {
        prependEvents => [ 'addData', ],
      },
    },
  },

# No Workflows are defined here, they are calculated by the block of code below
);

# calculate workflows programmatically. Enclose in {} to limit leaking variables into global scope
{
  for ( my $i = 1; $i< 10; $i++ ) {
    my $workflow = {
      Name => 'DataProvider',
      Dataset => "/data/test-$i/RAW",
      Datasets => 1,
      Blocks   => 1,
      Files    => 1,
      InjectionsPerBlock => $i,
      BlocksPerDataset   => $i,
    };
    push @{$Lifecycle::Lite{Workflows}}, $workflow;
  }
}

1;

#!/usr/bin/env perl

##H Parallel reliable file download agent.
##H
##H This agent monitors TMDB for files assigned to the agent, and
##H manages their download.  A separate backend (FTS, SRM, ...)
##H handles the actual transfer steps.  A configurable number of
##H files is always kept in transfer, using subprocesses to manage
##H transfers and other tasks as appropriate.  The agent maintains
##H a local pool of transfer work and uploads file transfer report
##H to the database every once in a while.
##H
##H The agent creates batches of transfer "jobs" out of its queue
##H of files to transfer.  As files complete transfer, the agent
##H verifies transfer completeness, and then uploads the full
##H transfer report back to the database where the central file
##H mover manages the rest.
##H
##H Interaction with the site infrastructure is through scripts
##H named in command line arguments.  The required tools are
##H described in detail in the manual.  The general syntax is
##H CMD[,ARG...], where CMD is the actual command to execute,
##H followed by comma-separated list of arguments to pass to it.
##H
##H Usage:
##H   FileDownload
##H      -state DIRECTORY -nodes PATTERN[,PATTERN...]
##H      -db FILE[:SECTION] [-log OUT] [-verbose]
##H      [-ignore NODE[,NODE...]] [-accept NODE[,NODE...]]
##H      [-validate CMD[,ARG...]] [-delete CMD[,ARG...]]
##H      [-no-pre-validate] [-no-pre-delete]
##H      [-util-jobs N] [-util-timeout N]
##H      [-max-tasks N]
##H      -backend TYPE
##H      [-protocols NAME[,NAME...]]
##H      [-batch-files N] [-jobs NJOBS]
##H      [-link-pending-files N] [-max-active-files N]
##H      [-default-link-active-files N]
##H      [-link-active-files SRCNODE1=N [-link-active-files SRCNODE2=N] ... ]
##H      [BACKEND_SPECIFIC_OPTIONS]
##H
##H Agent Options:
##H 
##H -state       agent state directory
##H -nodes       patterns for the node names for which this agent runs
##H -db          database connection configuration parameter file
##H -log         where to redirect logging information
##H -verbose     include more information about internal algorithms
##H -ignore      comma-separated list of nodes to ignore transfers from
##H -accept      comma-separated list of nodes to accept transfers from
##H -validate    command to verify file transfer success (pre/post transfer)
##H -delete      command to delete file on failure (pre/post transfer)
##H -no-pre-validate   turn off pre-transfer validation check
##H -no-pre-delete     turn off pre-transfer deletion
##H -util-jobs         number of utility (-validate, -delete) jobs to execute
##H                    in parallel (default 10)
##H -util-timeout      timeout for utility (-validate, -delete) jobs in
##H                    seconds (default 600)
##H -max-tasks   maximum number of transfer tasks to fetch from DB (default 15000)
##H
##H -backend     the transfer backend to use: Globus, SRM, FTS, DCCP; all
##H               options that follow are passed to the backend as such
##H
##H General backend options:
##H
##H -protocols           comma-separated list of storage protocols to accept
##H -batch-files         number of files per transfer batch (SRM, FTS; default: 30)
##H -jobs                maximum number of concurrent transfer jobs (default: SRM=5; FTS=0 (infinite))
##H -link-pending-files  limit to the number of files allowed to be in the "pending" state per link
##H -max-active-files    limit to the total number of files allowed to be in the "active" state
##H -link-active-files   limit the total number of "active" files per link. Can
##H                      be repeated for several links, takes the form 'SRCNODE=N'
##H                      to specify the number 'N' for a given link.
##H -default-link-active-files   number of per-link active files allowed for all links
##H
##H Note: There several ways to limit the number of concurrent transfers,
##H       the order of precedence is (-jobs + -batch-files, -max-active-files,
##H       -link-active-files, -link-pending-files, -default-link-active-files)
##H
##H Options to Null backend:
##H      [-fail-rate F] 
##H      [ [-fail-link SRCNODE1=F [-fail-link SRCNODE2=F]] |
##H        [-fail-config FILE ] ]           
##H
##H Options to the Command backend:
##H      -command CMD[,ARG...] [-timeout SECS]
##H
##H Options to SRM backend:
##H      [-command CMD[,ARG...]] [-timeout SECS] [-syntax SYNTAX]
##H
##H -command     override the transfer command, for instance
##H              globus-url-copy,-p,3,-tcp-bs,2097152
##H -timeout     execution time limit for commands (default: 3600)
##H -syntax      command style for srmcp, either 'dcache' or 'bestman'.
##H              Default is 'dcache'
##H
##H Options to FTS backend:
##H      [-service CONTACT | -mapfile FILE]
##H      [-job-awol SECS]
##H      [-checksum]
##H      [-j_interval N]
##H      [-priority PHEDEX_PRIO=FTS_PRIO]
##H      [-glite-options OPTIONS]
##H  
##H -service     FTS server to use
##H -mapfile     A map of SRM endpoint:FTS endpoint, if not specified BDII service 
##H              discovery used instead
##H -checksum    enable checksum verification in FTS against checksum in TMDB
##H -j_interval  interval for polling the FTS queue for job status. Not normally
##H              needed
##H -priority    priority mapping from PhEDEx to FTS states. Not for normal use
##H -glite-options  additional options to pass to glite-* commands
##H -job-awol    timeout for asynchronous job monitoring (default: 3600)

######################################################################
my %args = (CMDLINE => [ @ARGV ]);
use Getopt::Long;
use PHEDEX::File::Download::Agent;
use PHEDEX::Core::Help;

&GetOptions ("state=s"     => \$args{DROPDIR},
	     "log=s"       => \$args{LOGFILE},
             "db=s"        => \$args{DBCONFIG},
	     "verbose"     => \$args{VERBOSE},
	     "nodaemon"    => \$args{NODAEMON},
             "nodes=s"     => sub { push(@{$args{NODES}},
					 split(/,/, $_[1])) },

             "ignore=s"    => sub { push(@{$args{IGNORE_NODES}},
					 split(/,/, $_[1])) },
             "accept=s"    => sub { push(@{$args{ACCEPT_NODES}},
					 split(/,/, $_[1])) },

             "validate=s"  => sub { push(@{$args{VALIDATE_COMMAND}},
					 split(/,/, $_[1])) },
             "delete=s"    => sub { push(@{$args{DELETE_COMMAND}},
					 split(/,/, $_[1])) },
	     "pre-validate!" => \$args{PREVALIDATE},
	     "pre-delete!"   => \$args{PREDELETE},
	     "util-jobs=i"   => \$args{NJOBS},
	     "util-timeout=i" => \$args{TIMEOUT},
	     "max-tasks=i" => \$args{MAX_TASKS},

             "backend=s"   => sub { $args{BACKEND_TYPE} = $_[1]; die "!FINISH"; },

	     "help|h"      => sub { &usage() },

            );

die "Insufficient parameters, use -h for help.\n"
    if (!$args{DROPDIR} || !$args{NODES} || !$args{DBCONFIG}
	|| !$args{BACKEND_TYPE});

my $agent = PHEDEX::File::Download::Agent->new(%args, BACKEND_ARGS => [ @ARGV ]);
POE::Kernel->run();
print "POE kernel has ended, now I shoot myself\n";
exit 0;

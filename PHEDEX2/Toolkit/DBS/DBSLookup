#!/usr/bin/env python
#
# List datasets or blocks from DBS1 or DBS2

import sys
from fnmatch import filter
import re
from string import lstrip, join

def dbs1Lookup(url, instance, item, verbose):
  from DBSAPIOLD.dbsCgiApi import DbsCgiApi
  from DBSAPIOLD.dbsException import DbsException

  api = DbsCgiApi(url, {'instance' : instance})
  
  p = re.compile('^/([^/]+)/([^/]+)(/[^/]+|\#[^\#]+)$')
  parts = p.findall(item)
  if verbose:
    print "parts ", parts
  if not parts: raise Exception("Bad dataset or block format")
  haswilds = item.count('*')
  parts = parts[0]
  if parts[2].startswith('#'):
    lookingfor = 'BLOCK'
  else:
    lookingfor = 'DATASET'

  if lookingfor == 'DATASET':
    datasets = api.listProcessedDatasets(item)
    for dataset in datasets:
      print dataset['datasetPathName']
  else:
    pattern = '/'+parts[0]+'/*/*'
    blocks = []
    datasets = api.listProcessedDatasets(pattern)
    for dataset in datasets:
      ds_blocks = api.listBlocks(dataset['datasetPathName'])
      blocks.extend( filter(ds_blocks, item) )

    blocks = set(blocks)
    for block in blocks:
      print block


def dbs2Lookup(url, item, verbose):
  from DBSAPI.dbsApi import DbsApi

  myargs = { 'url': url }

  api = DbsApi(myargs)

  if item.endswith('.root'):
    lookingfor = 'FILE'
  else:
    p = re.compile('^/([^/]+)/([^/]+)/([^/#]+)\#*([^\#]+)*$')
    parts = p.findall(item)
    if not parts: raise Exception("Bad dataset or block format")
    haswilds = item.count('*')
    parts = list(parts[0])
    prim, proc, tier, blockguid = parts
    if verbose:
      print "parts:  ", parts
    path = "/%s/%s/%s" % (prim, proc, tier)
    
    if blockguid:
      lookingfor = 'BLOCK'
    else:
      lookingfor = 'DATASET'

  if lookingfor == 'DATASET':
     for dataset in api.listProcessedDatasets(patternPrim=prim,
                                              patternProc=proc,
                                              patternDT=tier):

      for path in dataset['PathList']:
        print path
  elif lookingfor == 'BLOCK':
    for block in api.listBlocks(block_name=item):
      print block['Name']
  elif lookingfor == 'FILE':
    for file in api.listFiles(patternLFN=item):
      print file['LogicalFileName']
  else:
    raise Exception("Bad item format")
      

from optparse import OptionParser

try:
  usage =  "usage: %prog [options]\n"
  usage += "\nTakes a DBS URL and a data item string and tries to look up the data in that DBS, printing the results"
  usage += "\nThe data_item should be of the form /PRIMARY/TIER/DATASET or /PRIMARY/TIER#BLOCK"
  usage += "\nThe data_item can have glob-style wildcards"
  usage += "\n%prog look in either a DBS-1 or DBS-2 depending on the URL"
  usage += "\nYou will probably want to put the arguments in quotes to prevent the shell from interpreting them"
  parser = OptionParser(usage=usage)
  parser.add_option('-u', '--url', dest='url', help='DBS URL')
  parser.add_option('-i', '--instance', dest='instance', help='DBS-1 Instance')
  parser.add_option('-d', '--data_item', dest='item', help='Data item (dataset or block)')
  parser.add_option('-v', '--verbose', action="store_true",
                    default=False,
                    dest='verbose', help='Verbose output')
  (opts, args) = parser.parse_args()
  if not opts.url or not opts.item:
    raise Exception("Options --url and --data_item are required")

  if re.compile('Servlet').search(opts.url):
    dbs2Lookup(opts.url, opts.item, opts.verbose)
  else:
    if not opts.instance:
      raise Exception("Option --instance is required in the case of DBS-1 URLs")
    dbs1Lookup(opts.url, opts.instance, opts.item, opts.verbose)
    
  sys.exit(0)
except Exception, ex:
  print "Caught Exception object: %s "  % ex

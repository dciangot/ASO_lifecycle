#!/usr/bin/env perl

##H Reverse-engineer the source datasets for LoadTest07
##H Prints an injection XML to your current directory
##H Example:
##H    LoadTestSourceConverter -db DBPARAM T0_CERN_Export

# Process command line arguments.
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Timing;
&GetOptions ("db=s"        => \$args{DBCONFIG},
	     "help|h"      => sub { &usage() });

# Check arguments.
if (scalar @ARGV < 1 || !$args{DBCONFIG})
{
  die "Insufficient parameters, use -h for help.\n";
}

my $self = { DBCONFIG => $args{DBCONFIG} };
my $dbh = &connectToDatabase ($self);

my $now = &mytimeofday();
my $node = shift(@ARGV);
my ($nodeid) = &dbexec($dbh, qq{
  select id from t_adm_node where name = :node},
  ":node" => $node)->fetchrow();
die "Node $node not known\n" if ! defined $nodeid;

my $q = &dbexec($dbh, q{
  select distinct node,
       '/store/PhEDEx_Debug/LoadTest07Source/' ||
       regexp_replace(logical_name,
                      '.*/LoadTest07_(.*)_.*_.*$',
	              '\1') logical_name,
       filesize, checksum
  from t_dps_file
 where logical_name like '%LoadTest07%'
   and node = :node
}, ':node' => $nodeid);

print "Getting info for $node\n";

my @files;
my $sitename;
while (my $file = $q->fetchrow_hashref()) {
    ($sitename) = ($$file{LOGICAL_NAME} =~ m:/([^/]+)_..$:);
    push @files, $file;
}

die "ERROR:  No files found at $node\n" unless @files;

my $dbs = "LoadTest";
my $dls = "lfc:unknown";
my $dataset = '/PhEDEx_Debug/LoadTest07Source/'.$sitename;
my $block = $dataset . '#block';

my $xmlfile = "LoadTest07Source_${sitename}.xml";
open XML, '>', $xmlfile or die $!;
print XML qq{<dbs name="$dbs"  dls="$dls">\n};
print XML qq{\t<dataset name="$dataset" is-open="n" is-transient="n">\n};
print XML qq{\t\t<block name="$block" is-open="n">\n};
print XML qq{\t\t\t<file lfn="$$_{LOGICAL_NAME}" size="$$_{FILESIZE}" checksum="$$_{CHECKSUM}"/>\n} foreach @files;
print XML qq{\t\t</block>\n};
print XML qq{\t</dataset>\n};
print XML qq{</dbs>\n};
close XML;

print "Wrote injection file to $xmlfile\n";

$dbh->commit();
&disconnectFromDatabase($self, $dbh, 1);

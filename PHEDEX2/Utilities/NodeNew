#!/usr/bin/env perl

##H Create a new node
##H
##H Usage:
##H   NodeNew -db DBCONFIG -name NODE -kind KIND
##H           -technology TECHNOLOGY -se-name SE_NAME
##H           [-capacity SIZE] [-bandwidth-cap RATE]
##H
##H Examples:
##H   NodeNew -db Schema/DBParam:Foo \
##H     -name T2_Foo_Buffer -kind Disk \
##H     -technology dCache -se-name srm.foo.edu \
##H     -capacity 10T
##H   NodeNew -db Schema/DBParam:Foo \
##H     -name T1_Foo_Buffer -kind Buffer \
##H     -technology Castor -se-name srm.foo.es
##H   NodeNew -db Schema/DBParam:Foo \
##H     -name T1_Foo_MSS -kind MSS \
##H     -technology Castor -se-name srm.foo.es
##H
##H NODE is the name of the new node.
##H KIND is the kind of the new node: Disk, Buffer or MSS.
##H TECHNOLOGY is the storage technology: dCache, Castor, DPM, Disk or Other.
##H SE_NAME is the storage element host name registered in BDII.
##H SIZE is optional storage capacity, e.g. 1T for one terabyte (suffixes: kMGTPE).
##H RATE is optional throttle rate to the site, in megabytes per second.

# Process command line arguments.
my %args;
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Formats;
use PHEDEX::Core::Timing;
&GetOptions ("db=s"            => \$args{DBCONFIG},
	     "name=s"          => \$args{NAME},
	     "kind=s"          => \$args{KIND},
	     "technology=s"    => \$args{TECHNOLOGY},
	     "se-name=s"       => \$args{SE_NAME},
	     "capacity=s"      => sub { $args{CAPACITY} = &sizeValue($_[1]) },
	     "bandwidth-cap=s" => \$args{BANDWIDTH_CAP},
	     "help|h"          => sub { &usage() });

# Check arguments.
if (!$args{DBCONFIG} || !$args{NAME} || !$args{KIND}
    || !$args{TECHNOLOGY} || !$args{SE_NAME})
{
  die "Insufficient parameters, use -h for help.\n";
}

my $self = { DBCONFIG => $args{DBCONFIG} };
my $dbh = &connectToDatabase ($self);
print "Creating node $args{NAME}, kind $args{KIND}\n";

my $sql = 'begin proc_add_node(' .
	   join(',',map { "'$args{$_}'" } qw{ NAME KIND TECHNOLOGY SE_NAME }) .
	  '); end;';
PHEDEX::Core::DB::dbexec($dbh,$sql);
&disconnectFromDatabase($self, $dbh, 1);

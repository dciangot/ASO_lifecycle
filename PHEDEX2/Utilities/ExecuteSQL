#!/usr/bin/env perl

##H ExecuteSQL: basically does the same thing that piping through sqlplus would do,
##H but just uses the PhEDEx libraries to manage the database interaction
##H
##H Usage:
##H
##H -db       database connection configuration parameter file
##H -script   the script to execute (will append .sql)- full path

$SIG{INT} = sub { print "Caught sig INT\n"; exit 2 };

######################################################################
my %args;
use Getopt::Long;
use PHEDEX::Core::Help;
&GetOptions ("db=s"        => \$args{DBCONFIG},
             "script=s"    => \$args{SCRIPT},
	     "help|h"      => sub { &usage() });


if (@ARGV || !$args{DBCONFIG} || !$args{SCRIPT})
{
    die "ExecuteSQL- Sorry, you're missing parameters, use -h for help.\n";
}

(new Tool (%args))->process();

######################################################################
package Tool; use strict; use warnings; use base 'Exporter';
# Define any more 'use's here.
use PHEDEX::Core::DB;
use base 'PHEDEX::Core::Logging';

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = {};
    my %params = (DBCONFIG => undef,
		  SCRIPT => undef);
    my %args = (@_);
    map { $self->{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

sub process 
{
    my $self = shift;

    my $dbh = undef; $dbh = &connectToDatabase ($self);
    $self->runSQL( $dbh );
    &disconnectFromDatabase ($self, $dbh);
}


sub runSQL {
    my ( $self, $dbh ) = @_;

    $self->Logmsg( "Running SQL from $self->{SCRIPT}.sql" );
    eval {
        open ( SQL, "$self->{SCRIPT}.sql" );
        while (<SQL>) {
            &dbexec( $dbh, $_ );
        }
        $dbh->commit();
        close( SQL );
    };
    do { chomp ($@); $self->Alert ("Problem running SQL from $self->{SCRIPT}.sql stage: $@");
         eval { $dbh->rollback() } if $dbh; } if $@;
}

1;

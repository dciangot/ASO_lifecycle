#!/usr/bin/env perl

##H Run a command with a timeout.
##H
##H Usage:
##H   RunWithTimeout TIMEOUT COMMAND [ARGS...]
##H
##H Executes the COMMAND, but limiting its run time to TIMEOUT seconds.
##H Uses the job-manager to execute the command so signals are delievered
##H to the process gracefully.  Returns the exit code of COMMAND.

use PHEDEX::Core::Help;
use PHEDEX::Core::JobManager;
use POE;
&usage if scalar @ARGV < 2;

my $timeout = shift(@ARGV);
my $job = new PHEDEX::Core::JobManager (NJOBS => 1, VERBOSE => 0, DEBUG => 0);

sub min { return (sort { $a <=> $b } @_)[0] }

# Add job handler.  The handler itself exits with the same exit code
# the subprocess did, either killing this process via signal or via
# exit code.
$job->addJob (sub { my $job = shift;
		    my $rc = $job->{STATUS_CODE} >> 8;
	            my $sig = $job->{STATUS_CODE} & 127;
		    if ($sig) { kill ($sig, $$); exit ($rc); }
		    else { exit ($rc) } },
		    { TIMEOUT => $timeout, TIMEOUT_GRACE => &min(3, $timeout/10) },
		    @ARGV);

# Wait for the job to exit.  Note that there's no need to exit here,
# the job handler callback takes care of it.
POE::Kernel->run();

#!/usr/bin/env perl

##H Update a checked out area to the new repository location in CMSSW.
##H
##H Usage: CMSSWMigrate DIR...
##H
##H DIR is the directory to migrate.
##H
##H Example: CMSSWMigrate /data/*Nodes/PHEDEX

BEGIN { use strict; use warnings; $^W=1; }
use File::Find;
use File::Path;

my %args = ();
while (scalar @ARGV)
{
  if ($ARGV[0] eq '-h') {
    open (ME, "< $0")
      && print(STDERR map { s/^\#\#H ?//; $_ } grep (/^\#\#H/, <ME>))
      && close(ME);
    exit(1);
  } elsif ($ARGV[0] eq '--') {
    shift (@ARGV); last;
  } elsif ($ARGV[0] =~ '^-') {
    &usage ("$0: unrecognised option $ARGV[0]\n\n");
  } else {
    last;
  }
}

&find ({ wanted => \&purge, bydepth => 1, no_chdir => 1 }, @ARGV);
&find ({ wanted => \&migrate, bydepth => 1, no_chdir => 1 }, @ARGV);
exit (0);

sub purge {
  my $path = $File::Find::name;
  my $indir = $File::Find::dir;
  my $file = $_;

  return if ! -d $path;
  if ($file =~ m:/(\.admin|doc|interface|test)$:
      || ($file =~ m:/src$: && $file !~ m:/(WebSite|PIC)/:)) {
    print "Deleting $path\n";
    &rmtree ($path);
  }
}

sub migrate {
  my $path = $File::Find::name;
  my $indir = $File::Find::dir;
  my $file = $_;

  return if ! -d $path;
  if ($file =~ m:/CVS$:) {
    chomp (my $root = &input ("$path/Root"));
    chomp (my $repo = &input ("$path/Repository"));
    my $entries = &input ("$path/Entries");
    return if ! defined $root || ! defined $repo || ! defined $entries;
    return if $root !~ m:/PHEDEX$:;
    return if $repo !~ m:^PHEDEX($|/):;

    $root =~ s:/PHEDEX$:/CMSSW:;
    $entries =~ s:^D/(\.admin|doc|interface|test)/.*\n::gm;
    $entries =~ s:^D/src/.*\n::gm if $repo !~ m:(/WebSite/.*|/PIC)$:;
    if ($repo =~ m:/Custom/(?!Castor|DCache|Template)([^/]+)(.*):) {
      my $site = ($1 eq 'ASCC' ? 'ASGC' : $1);
      $repo = "COMP/SITECONF/$site/PhEDEx$2";
    } elsif ($repo =~ m:/Custom$:) {
      $repo = "COMP/$repo";
    } elsif ($repo =~ m:/Testbed/JobRobot$:) {
      $repo = "COMP/JOBROBOT";
    } else {
      $repo = "COMP/$repo";
    }
    $entries =~ s:^D\n::gm;
    $entries = "${entries}D\n" if $entries !~ m:^D:m;

    print "Migrating $path -> $repo ($root)\n";
    &output("$path/Root", "$root\n");
    &output("$path/Repository", "$repo\n");
    &output("$path/Entries", "$entries");
  }
}

# Write a file safely
sub output
{
    my ($file, $content) = @_;
    open (FILE, "> $file.$$") or die "$file: cannot open: $!\n";
    print FILE $content or die "$file: cannot write: $!\n";
    close (FILE) or die "$file: cannot flush: $!\n";
    &mv ("$file.$$", $file) or die "$file: cannot rename from $file.$$: $!\n";
}

# Read a file safely
sub input
{
    my ($file) = @_;
    local $/ = undef;
    open (FILE, "< $file") or die "$file: cannot open: $!\n";
    my $content = <FILE>;
    close (FILE) or die "$file: cannot read: $!\n";
    return $content;
}

# Move a file or directory (assumes single file system)
# NB: Don't use File::Copy as it seems to create new files?
sub mv
{
    return 0 if -e $_[1] && ! unlink ($_[1]);
    return rename ($_[0], $_[1]);
}

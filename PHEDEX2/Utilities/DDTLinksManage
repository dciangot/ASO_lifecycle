#!/usr/bin/env perl

##H Manage links for DDT
##H
##H Usage:
##H   DDTLinksManage -db DBCONFIG FILENAME
##H
##H Examples:
##H   DDTLinksManage -db Schema/DBParam:Foo /foo/bar/list.txt
##H
##H FILENAME is a file which consists of the links and their state after the script is done, e.g: 
##H T1_Foo_Buffer T2_Bar_Buffer enable
##H T2_Bar_Buffer T1_Foo_Buffer disable

# Process command line arguments.
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Timing;
&GetOptions ("db=s"        => \$args{DBCONFIG},
	     "help|h"      => sub { &usage() });

# Check arguments.
if (scalar @ARGV < 1 || !$args{DBCONFIG})
{
  die "Insufficient parameters, use -h for help.\n";
}

# Get list filename and check if exists
my @LinkList = ();
if ( -e $ARGV[0] )
{
   open(IFILE, '<', $ARGV[0]) or die "Could not open ${ARGV[0]}";
   while (<IFILE>)
   {
      chomp $_;
      push ( @LinkList,  $_ ) if (length $_ > 0 and !m/^\s+$/);
   }
} else {
	die "File ${ARGV[0]} does not exist";
};

my $self = { DBCONFIG => $args{DBCONFIG} };
my $dbh = &connectToDatabase ($self);
my $now = &mytimeofday();

my ($fromname, $toname, $action, $fromid, $toid, $linkid, $status, $fromtable, $totable, $isactive);
my $i = 0;
my %report;
# Loop through links to be changed
for (@LinkList) {
	
	++$i;

	# Parse input and get nodes id's
	unless (m/^\s*(\S+)\s+(\S+)\s+(\S+)\s*$/) {
		print "Line $i '$_' does not match expected format, skipping\n";
		goto bad_format;
	};
	($fromname, $toname, $action) = ($1, $2, $3);

	if (!defined($fromname) or !defined($toname) or !defined($action)) {
		print "Line $i '$_' is not properly formatted, skipping\n";
		goto bad_format;
	};
	
	($fromid, $toid, $linkid, $status) = &dbexec($dbh, qq{
  		select from_node, to_node, ld.id, decode(is_active, 'y','enabled', 'disabled') 
		  from t_adm_node n1,
		       t_adm_node n2,
		       t_adm_link ld
 		 where n1.id = ld.from_node
		   and n2.id = ld.to_node
		   and n1.name = :from_node
		   and n2.name = :to_node
		 order by 3 desc, 4 desc},
  		":from_node" => $fromname, 
		":to_node" => $toname)->fetchrow();
	if (! defined $linkid) {
		print "Link from $fromname to $toname is not found, skipping line $i\n";
		goto not_found; 
	} elsif ($status =~ m/$action/ ) {
		print "Link from $fromname to $toname is already $status, skipping line $i\n";
		goto skipped;
	};
	
	# Preparing the action and acting
	if ( $action eq "enable") {
		$isactive = 'y';
		++$report{Enabled};
	} elsif ( $action eq "disable") {
		$isactive = 'n';
		++$report{Disabled};
	} else {
        	print "'$action' is not recognised as an action to take in line $i, skipping\n";
        	goto unknown_action;
        };

	# Changing states of the links	
        &dbexec($dbh, qq{update t_adm_link
                            set is_active = :isactive
                          where id = :id
                },
                ":isactive" => $isactive,
                ":id" => $linkid
        );
	
	next;	
	
	# Report accumulation
	skipped:
		++$report{"Skipped"};
		next; 
	not_found:
		++$report{"Links not found"};
		next;
	unknown_action:
		++$report{"unknown actions"};
		next;
	bad_format:
		++$report{"Badly formatted lines"};
		next;

};

$report{"Total links"} = $i;
print "Report:\n";
map {print "$_:\t\t\t$report{$_}\n"} keys %report;

$dbh->commit();
&disconnectFromDatabase($self, $dbh, 1);

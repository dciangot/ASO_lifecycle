#!/usr/bin/env perl

##H                                                                                                         
##H   Compare Files in DBS and in TMDB
##H
##H   Usage:
##H
##H   DBSCheck.pl -db DBCONFIG -DBSURL DBSURL -dataset DATASET [-size -invalid -verbose]
##H   DBSCheck.pl -db DBCONFIG -auto -dataset DATASET [-size -invalid -verbose]
##H
##H   You can also supply the -block BLOCK as an input. Also the % search is supported. If you choose -size 
##H   option, the script is comparing the file sizes also. The -invalid option gives the possibillity 
##H   to invalidate files in DBS, and asks for confirmation of this action.
##H
##H   When the arg -auto is passed this script looks for the DBS Address and DBS URL in TMDB (table T_DPS_DBS).
##H  
##H   If a dataset or block is passed using wild card (%) this script get in TMDB the complete name.
##H
##H

# Process command line arguments.
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Catalogue;
use PHEDEX::Core::Timing;

my $toolhome = $0; $toolhome =~ s|/[^/]*$||; $toolhome .= "/..";
my $DBS = "$toolhome/Toolkit/DBS";
my %info_Files_DBS = ();
my %info_Files_TMDB = ();
my %info_Blocks_DBS = ();
my %info_Blocks_TMDB = ();
my @good_file_names = ();
my @bad_files_in_DBS = ();
my @bad_files_in_TMDB = ();
my @bad_size = ();
my $files_invalidate_in_DBS = 0;
my @blocks_not_in_TMDB = ();
my @blocks_not_in_DBS = ();
my $dbh = undef;

my %args = ( PROTOCOL => 'direct' );
&GetOptions ("db=s"          => \$args{DBCONFIG},
	     "DBSURL=s"      => sub { push(@{$args{DBSURL}}, split(/,/, $_[1])) },
	     "auto"          => \$args{AUTO},
             "block=s"       => \$args{BLOCK},
             "dataset=s"     => \$args{DATASET},	     
	     "size"          => \$args{SIZE},
	     "invalid"       => \$args{INVALID},
	     "verbose"	     => \$verbose,
             "help|h"        => sub { &usage() });

# Check arguments.

if(!$args{DBCONFIG} || (!$args{BLOCK} && !$args{DATASET}) || ((!$args{DBSURL}) && !$args{AUTO})){
	die "Insufficient parameters, use -h for help.\n";
}

$dbh = &connectToDatabase ({ DBCONFIG => $args{DBCONFIG} });

if ($args{DATASET}){
	print "\nGetting datasets...";	
	my $datasets = [ split m|,\s*|, $args{DATASET} ];
	my @fn_datasets = ();
	foreach $data (@$datasets){
		if ($data =~ '%'){
			my $tmp = getDatasetFromWildCard ($data);
			for $i (@$tmp){
				push (@fn_datasets, $i);
			}
		}
		else {
			push (@fn_datasets, $data);
		}
	}
        $verbose && print "\ndone!";

	foreach $data (@fn_datasets){
		print "\nGetting blocks from: $data";
		if ($args{AUTO}){
			my @tmp=&getURL_DBSAddress($data,"dataset");
			$args{DBSURL}[0]=$tmp[0];
		}
        $verbose && print "\n--DBSURL=$args{DBSURL}[0]";
	
	#get blocks from TMDB
		&getBlocksTMDB ($data, $args{DBSURL}[0]);
	
	#get blocks from DBS
		&getBlocksDBS ($data, $args{DBSURL}[0]);

	}
        $verbose && print "\ndone!";
	print "\n\nComparing blocks...";
	#compare blocks from TMDB and DBS
	&compareBlocks();
        $verbose && print "\ndone!";
	foreach $block (keys %info_Blocks_TMDB){
		print "\nTMDB-> getting files from: $block";
		&checkBlock($block);
	}
        $verbose && print "\ndone!";

        foreach $block (keys %info_Blocks_DBS){
                print "\nDBS-> getting files from: $block";
                &checkBlock($block);
        }
        $verbose && print "\ndone!";

}
elsif ($args{BLOCK}) {

	my $blocks = [ split m|,\s*|, $args{BLOCK} ];
	my @fn_blocks = ();
	foreach my $block (@$blocks){
		if ($block =~ '%'){
			my $tmp = &getBlocksFromWildCard ($block);
			for $i (@$tmp){
				push (@fn_blocks, $i);
			}
		}
                else {
                        push (@fn_blocks, $block);
                }

	}
	
	foreach my $block (@fn_blocks) {
		print "\nGetting files from: $block";
		if ($args{AUTO}){
			my @tmp=&getURL_DBSAddress($block, "block");
			$args{DBSURL}[0]=$tmp[0];
		}
		$verbose && print "\n--DBSURL=$args{DBSURL}[0]";
		&checkBlock($block);
	}
                $verbose && print "\ndone!";
}
#print "\n"; 

#---------------------------------------------------------------------------------------------
#run the tests for a logical file name
if (!$args{INVALID} && $args{SIZE}){
	&compareFile();
	&compareSize();
}
elsif ($args{INVALID} && !$args{SIZE}){
	&compareFile();
	&invalidFile();
}
elsif ($args{INVALID} && $args{SIZE}){
	&compareFile();
	&compareSize();
	&invalidFile();
}
elsif(!$args{INVALID} && !$args{SIZE}){
	&compareFile();
}
else{
	print "Option not recognized!\n";
}

$dbh->disconnect();

#---------------------------------------------------------------------------------------------
#print results
print "\nSummary:\nNumber of files in TMDB: ".keys( %info_Files_TMDB )."\nNumber of files in DBS: ".keys( %info_Files_DBS )."\n";
print "Files not found in TMDB but in DBS: ". @bad_files_in_TMDB;

if ($verbose){
	foreach my $file (@bad_files_in_TMDB){
		print "\n$file";
	}
}
print "\nFiles not found in DBS but in TMDB: ". @bad_files_in_DBS;
if ($verbose){
	foreach my $file (@bad_files_in_DBS){
 		print "\n$file";
	}
}
if ($args{SIZE}){
	print "\nFiles with different size: ". @bad_size;
	if ($verbose){
		foreach my $file (@bad_size){
			print "\n$file";
		}
	}
}
else{
	print "\nFiles with different size: Not checked [-size]";
}

if ($args{INVALID}){
	print "\nNumber of files invalidated in DBS: $files_invalidate_in_DBS\n";
}
else{
	print "\nNumber of files invalidated in DBS: Not claimed [-invalid]\n";
}
if ($args{DATASET}){
	print "\nNumber of blocks in TMDB: ". keys(%info_Blocks_TMDB). "\nNumber of blocks in DBS: ".keys(%info_Blocks_DBS);
	print "\nBlocks not found in TMDB but in DBS: ". @blocks_not_in_TMDB;
	if ($verbose){
		foreach my $bl_in_DBS (@blocks_not_in_TMDB){
			print "\n".$bl_in_DBS;
		}
	}
	print "\nBlocks not found in DBS but in TMDB: ". @blocks_not_in_DBS;
	if ($verbose){
		foreach my $bl_in_TMDB (@blocks_not_in_DBS){
                	print "\n".$bl_in_TMDB;
		}
	}
	print "\n";
}
print "\n";

#---------------------------------------------------------------------------------------------
#get the set of file names and file sizes in a hash from DBS and TMDB
sub checkBlock{
	my ( $block ) = @_;
#get information from DBS in a hash
	$all_info_from_DBS = `$DBS/DBSgetLFNsFromBlock -u $args{DBSURL}[0] -d $block -s`;
        if (!($all_info_from_DBS =~ m/Caught Exception/)) {
		$all_info_from_DBS =~ s/^\s+|\s+$//g ;
		@each_file_from_DBS = split(/\n/, $all_info_from_DBS);
		foreach $each_file (@each_file_from_DBS){
			$each_file =~ s/^\s+|\s+$//g ;
			@each_entry_from_DBS = split(/,/, $each_file);
			@each_file_lfn = split(/=/,$each_entry_from_DBS[0]);
			@each_file_size = split(/=/,$each_entry_from_DBS[1]);
			$info_Files_DBS{$each_file_lfn[1]} = $each_file_size[1];
                	#$info_Files_DBS{$each_entry_from_DBS[1]} = 133;
		}
	}
	
#get information from TMDB in a hash
	my $lfns = getLFNsFromBlock($block);
	my $lfnsizes = getTMDBFileSize($lfns);
	foreach $lfn (@$lfns){
		$info_Files_TMDB{$lfn} = $$lfnsizes{$lfn};
	}
}
#--------------------------------------------------------------------------------------------
#get blocks from TMDB given a dataset
sub getBlocksTMDB
{
	my ( $data, $arg_url ) = @_;
	my $bl = getBlocksFromDataset($data);
	foreach $i (@$bl){
		$info_Blocks_TMDB{$i} = $data;
	}
}

#---------------------------------------------------------------------------------------------
#get blocks from DBS given a dataset
sub getBlocksDBS
{
	my ( $data, $arg_url ) = @_;
	my @tmp = ();
	my $blocks_from_DBS  = `$DBS/DBSLookup -u $args{DBSURL}[0] -d $data#*`;
	$blocks_from_DBS =~ s/^\s+|\s+$//g ;
	@tmp = split(/\n/, $blocks_from_DBS);
	foreach $i (@tmp){
		$i =~ s/^\s+|\s+$//g ;
                $info_Blocks_DBS{$i} = $data;
	}
}
#---------------------------------------------------------------------------------------------
#compare blocks in DBS and TMDB
sub compareBlocks
{
	while ( my ($block_DBS, $dataset_DBS) = each(%info_Blocks_DBS) ) {
		if (!defined $info_Blocks_TMDB{$block_DBS}){
			push(@blocks_not_in_TMDB,$block_DBS);
		}
	}
	while ( my ($block_TMDB, $dataset_TMDB) = each(%info_Blocks_TMDB) ) {
		if (!defined $info_Blocks_DBS{$block_TMDB}){
			push(@blocks_not_in_DBS,$block_TMDB);
		}
	}
}
#---------------------------------------------------------------------------------------------
#compare files in DBS and TMDB
sub compareFile
{
	while ( my ($key_DBS, $value_DBS) = each(%info_Files_DBS) ) {
		if (!defined $info_Files_TMDB{$key_DBS}){
			push(@bad_files_in_TMDB,$key_DBS);
		}
		else{
			push(@good_file_names,$key_DBS);
		}
	}
	while ( my ($key_TMDB, $value_TMDB) = each(%info_Files_TMDB) ) {
		if (!defined $info_Files_DBS{$key_TMDB}){
			push(@bad_files_in_DBS,$key_TMDB);
		}
	}
}

#---------------------------------------------------------------------------------------------
#compare size of files
sub compareSize
{
	foreach my $file (@good_file_names){
		if ($info_Files_TMDB{$file}!=$info_Files_DBS{$file}){
			push(@bad_size,$file);
		}
	}
}

#---------------------------------------------------------------------------------------------
#invalidate files
sub invalidFile{
	my $answer = "";
	if ( @bad_files_in_TMDB > 0 ){
		print "Invalidating files that are not in TMDB but in DBS...\n";
		MISMATCH: foreach $file (@bad_files_in_TMDB){
			while ( $answer ne "yes all" && $answer ne "no all" && $answer ne "yes" && $answer ne "no")
			{
				print "Are you sure you want to INVALIDATE in DBS the file\n";
				print "$file ? [yes | no | yes all | no all]\n";
				$answer = <STDIN>;
				#remove the new-line character:
				chomp($answer);
			}
			if ( $answer eq "yes all" ){
				`$DBS/DBSInvalidateFile --url=$args{DBSURL}[0] --lfn=$file`;
				$files_invalidate_in_DBS++;
			}

			elsif ( $answer eq "no all" ){
				next MISMATCH;
			}

			elsif ( $answer eq "yes" ){
				`$DBS/DBSInvalidateFile --url=$args{DBSURL}[0] --lfn=$file`;
				$files_invalidate_in_DBS++;
				$answer = "";
			}
			elsif ( $answer eq "no" ){
				$answer = "";
			}
			else{
				print "Option not recognized!\n";
			}
		}
	}
	$answer = "";
	if ( @bad_size > 0 ){
		print "\nInvalidating files that have different size in TMDB and DBS...\n";
		BADSIZE: foreach $file (@bad_size){
			while ( $answer ne "yes all" && $answer ne "no all" && $answer ne "yes" && $answer ne "no")
			{
				print "Are you sure you want to INVALIDATE in DBS the file\n";
				print "$file ? [yes | no | yes all | no all]\n";
				$answer = <STDIN>;
				#remove the new-line character:
				chomp($answer);
			}
			if ( $answer eq "yes all" ){
				`$DBS/DBSInvalidateFile --url=$args{DBSURL}[0] --lfn=$file`;
				$files_invalidate_in_DBS++;
			}

			elsif ( $answer eq "no all" ){
				next BADSIZE;
			}

			elsif ( $answer eq "yes" ){
				`$DBS/DBSInvalidateFile --url=$args{DBSURL}[0] --lfn=$file`;
				$files_invalidate_in_DBS++;
				$answer = "";
			}

			elsif ( $answer eq "no" ){
				$answer = "";
			}
			else{
				print "Option not recognized!\n";
			}

		}
	}
}
#---------------------------------------------------------------------------------------------
#return the URL and Address of a datase or block passed as parameter
#it's queried in TMDB
sub getURL_DBSAddress
{
	my ( $name, $kind_of_data ) = @_;
	my $infos = [];
	my @URL_Address = ();

	my $q = undef;
	if ($kind_of_data eq "dataset"){
		$q = &dbexec($dbh, qq {select NAME from T_DPS_DBS where ID in (select DBS from T_DPS_DATASET where NAME = :name)}, ":name" => $name);
	}
	elsif ($kind_of_data eq "block"){
		$q = &dbexec($dbh, qq {select NAME from T_DPS_DBS where ID in (select DBS from T_DPS_DATASET where ID in (select DATASET from T_DPS_BLOCK where NAME = :name))}, ":name" => $name);
	}
	else{
		print "data unknown";
	}

	map {push @$infos, $$_[0]} @{$q->fetchall_arrayref()};

	foreach $each_info (@$infos){
		$each_info =~ s|\?instance||;
		@URL_Address = split(/=/, $each_info);
	}
	return @URL_Address;
}

#---------------------------------------------------------------------------------------------
#return a hash with file name as a key and file size as a value from TMDB
sub getTMDBFileSize
{
	my ( $filenames ) = @_;
	my $file = {};

	foreach my $filename (@$filenames){
		my $q = undef;
		$q = &dbexec($dbh, qq {
		select logical_name, filesize, id from t_dps_file where logical_name = :filename}, ":filename" => $filename);
		map {$$file{$$_[0]} = $$_[1]} @{$q->fetchall_arrayref()};
	}
	return $file;
}
#---------------------------------------------------------------------------------------------
#return the set of files of a block from TMDB
sub getLFNsFromBlock
{
	my ( $block ) = @_;
	my $q = undef;
	my $lfns = [];
	$q = &dbexec($dbh, qq {select logical_name from t_dps_file where inblock in (select id from t_dps_block where name like :block)}, ":block" => $block);
	map {push @$lfns, $$_[0]} @{$q->fetchall_arrayref()};
	return $lfns;
}
#---------------------------------------------------------------------------------------------
#return the set of blocks of a dataset from TMDB
sub getBlocksFromDataset
{
	my ( $dataset ) = @_;
	my $q = undef;
	my $blocks = [];
	$q = &dbexec($dbh, qq {select name from t_dps_block where dataset in (select id from t_dps_dataset where name like :dataset)}, ":dataset" => $dataset);
	map {push @$blocks, $$_[0]} @{$q->fetchall_arrayref()};
	return $blocks;
}
#---------------------------------------------------------------------------------------------
#return the exact name of a block in TMDB for a block name with wildcard 
#this is used to get data in DBS once that does not accept wildcard
sub getBlocksFromWildCard
{
	my ( $block_wild ) = @_;
	my $q = undef;
	my $blocks = [];
	$q = &dbexec($dbh, qq {select name from t_dps_block where name like :block_wild}, ":block_wild" => $block_wild);
	map {push @$blocks, $$_[0]} @{$q->fetchall_arrayref()};
	return $blocks;
}
#---------------------------------------------------------------------------------------------
#return the exact name of a dataset in TMDB for a given block name with wildcard 
#this is used to get data using DBS API once that does not accept wildcard
sub getDatasetFromWildCard
{
	my ( $dataset_wild ) = @_;
	my $q = undef;
	my $datas = [];
	$q = &dbexec($dbh, qq {select name from t_dps_dataset where name like :dataset_wild}, ":dataset_wild" => $dataset_wild);
	map {push @$datas, $$_[0]} @{$q->fetchall_arrayref()};
	return $datas;
}

#!/usr/bin/env perl

##H Create a new node with neighbours
##H
##H Usage:
##H   LinkRemove -db DBCONFIG NODE NEIGHBOUR...
##H
##H Examples:
##H   LinkRemove -db Schema/DBParam:Foo T2_Foo_Buffer T1_Bar_Buffer
##H   LinkRemove -db Schema/DBParam:Foo T1_Foo_Buffer T1_Foo_MSS T1_Bar_Buffer
##H
##H NODE is the name of the node for which to remove links.
##H NEIGHBOUR is an existing neighbour node.

# Process command line arguments.
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Timing;
&GetOptions ("db=s"        => \$args{DBCONFIG},
	     "help|h"      => sub { &usage() });

# Check arguments.
if (scalar @ARGV < 1 || !$args{DBCONFIG})
{
  die "Insufficient parameters, use -h for help.\n";
}

my $self = { DBCONFIG => $args{DBCONFIG} };
my $dbh = &connectToDatabase ($self);

my $now = &mytimeofday();
my $node = shift(@ARGV);
my ($nodeid) = &dbexec($dbh, qq{
  select id from t_adm_node where name = :node},
  ":node" => $node)->fetchrow();
die "Node $node not known\n" if ! defined $nodeid;

while (@ARGV)
{
  my $other = shift(@ARGV);

  # Check node id
  my ($otherid) = &dbexec($dbh, qq{
    select id from t_adm_node where name = :name},
    ":name" => $other)->fetchrow();
  die "Node $other not known\n" if ! defined $otherid;

  # Remove the link
  &dbexec($dbh, qq{
    delete from t_adm_link
    where (from_node = :node and to_node = :other)
       or (to_node = :node and from_node = :other)},
    ":node" => $nodeid, ":other" => $otherid);
}

$dbh->commit();
&disconnectFromDatabase($self, $dbh, 1);

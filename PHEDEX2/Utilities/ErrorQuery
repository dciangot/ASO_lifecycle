#!/usr/bin/env perl

###############################################################################
# Script to analyze the PhEDEx download error logs in TMDB.
#
# Author: Derek Feichtinger <derek.feichtinger@psi.ch>
#
# Version info: $Id: ErrorQuery,v 1.1 2008/05/21 09:11:15 dfeichti Exp $:
###############################################################################

use Getopt::Long;
use POSIX qw(strftime);
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Timing;
use PHEDEX::Error::Classify;
use Data::Dumper;
#use re 'debug';
use strict;

######################################################################
# This DummyLogger is necessary because using of the PhEDEx DB calls required
# passing of an object with certain methods (Logmsg in pre 3.0.2, afterwards Hdr).
# Newer perl versions do not to accept a unblessed HASH (which is only correct).
package DummyLogger;
use Data::Dumper;

sub new {
  my $class = shift;
  my $self  = { LOG => 0 };

  bless ($self, $class);
  return $self;
}

# sub Logmsg {
#   my $self=shift;
#   my $msg = shift;

#   return if ! $self->{LOG};
#   my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
#   my $date = sprintf("%4d-%02d-%02d %02d:%02d:%02d",1900+$year,
# 		     $mon+1,$mday,$hour,$min,$sec);
#   print STDERR "(LOG) $date: $msg\n";

# }

sub Hdr {
   my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
   my $date = sprintf("%4d-%02d-%02d %02d:%02d:%02d",1900+$year,
 		     $mon+1,$mday,$hour,$min,$sec);
     return "#(LOG) $date: ";
}


1;

#######################################################################
package main;

############ DEFAULTS ########################
my $starttime="-10 days";
my $max_results=100;
my $errordetail="";
my $get_fts=0;
my $get_xferlog_details=0;
my $get_lfns=0;
my $query_xferlog=0;
my $query_xferlog_string=undef;
my $sortkeys = "count,src,dst,backend,stech,dtech,fts,channel,nfiles";
my $primkey="src";
my $classify=0;
my $errmsglen=250;
my $dbg=0;
##############################################

sub usage {
  print <<"EOF";
  Name: ErrorQuery - Performs an extended error query

  Synopsis: ErrorQuery --db file:instance [options] -e expr

  Description:
   This script will perform a query on the recent error logs stored in the
   PhEDEx TMDB. The results are displayed per link.

  options:
   'expr' is a placeholder for a SQL search expression. Use '%' as a wildcard
   character.
   'regexp' is a placeholder for a Perl style regular expression. Use '.*' for
   wildcards.

    Configuration options:
      --db  file:section       :  location of a PhEDEx DBParam file and from which
                                  section to take the DB connection parameters
      --errlen                 :  maximal error message length to consider in the
                                  error classification parser (for -c option)

    Selection options:
             Primary selection options (implemented as DB query):
      -e , --errordetail  expr :  search for transfers with a match of the expr
                                  to the transfer detail error message (primary selection)
      -s date                  :  date of oldest error logs to be considered
                                  ("-2 days", "-10 hours", "2008-03-23 10:00")
      -m, --maxresults  number :  specifies maximal number of records to retrieve
      --src  expr              :  match on source site name
      --dst  expr              :  match on destination site name

             Secondary selection options (parsed in code):
     --fullreason  regexp      :  only for ftscp based transfers. Searches the full
                                  error message (not the short version extracted by ftscp).
                                  only searches in subresults of a "-e"-query
     --xferlogmatch  regexp    :  match expr to the full detailed transfer log
                                  only searches in subresults of a "-e"-query


    Output options:
      -c, --classify           :  try to classify the error messages (also look at
                                  (--errlen option)
      -l, --lfns               :  print LFNs affected, implies also -c
      -x                       :  print log details, such as FTS server and storage
                                  technology
      --sort fieldname         :  sort according to field (default: $primkey)
                                  available fields: $sortkeys
      -d, --debug              :  debug output (can be used multiple times: -d -d)

    Supported output and sort fields:
        count     - number of errors found
        src       - source site
        dst       - destination site
        backend   - backend name
        stech     - primitive guess at source site storage technology (based on file pathname) 
        dtech     - primitive guess at destination site storage technology (based on file pathname) 
              FTS backend only:
        fts       - FTS server name
        channel   - FTS channel used
        nfiles    - number of files seen in FTS jobs

    If there are multiple values found for a field, the values will be shown in a comma separated
    list.

Examples:
  - List all recent errors according to link that have the "Error in bind" substring
    >> ErrorQuery --db DBParam.CSCS:Debug/CSCS -s "-2 day" -e "%Error in bind%"

    additionally extract some log details like the backend, FTS channel and the FTS server
    >> ErrorQuery --db DBParam.CSCS:Debug/CSCS -s "-2 day" -e "%Error in bind%" -x

  - List 500 recent errors containing the "DESTINATION error" substring and also
    classify the different types of errors.Can be used to find a unique error
    fingerprint. Sort according to destination.
    >> ErrorQuery --db DBParam.CSCS:Debug/CSCS -s "-2days" \
             -e "%DESTINATION error%" -x -m 500 -c --sort "dst"

  - Search for the substring "666" in the full reason given in the transfer log of all
    errors where the detail log matched the "waiting for..." primary query
    >> ErrorQuery --db DBParam.CSCS:Debug/CSCS -s "-10days" \
                -e "%waiting for files to complete%" -x --fullreason "666"

  - For debugging, retrieve just one of the errors and the full transaction log
    >> ErrorQuery --db DBParam.CSCS:Debug/CSCS -s "-2 day" -e "%Error in bind%" -m 1 -d -d

EOF
}


########## MAIN ################################

my $max_log_length = 100_000;
my $search_xferlog=0;
my $dst_site=undef;
my $src_site=undef;
my $fullreasonq=undef;
my $query_fullreason=0;
my %errinfo;

my %args;
my $rv=GetOptions (
	    "db=s"        => \$args{DBCONFIG},
	    "classify|c" => \$classify,
	    "debug|d" => sub { $dbg++; },
            "dst=s" => \$dst_site,
            "src=s" => \$src_site,
	    "errlen=i" => \$errmsglen,
	    "errordetail|e=s" => \$errordetail,
	    "fullreason=s" => \$fullreasonq,
	    "x" => \$get_xferlog_details,
	    "l|lfns" => \$get_lfns,
	    "xferlogmatch=s" => \$query_xferlog_string,
	    "s=s" => \$starttime,
	    "sort=s" => \$primkey,
	    "maxresults|m=i", \$max_results,
	    "help|h"      => sub { usage(); exit 0; }
	   );

die "Error: Could not parse command line options\n" if ! $rv;


# Option checks and sanity checks
unless ($args{DBCONFIG}) {
    usage();
    die "Error: you need to specify the --db option\n";
}
if(length($errordetail) <6) {
  usage();
  die "Error: error detail search string must be at least 6 characters\n";
}
if(defined $query_xferlog_string) {
  if(length($query_xferlog_string) <2) {
    usage();
    die "Error: xfer log search string (xferlogmatch=$query_xferlog_string) must be at least 3 characters\n";
  }
  $query_xferlog=1;
}
if(defined $fullreasonq) {
  $query_fullreason=1;
}

if(! grep /^\Q$primkey\E$/, split(/,/,$sortkeys)) {
  die "Error: sort key ($primkey) must name a valid field ($sortkeys)\n";
}

if($query_xferlog && $query_fullreason) {
  usage();
  print "$query_xferlog && $query_fullreason\n";
  die "Error: --xferlogmatch and --fullerror options are mutually exclusive\n";
}
$search_xferlog=1 if $get_fts || $get_xferlog_details || $query_xferlog || $query_fullreason;
$classify=1 if $get_lfns;

################################

my $conn = new DummyLogger;
$conn->{DBCONFIG}=$args{DBCONFIG};
$conn->{LOG}=1;

#my $self = { DBCONFIG => $args{DBCONFIG} };

my $dbh = connectToDatabase($conn);
#print "DEBUG: " . ref($conn) ."   \n" . Dumper($conn) ."\n";
$dbh->{LongReadLen} = $max_log_length;
$dbh->{LongTruncOk} = 1;

my $t_start=DateToUnixEpochSeconds($starttime);
#print" Starttime: $starttime   -->  $t_start\n";


# Set up the query according to specified options
my $resparams="";
$resparams.=",xe.log_xfer " if $search_xferlog;
#$resparams.=",log_xfer,log_validate " if $search_xferlog;
$resparams.=",xe.from_pfn,xe.to_pfn " if $get_xferlog_details;
$resparams.=",xf.logical_name " if $get_lfns;

my $where_clause="xe.log_detail like :errortext and time_done > :tstart";
$where_clause .= " and ns.name LIKE :src_site " if(defined $src_site);
$where_clause .= " and nd.name LIKE :dst_site " if(defined $dst_site);

my $sql = qq{select * from (
  select ns.name from_node, nd.name to_node, time_done, log_detail
  $resparams
  from t_xfer_error xe
  join t_xfer_file xf on xf.id = xe.fileid
  join t_adm_node nd on nd.id = xe.to_node
  join t_adm_node ns on ns.id = xe.from_node
  where $where_clause
  ) where rownum <= :maxresults
 };


my $sth = dbprep($dbh, $sql);
my @handlearr=($sth,
	   ':errortext' => $errordetail,
	   ':tstart' => $t_start,
	   ':maxresults' => $max_results);
push @handlearr,(":src_site" => $src_site) if(defined $src_site);
push @handlearr,(":dst_site" => $dst_site) if(defined $dst_site);

dbbindexec(@handlearr);

my $nrows=0;
my  $nprimaryrows=0;
my %result;
my ($src_tech,$dst_tech);
BIG: while (my $row = $sth->fetchrow_hashref()) {
  $nprimaryrows++;

  if($search_xferlog) {
    my $line;
    my @lines=split(/\n/,$row->{LOG_XFER});


    my $backend;
    while (defined ($line = shift @lines)) {
      last if ( (($backend) = $line =~ m/backend:\s*([^\s]+)/) );
    }
    $backend="n.a." if ! $backend;
    $backend =~ s/PHEDEX::Transfer:://;
    @lines=split(/\n/,$row->{LOG_XFER});

    # find a string anywhere in the transfer log
    if($query_xferlog) {
      my $res;
      while ( defined ($line = shift @lines)) {
	last if ( (($res) = $line =~ m/$query_xferlog_string/) );
      }
      next BIG if ! defined $res;
      #print $row->{LOG_XFER} if($dbg);
      print "------------\n(DBG:1) log_xfer hit on line:\n  ".$line."\n" if($dbg);
      @lines=split(/\n/,$row->{LOG_XFER});
    }

    # try to retrieve the full reason (PhEDEx backends sometimes only give the
    # first line of the reason 
    if($query_fullreason) {
      #print "DEBUG FROM_PFN: $row->{FROM_PFN}\n";
      next BIG if $backend ne "FTS";  # TODO: check whether this makes sense

      my $fullreason=undef;
      while (defined ($line = shift @lines)) { # find the particular transfer
	last if ($line =~ /Source: *\Q$row->{FROM_PFN}\E/);
      }
      if(defined $line) {
	$line=shift @lines;
	$line=shift @lines;
	$line=shift @lines;
	$line=shift @lines;
	my $counter=0;
	while ($line !~ m/Duration:/ && $counter<20) {
	  chomp $line;
	  $fullreason.=$line;
	  $counter++;
	  $line=shift @lines;
	};
	$fullreason=undef if $line !~ m/Duration:/;
      }
      if(! defined $fullreason) {
	warn "WARNING: Could not extract full reason for $row->{FROM_PFN} to $row->{TO_PFN} transfer\n";
	next BIG;
      }
      print "(DBG:1) DEBUG FULLREASON: $fullreason\n" if $dbg;
      next BIG if $fullreason !~ m/$fullreasonq/;

      @lines=split(/\n/,$row->{LOG_XFER});
    }


    $result{$row->{FROM_NODE}}{$row->{TO_NODE}}{backend}{$backend}++;

    # try to extract details from the transfer log
    if($get_xferlog_details) {
      if($backend eq "FTS") {
	my ($ftsserver,$channel,$nfiles);
	while (defined ($line = shift @lines)) {
	  last if ( (($ftsserver) = $line =~ m/glite-transfer-submit.*https:\/\/([^:]+).*/) );
	}
	$result{$row->{FROM_NODE}}{$row->{TO_NODE}}{fts}{$ftsserver}++;

	while (defined ($line = shift @lines)) {
	  last if ( (($channel) = $line =~ m/Channel:\s*([^\s]+)/) );
	}
	$result{$row->{FROM_NODE}}{$row->{TO_NODE}}{channel}{$channel}++;

	while (defined ($line = shift @lines)) {
	  last if ( (($nfiles) = $line =~ m/Files:\s*([\d]+)/) );
	}
	$result{$row->{FROM_NODE}}{$row->{TO_NODE}}{nfiles}{$nfiles}++;
      }

      # try to guess the storage technology based on the URL
      ($src_tech) = $row->{FROM_PFN} =~ m#SFN=/([^/]+)/#;
      $result{$row->{FROM_NODE}}{$row->{TO_NODE}}{stech}{$src_tech}++;
      ($dst_tech) = $row->{TO_PFN} =~ m#SFN=/([^/]+)/#;
      $result{$row->{FROM_NODE}}{$row->{TO_NODE}}{dtech}{$dst_tech}++;
    }

  } # if search_xferlog

  if($dbg) {
    while(my($k,$v)=each %{$row}) {print "\n(DGB:2) $k=$v\n" if $k ne "LOG_XFER" || $dbg>1 };
    print "\n-----------------------\n";
  }

  if($classify) {
    my $reason=ErrorClassify($row->{LOG_DETAIL},$errmsglen);
    #if($reason eq "-" or $reason =~ "(null)") {
    #	warn "WARN, VERIFY LOG: " . $row->{LOG_VALIDATE} . "\n";
    #}
    $errinfo{$reason}{COUNT}++;
    push @{$errinfo{$reason}{LFNS}}, $row->{LOGICAL_NAME} if $get_lfns;
  }

  $nrows++;
  $result{$row->{FROM_NODE}}{$row->{TO_NODE}}{count}++;
}

disconnectFromDatabase($conn, $dbh, 1);


####### OUTPUT

print "#Number of results: $nrows (of max $max_results. Primary search retrieved $nprimaryrows)\n";


# definition of which fields to print and formats (must all be string)
my @outfields=qw(count src dst);
@outfields=split(/,/,$sortkeys) if $get_xferlog_details;
my %formats = ( "count" => "%5s ",
		"src" => "%-20s",
		"dst" => "%-20s",
		"backend" => "%-10s",
		"fts" => "%-24s",
		"stech" => "%-6s",
		"dtech" => "%-6s",
                "channel" => "%-12s",
		"nfiles" => "%3s"
);

# a bit awkward: to enable different sortings generically we need to go via an intermediate hash
my %sorthash;
foreach my $src (keys %result) {
  foreach my $dst (keys %{$result{$src}}) {
    $sorthash{"${src}_${dst}"}{src}=$src;
    $sorthash{"${src}_${dst}"}{dst}=$dst;
    $sorthash{"${src}_${dst}"}{count}=$result{$src}{$dst}{count};
    foreach my $key (@outfields) {
      next if $key eq "src" || $key eq "dst" || $key eq "count";
      $sorthash{"${src}_${dst}"}{$key}=join (",",sort {$a <=> $b} keys %{$result{$src}{$dst}{$key}}) if exists $result{$src}{$dst}{$key};
    }
  }
}
#print Dumper(\%sorthash);
#print Dumper(\%result);

# print table header
print "#\n#";
foreach my $entry (@outfields) {
  printf("$formats{$entry} ",$entry);
}
print("\n");

# print table entries
foreach my $item ( sort { $sorthash{$a}{$primkey} cmp $sorthash{$b}{$primkey} } keys %sorthash) {
  foreach my $entry (@outfields) {
    if(exists $sorthash{$item}{$entry}) {
      printf(" $formats{$entry}",$sorthash{$item}{$entry});
    } else { printf(" $formats{$entry}","n.a.") }
  }
  print "\n";
}

if($classify) {
  print("\n#Error Classification:\n");
  foreach my $reason ( sort { $errinfo{$b} <=> $errinfo{$a} } keys %errinfo ) {
    printf("%4d  $reason\n",$errinfo{$reason}{COUNT});
    if ($get_lfns) {
	print "  lfn:$_\n" foreach (@{$errinfo{$reason}{LFNS}});
    }
  }
}

exit(0);

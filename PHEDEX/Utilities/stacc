#!/usr/bin/env perl
# Storage accounting tool
use strict;
use warnings;
use File::Basename;
use Getopt::Long qw /:config pass_through require_order /;
use PHEDEX::Core::Loader;
use PHEDEX::Core::Util ( qw / str_hash / );
my ($loader,$module,$interface,$ns);
my ($verbose,$debug,$terse);
my (@pfn,$dump,$level,$result,$command, $onlyleaves);
my %dirsizes = ();

sub usage {
  print <<EOF;
  Usage:

  stacc --dump DUMP -level LEVEL INTERFACE {OPTIONS}
 
  DUMP  is a storage dump file, must exist
  LEVEL is level of depth of the directory structure we want to go
 
  INTERFACE is the protocol for accessing the SE (should know how to parse the DUMP)

  OPTIONS are:
  --verbose, --debug, --help
  --onlyleaves  - old-style behaviour when only directories
   directly containing data files are accounted

EOF
  #and anything else that the
  #interface might support. Use --help per interface to find out more.
  #Known interface protocols in this installation are:
  #print " '",join("', '", grep (!/\//,sort keys %{$loader->Commands})),"'\n\n";
  exit 0;
}

sub dump_recorded {
  #Dummy function to be replaced by corresponding Namespace command.
  return 1234567890;
}

sub dirlevel {
  my $path=shift;
  my $depth=shift;
  if  ( not $path =~ /^\//){ die "ERROR: path does not start with a slash:  \"$path\"";}
  my @tmp = split ('/', $path);
  my $topdir;
  if (@tmp <= $depth) {
    return $path;
  } else {
    $topdir = join ( '/', @tmp[0..$depth]);
    return $topdir;
  }
}

sub parse_chimera_dump {
  my ($file_dump) = @_;
  #my $totalfiles    = 0;
  my ($totalsize, $totaldirs,$totalfiles);
  if ( $file_dump =~ m%.gz$% )
    { open DUMP, "cat $file_dump | gzip -d - |" or die "Could not open: $file_dump\n"; }
  else
    { open(DUMP, "cat $file_dump |") or die  "Could not open: $file_dump\n"; }
  while (<DUMP>){
	my ($size,$file);
	chomp;
	m%^\S+\s\S+\"(\S+)\"\S+\>(\d+)\<\S+$%
      or next;
	$file = $1;
	$size = $2;
	$debug and print "$file:$size\n";
	$totalfiles++;
	my $dir = dirname $file;
	$dirsizes{$dir}+=$size;
	$totalsize+=$size;
  }
  close DUMP;
  print "total files: ", $totalfiles,"\n";
  $totaldirs = keys %dirsizes;
  print "total dirs:  ", $totaldirs, "\n";
  print "total size:  ", $totalsize, "\n";
}

GetOptions(
           "dump=s"      => \$dump,
           "level=s"      => \$level,
           "verbose|v+"     => \$verbose,
           "debug+"         => \$debug,
           "onlyleaves"         => \$onlyleaves,
           "help|h"         => sub { &usage() }
          );

if ( $dump ) {
  print  "Dump recorded:", dump_recorded($dump)."\n";
  parse_chimera_dump($dump);
}

#foreach ( keys %dirsizes ) {
#  print "DIRSIZE: $_: $dirsizes{$_} \n";
#}

my %topsizes=();

foreach  (keys %dirsizes) {
  if ($onlyleaves){
    $topsizes{ dirlevel($_,$level)}+=$dirsizes{$_};
  } else {
    for (my $p=1; $p < $level; $p += 1) {
      $topsizes{ dirlevel($_,$p)}+=$dirsizes{$_};
    }
  }
}

foreach ( keys %topsizes ) {
  print "TOPSIZE: $_: $topsizes{$_} \n";
}

print  "DONE!\n";

#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long qw /:config pass_through require_order /;
#use PHEDEX::Core::DB;
use PHEDEX::Core::Loader;
use PHEDEX::Core::Catalogue;
use PHEDEX::Core::Util ( qw / str_hash / );
use Data::Dumper;
use PHEDEX::Namespace::SpaceCountCommon ( ) ;
use DMWMMON::StorageAccounting::Core;

my ($loader,$module,$interface,$ns);
my ($verbose,$debug,$terse);
my (@entries,$lfnlist,$pfnlist,$input,$catalogue,$result,$command);
my ($node);
sub usage
{
  my $default_url= $PHEDEX::Namespace::SpaceCountCommon::options{"url=s"};
  my $default_level= $PHEDEX::Namespace::SpaceCountCommon::options{"level=i"};
  print <<EOF;

  Usage:

  spacecount  INTERFACE {OPTIONS}

  INTERFACE specifies the parsing method

   Available interfaces are:
EOF
  my $out = join("', '", grep (/\/spacecount/,sort keys %{$loader->Commands}));
  $out =~ s/\/spacecount//g;
  print " '", $out, "'\n\n";
  print<<EOF;
Options and arguments:

   --dump <file>  - input storage dump file, must exist
   --node <name>  - node name in the database, for all names see:
                    $default_url/perl/nodes
   --level <int>  - depth of the directory structure you want to go,
                    default: $default_level
   --url <url>    - data service url,
                    default: $default_url
   --force        - overwrite existing entry with the same timestamp,
                    by default this would fail
EOF
  exit 0;
}

$loader = PHEDEX::Core::Loader->new( NAMESPACE => 'PHEDEX::Namespace',
				     REJECT    => [ qw / common namespace / ] );

GetOptions(
           "node=s"  => \$node,
           "verbose|v+"     => \$verbose,
           "debug+"         => \$debug,
           "help|h"         => sub { &usage() }
	  );

$interface = shift;
die "WARNING: INTERFACE argument must be specified\n" unless $interface;

$module = $loader->Load($interface);
$ns = $module->new();
$ns-> {NOCACHE} = 1;  # does it really work? 

# Command must be implemented in the corresponding Namespace interface:
$command = "spacecount";
# For common options parameter name should correspond to the options name:
my $f = $ns->{DUMP};
$result = $ns->$command ($f);
uploadRecord($ns->{URL}, $result);


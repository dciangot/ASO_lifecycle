#!/usr/bin/env perl

##H Create a new node with neighbours
##H
##H Usage:
##H   LinkNew -db DBCONFIG NODE NEIGHBOUR[:LOCAL/DISTANCE[:SHARE...]]...]
##H
##H Examples:
##H   LinkNew -db Schema/DBParam:Foo T2_Foo_Buffer T1_Bar_Buffer
##H   LinkNew -db Schema/DBParam:Foo T1_Foo_Buffer T1_Foo_MSS:L/1
##H   LinkNew -db Schema/DBParam:Foo T1_Foo_Buffer T1_Bar_Buffer:R/2:1:1:1:1
##H
##H NODE is the name of the node for which to create links.
##H NEIGHBOUR is an existing neighbour node.
##H LOCAL is L for local links, R for remote, default is R.
##H DISTANCE is the distance from the neighbour, default is L/1, R/2.
##H SHARE is link priority share, default is 7:4:1:1

# Process command line arguments.
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Timing;
&GetOptions ("db=s"        => \$args{DBCONFIG},
	     "help|h"      => sub { &usage() });

# Check arguments.
if (scalar @ARGV < 1 || !$args{DBCONFIG})
{
  die "Insufficient parameters, use -h for help.\n";
}

my $self = { DBCONFIG => $args{DBCONFIG} };
my $dbh = &connectToDatabase ($self);

my $now = &mytimeofday();
my $node = shift(@ARGV);
my ($nodeid) = &dbexec($dbh, qq{
  select id from t_adm_node where name = :node},
  ":node" => $node)->fetchrow();
die "Node $node not known\n" if ! defined $nodeid;

while (@ARGV)
{
  my $other = shift(@ARGV);
  my ($name, $rest) = ($other =~ /^([^:]+)(:.*)?/);
  my ($junk, $locality, @shares) = split(":", $rest || "");
  @shares = (7, 4, 1, 1) if ! @shares;
  $locality = "R" if ! $locality;
  $distance = undef;
  if ($locality =~ m|(.)/(\d+)|) {
    $locality = $1;
    $distance = $2;
  } elsif ($locality eq 'R') {
    $distance = 2;
  } elsif ($locality eq 'L') {
    $distance = 1;
  } else {
    die "unexpected locality `$locality'\n";
  }

  # Check node id
  my ($id) = &dbexec($dbh, qq{
    select id from t_adm_node where name = :name},
    ":name" => $name)->fetchrow();
  die "Node $name not known\n" if ! defined $id;

  # Add link
  &dbexec($dbh, qq{
    insert into t_adm_link
    (id, from_node, to_node, distance, is_local, is_active, is_preferred)
    values (seq_adm_link.nextval, :me, :other, :distance, :local, 'y', 'n')},
    ":me" => $nodeid,
    ":other" => $id,
    ":distance" => $distance,
    ":local" => ($locality eq "R" ? 'n' : 'y'));

  &dbexec($dbh, qq{
    insert into t_adm_link
    (id, from_node, to_node, distance, is_local, is_active, is_preferred)
    values (seq_adm_link.nextval, :other, :me, :distance, :local, 'y', 'n')},
    ":me" => $nodeid,
    ":other" => $id,
    ":distance" => $distance,
    ":local" => ($locality eq "R" ? 'n' : 'y'));
}

$dbh->commit();
&disconnectFromDatabase($self, $dbh, 1);

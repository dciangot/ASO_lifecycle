#!/usr/bin/env perl
use warnings;
use strict;

##H Master -config FILE[,FILE...] environ    [ENVIRONMENT...]
##H Master -config FILE[,FILE...] start      [AGENT... | all]
##H Master -config FILE[,FILE...] stop       [AGENT... | all]
##H Master -config FILE[,FILE...] terminate  [AGENT... | all]
##H Master -config FILE[,FILE...] kill       [AGENT... | all]
##H Master -config FILE[,FILE...] show       [AGENT... | all]
##H Master -config FILE[,FILE...] getAgentEnviron [AGENT]
##H Master -config FILE[,FILE...] jobcount   [AGENT... | all]
##H Master -config FILE[,FILE...] listagents [AGENT... | all]
##H Master -config FILE[,FILE...] clean      [AGENT... | all]
##H Master -config FILE[,FILE...] debug      [AGENT... | all]
##H Master -config FILE[,FILE...] checkdb
##H
##H Manage an agent configuration.  If more than one configuration file
##H is given, the different sections of each file are merged and the
##H operations apply to resulting merged view.
##H
##H The configuration file can contain "ENVIRON" and "AGENT" sections.
##H The former specifies, in Bourne shell syntax, the code to execute
##H to set up environment necessary for the agents to run.  It may
##H also define variables that can be referred to in the agent section.
##H
##H The -config option specified one or more configuration files to
##H process, files separated by commas ",".  More than one -config
##H option can be provided; "-config A -config B" is equivalent to
##H "-config A,B".
##H
##H The "environ" command prints out the shell commands to set up the
##H environment.  This is useful for e.g.
##H    eval $(Master -config MyConfig environ)
##H
##H The "start" and "stop" commands start and stop, respectively, a
##H set of agents.  If no AGENT names are specified, the operation
##H will apply to default agents (i.e. all those agent definitions
##H which don't have DEFAULT=off attribute).  If "all" is specified,
##H all agents, including DEFAULT=off agents, will be affected.
##H Otherwise, a list of agent labels (LABEL=xyz) names is expected.
##H
##H The "show" command behaves like "start", but prints out the
##H shell commands the master would issue instead of executing them.
##H
##H The "terminate" forcefully terminates (kills) the specified agents.
##H "kill" is the same, but even more forceful (kill -9).
##H
##H The "getAgentEnviron" command is like "environ", but takes the agent
##H name instead of the environment name, and returns the environment that
##H agent would have.
##H
##H The "jobcount" command scans the agents for '-jobs' options and counts
##H the number of jobs the total system will run. Useful for estimating the
##H number of processes you might expect on your vobox! The command can be
##H restricted to a set of agents in the same way as the "start" and "stop"
##H commands.
##H
##H The "listagents" command will print the names of agents matching the
##H selection, which should typically be null or 'all'.
##H
##H The "clean" command will remove the state directory of agents
##H matching the selection.  This is only done if the agent is not
##H running.  Use with care.
##H
##H The "debug" command will use $PHEDEX_DEBUGGER from the agent's
##H environment, or 'perl -MPHEDEX::Debug -d' by default, and start the
##H agent in the perl debugger accordingly.
##H
##H The "checkdb" command will check your database connection, using the value
##H of PHEDEX_DBPARAM from the 'common' environment. You can use this to see if
##H you have a problem with your database connection.
##H
##H The database connection will also be verified automatically before any
##H agent is started. This is to avoid situations where the parameter is
##H invalid, but that is not discovered until the agent itself starts up. If
##H you did not check the agent logfile you would not find out.
##H
##H You can disable the database check on starting agents by adding "-nocheckdb"
##H to the command line, before the command option.
##H
##H Adding "-dummy" to the command line before the command option will cause
##H the script to not actually execute the commands, but only to print them to
##H stdout. Useful for debugging.

BEGIN {
  use Cwd;
  use File::Basename;
  my $pwd = dirname($0) . '/../perl_lib';
  if ( $0 !~ m%^/% )
  {
    $pwd = cwd() . '/' . $pwd;
  }
  unshift(@INC, $pwd);
}

use PHEDEX::Core::Help;
use PHEDEX::Core::Config;

my (%args,$config,$dummy,$checkdb);
$checkdb=1;
$config = PHEDEX::Core::Config->new( PARANOID => 1 );

# First we need to parse the command line arguments
while (@ARGV)
{
    $ARGV[0] =~ s%^--%-%;
    if ($ARGV[0] eq "-config" && scalar @ARGV > 1) 	
    { shift (@ARGV); push (@{$args{CONFIG}}, split(/,/, shift(@ARGV))); }
    elsif ($ARGV[0] eq "-h") { usage(); }
    elsif ($ARGV[0] eq "-dummy") { shift @ARGV; $dummy=1; }
    elsif ($ARGV[0] eq "-nocheckdb" || $ARGV[0] eq "-no-checkdb" ) { shift @ARGV; $checkdb=0; }
    elsif ($ARGV[0] =~ /^-/) 
    { die "Unexpected option $ARGV[0], please use -h for help\n"; }
    else
    { last; }
}

my $mode = shift(@ARGV);

if (!$args{CONFIG} || !$mode)
{ 
    die "Insufficient parameters, please use -h for help\n";
}

# Then we need to open up each of the config files
foreach my $file (@{$args{CONFIG}}) { $config->readConfig($file); }

$config->dummy(1) if $dummy;

# Now the action-specific bits...
if ( $mode eq 'environ' )
{
  foreach (@ARGV ? @ARGV : 'common') { print $config->getEnviron($_); }
  exit 0;
}

if ( ($mode eq 'start' || $mode eq 'checkdb') && $checkdb )
{
  print "Testing your DB connection\n";
  my ($env,$ename);
  $ename = $args{ENVIRONMENT} || 'common';
  $env = '';
  while ( $ename )
  {
    $env   = $config->{ENVIRONMENTS}{$ename}->Environment . $env;
    $ename = $config->{ENVIRONMENTS}{$ename}->PARENT;
  }
  my $cmd = $env . "\n" . '${PHEDEX_SCRIPTS}/Utilities/CheckDBConnection -db ${PHEDEX_DBPARAM}';
  my $status = system($cmd);
  if ( $status )
  {
    print "Check of your DB connection failed, will not proceed\n";
    exit 0;
  }
  if ( $mode eq 'checkdb' ) { exit 0; }
}
if ( $mode eq 'jobcount' )
{
  print "Total of ",$config->jobcount(@ARGV)," jobs for this configuration\n";
  exit 0;
}

if ( $mode eq 'listagents' )
{
  my $agents = $config->select_agents( @ARGV );
  die "No agents found\n" unless $agents;
  my @labels;
  if ( ref($agents) eq 'ARRAY' )
  {
    @labels = sort map { $_->LABEL } @{$config->select_agents( @ARGV )};
  }
  else { push @labels, $agents->LABEL; }
  print "Agents matching: '",join("','",@ARGV),"'\n";
  print '   ',join("\n   ",@labels),"\n";
  exit 0;
}

my $result;
if ( $config->can($mode) || exists $PHEDEX::Core::Config::commands{$mode} )
{
  no strict 'refs';
  $result = $config->$mode( @ARGV );
}
else
{
  die "Don't recognise \"$mode\" as a valid command. Use \"-h\" for help.\n";
}

# If this was a preconfigured command, it will have printed all it should...
exit 0 if exists $PHEDEX::Core::Config::commands{$mode};

# Otherwise, just print the result.
print $result;
exit 0;

#!/usr/bin/env perl

###############################################################################
# Script to analyze the PhEDEx download daemon log. Works with PhEDEx 2.5.x
#
# Author: Derek Feichtinger <derek.feichtinger@psi.ch>
#
# initial CVS checkin by metson
# XML support added by Artem Trunov
# Version info: $Id: InspectPhedexLog,v 1.35 2009/01/27 14:59:21 dfeichti Exp $:
###############################################################################

#TODO: Make InspectPhedexLogs use the PHEDEX::Error::Classify library

use strict;
use Getopt::Std;
use Data::Dumper;
use Time::Local;
use POSIX;
use HTML::Entities;

use PHEDEX::Error::Report;

my $flag_showErrors=0;
my $flag_rawErrors=0;
my $flag_verbose=0;
my $flag_debug=0;
my $flag_checkdate_start=0;
my $flag_checkdate_end=0;
my $flag_bunchDetect=0;
my $flag_errhisto=0;
my $flag_multiFailures=0;
my $flag_nodberrors=0;

my $errmsglen=350; # length of error messages to use (error will be cut)
my $multiFilePrintThresh=2;



sub usage {
print <<"EOF";
usage: InspectPhedexLog [options] logfile1 [logfile2 ...]

   Analyses PhEDEx download agent log files

   options:
      -s start_date   -t end_date
      -e     : also show error statistics (summary over error messages)
         -r  : do not try to regexp-process errors messages, but show raw
                 error messages (gigantic output!!)
         -H  : print simple histograms for every error class
         -v  : also print associated taskIDs
      -m     : investigate files with multiple transfer failures
         -v  : outputs per site error messages for failed files
         -x number: sets threshold on how many failures are needed until the file
                    will be printed (default=$multiFilePrintThresh)
      -D     : do not show database errors		    
      -c number  : defines the error message cutoff (default=$errmsglen)
                   Longer messages will be cut down to this length at the
                   beginning of the parser.This may lead to problems, if
                   the significant part comes later in the message
      -v     : verbose (increases output for -e, -m options)
      -d     : debug   Prints a summary line for every single transfer
      -f file: produces xml files with data, except for some histo
      -h     : display this help

 examples:
   InspectPhedexLog Prod/download Prod/download.1 Prod/download.2
   InspectPhedexLog -evs yesterday -t "2006-11-20 10:30:00" Prod/download
   InspectPhedexLog -es "-2 days"  Prod/download

   without any of the special options, the script will just print
   summary statistics for all download sources.

   Running with the -e option is probably the most useful mode to identify general site problems
   The -m option is useful to look into reasons of data set "tailing", it will find file which
   repeatedl failed to transfer. But it is less useful to investigate LoadTest transfers, since
   their names are changed artifically upon every transfer job.

EOF

}

# A note about the time values used in PhEDEx
#
# t-expire: time when transfer task is going to expire 
# t-assing: time when transfer task was assigned (task was created)
# t-export: time when files where marked as available at source
# t-inxfer: time when download agent downloaded task the file belongs to.
# t-xfer: time when transfer for that particular file starts
# t-done: time when transfer for that particular file finished
#
# Note from D.F.:
# This is not quite correct. Several files in a sequence always get the
# same t-xfer value and nearly identical t-done values (the t-done value
# differences are <0.1s). So these times seem to refer rather to a
# bunch of files and not to the times of particular files.



# OPTION PARSING
my %option=();
getopts("c:dDehHmrs:t:vx:f:",\%option);


# disabled !!!! $flag_bunchDetect=1 if(defined $option{"b"});
$flag_showErrors=1 if(defined $option{"e"});
$flag_multiFailures=1 if(defined $option{"m"});
$flag_rawErrors=1 if(defined $option{"r"});
$flag_verbose=1 if(defined $option{"v"});
$flag_errhisto=1 if(defined $option{"H"});
$flag_debug=1 if(defined $option{"d"});
$flag_nodberrors=1 if(defined $option{"D"});

if (defined $option{"h"}) {
   usage();
   exit 0;
}

if (defined $option{"c"}) {
  $errmsglen=$option{"c"};
}

if (defined $option{"x"}) {
  $multiFilePrintThresh=$option{"x"};
}

my $logx = $option{"f"} || "/dev/null";

my ($dstart,$dend)=(0,1_500_000_000);
my ($sdstart,$sdend) = ("","");

if (defined $option{"s"}) {
   $dstart=DateToUnixEpochSeconds($option{"s"});
   $dend = time(); # By VMB
   die "Error: Could not parse starting date: $option{s}\n" if (!$dstart);
   $flag_checkdate_start=1;
}
if (defined $option{"t"}) {
   $dend=DateToUnixEpochSeconds($option{"t"});
   die "Error: Could not parse end date: $option{t}\n" if (!$dend);
   $flag_checkdate_end=1;
}

$sdstart=strftime("%F %T",gmtime($dstart));
print "given starttime $sdstart\n";

$sdend=strftime("%F %T",gmtime($dend));
print "given endtime $sdend\n";

die "Error: Error message cutoff (option -c) must be > 1 (now: $errmsglen)\n" if $errmsglen <=1;

my @logfiles=@ARGV;

my %sitestat; # hash structure for collecting site statistics
my %failedfile; # for counting repeatedly failing files
my %attempts; # histogram of required attempts until successful 

if ($#logfiles==-1) {
   usage();
   die "Error: no logfile(s) specified\n";
}


my $datestart=1e100; # first recorded transfer date over all scanned log files
my $dateend; # last recorded transfer date over all scanned log files
my $localdatestart;  # date of earliest transfer line taken into account in a logfile
my $localdateend;    # date of last transfer line taken into account in a logfile

my %errinfo; # hash for collecting error strings per site
my %dberrinfo; # hash for collecting data base error statistics
my @expiredinfo; # array collecting task IDs of expired tasks
my ($date,$task,$from,$to,$stat,$size,$txfer,$tdone,$ttransfer,$fname,$reason,$bsize,$size_sum)=(0,0,0,0,0,0,0,0,0,0,0,0);
my ($bunchsize,$bunchfiles,$txfer_old,$tdone_old,$closedbunch)=(0,0,0,0,0);

my $line;
my $statstr;

foreach my $log (@logfiles) {
   $localdatestart=undef;
   $localdateend=undef;

   open(LOG,"<$log") or die "Error: Could not open logfile $log";
   my ($MbperS,$MBperS);
   while($line=<LOG>) {
       next unless ($line =~ /^(\d+-\d+-\d+\s+\d+:\d+:\d+): FileDownload/);
       next if ($flag_checkdate_start && ($1 lt $sdstart) );
       next if ($flag_checkdate_end && ($1 gt $sdend) );

       $localdateend=DateToUnixEpochSeconds($1);
       unless ($localdatestart) { $localdatestart = $localdateend; };

       if($line =~ /ORA-\d+.{60}/) {
           my ($ora) = $line =~ m/(ORA-\d+.{60})/;
           ($date) = $line =~ m/^(\d+-\d+-\d+\s+\d+:\d+:\d+):/;
           $dberrinfo{$ora}{num}++;
           push @{$dberrinfo{$ora}{"date"}}, $localdateend;
           next;
       }
       
# also want to handle expired tasks?!
# Sample: 2008-04-10 13:45:20: FileDownload[28038]: PhEDEx transfer task $$t{TASKID} was nearly expired | has expired	   
       if ($line =~ / (\d+) (was nearly expired|has expired)/ ) {
	   push @expiredinfo, $1;
	   next;
       }
       
       next unless ($line =~ /xstats:.*report-code=.*/);

       ($date,$task,$from,$to,$stat,$size,$txfer,$tdone,$fname) = $line =~
	   m/(\d+-\d+-\d+\s+\d+:\d+:\d+):.*task=([^\s]+).*from=([^\s]+).*to=([^\s]+).*report-code=([\d-]+).*size=([^\s]+).*t-xfer=([^\s]+).*t-done=([^\s]+).*lfn=([^\s]+)/;
       # report-code=0 means a successful transfer
       if(! $fname) {
	   warn "Error: Parsing problem with line:\n$line";
	   next;
       }

       $closedbunch=0;
       if($stat == 0) {   # successful transfer
	   $statstr="OK    ";  ##### sprintf("OK(%4d)  ",$stat);
	   $sitestat{"$from"}{"OK"}++;
	   $sitestat{"$from"}{"size"}+=$size;
	   $sitestat{"$from"}{"ttransfer"}+=$ttransfer;
	   $ttransfer=0;
	   # we add up a histogram of the total attempts per file and one for the expired attempts
	   if($flag_multiFailures) {
	       if (exists $failedfile{"$fname"}) {
		   for my $site (keys %{$failedfile{"$fname"}}) {
		       my $toterr = $failedfile{"$fname"}{$site}{"err"}+$failedfile{"$fname"}{$site}{"exp"};
		       $attempts{"$site"}{"toterr"}{$toterr}++;
		       $attempts{"$site"}{"exp"}{ $failedfile{"$fname"}{$site}{"exp"} }++
			   if $failedfile{"$fname"}{$site}{"exp"} > 0;
		   }
		   delete $failedfile{"$fname"};
	       } else {
		   # for files that made it in the first attempt
		   $attempts{"$from"}{"toterr"}{"0"}++;
		   $attempts{"$from"}{"exp"}{"0"}++;
	       }
	   }

             # the following is needed because transfer time applies not to a single file but to the bunch
	     #if( ! defined $txfer_old || $txfer_old == 0  || $txfer == $txfer_old) {     # try to identify bunches
	       # all files in a bunch seem to have the same start time (xfer) and almost the same tdone
	     #  printf STDERR ("WARNING: there may be a transfer time problem (delta t-done=%.4f) in line\n$line\n",$tdone-$tdone_old) if $flag_bunchDetect && abs($tdone-$tdone_old) > 1.0 && $txfer_old != 0;
	     #  $bunchfiles++;
	     #  $bunchsize += $size;
	     #} else {
             #    $closedbunch=1;
	     #}
	     #printf("DEBUG: tdone-txfer %.5f   txfer-txfer_old %.5f    tdone-tdone_old %.5f  $from\n",$tdone - $txfer,
		#     $txfer-$txfer_old, $tdone-$tdone_old);
	     #($txfer_old,$tdone_old) = ($txfer,$tdone);

         } else {
             $statstr="FAILED";  #sprintf("FAILED(%4d)",$stat);
             $sitestat{"$from"}{"FAILED"}++;

	     # try to collect error information in categories. This needs to be extended for the myriad of SRM
	     # error messages ;-)
	     my ($detail,$validate) = $line =~ m/.*detail=\((.*)\)\s+validate=\((.*)\)\s*job-log.*$/;
	     warn "WARNING: no detail,validate IN LINE: \n     $line\n" if(! $detail && ! $validate);
	     if(! $flag_rawErrors) {
	       my $tmp;
	       # First some general substitution patterns to remove IDs, etc.
	       $detail =~ s/\sid=[\d-]+\s/id=\[id\] /;
	       $detail =~ s/\sauthRequestID \d+\s/authRequestID \[id\] /;
	       $detail =~ s/RequestFileStatus#[\d-]+/RequestFileStatus#\[number\]/g;
	       $detail =~ s/srm:\/\/[^\s]+/\[srm-URL\]/g;
	       $detail =~ s/at\s+\w{3}\s+\w{3}\s+\d+\s+\d+:\d+:\d+\s+[A-Z]+\s+\d+/at \[date\]/g;
	       $detail =~ s/request \[-?\d+\]/request [reqid]/;
               $detail =~ s/pnfsPath=\/.*(\s|\b)/pnfsPath=path/;
	       $detail =~ s/\{uoid=.*\}/\{uoid=stuff\}/;
	       $detail =~ s/prm_size \d+/prm_size [size]/;
	       $detail =~ s/msg=path \/\S+\s/msg=path [path] /;
	       $detail =~ s/550 550 \/\S+\s/550 550 [path] /;

	       $detail = substr($detail,0,$errmsglen) . "...(error cut)" if length($detail) > $errmsglen;
	
               if( $detail=~/^\s*$/) {$reason = "-"}
	       elsif( (($reason) = $detail =~ m/.*(DESTINATION error during FINALIZATION phase: \[GENERAL_FAILURE\] failed to complete PrepareToPut request).*/) ) { }
	       elsif( (($reason) = $detail =~ m/.*(the server sent an error response: 425 425 Can\'t open data connection).*/)) {}
	       elsif( $detail =~ m/.* the server sent an error response: 451 451 .*/) {
		   $reason = $detail;
		   $reason =~ s/\'\[\>(PoolManager).*\]\'/\'\[$1 stuff]\'/;
		   $reason =~ s/\'\[\>(SrmSpaceManager).*\]\'/\'[$1 stuff]\'/;
		   $reason =~ s/(No write pools configured for )<.*/[$1dcache stuff]/;
	       }
	       elsif( (($reason) = $detail =~ m/.*(the gridFTP transfer timed out).*/) ) {}
	       elsif( (($reason) = $detail =~ m/.*(Failed SRM get on httpg:.*)/) ) {}
	       elsif( (($reason) = $detail =~ m/.*(Failed on SRM put.*)/) )
		 { $reason =~ s!srm://[^\s]+!\[srm-url\]!; }
	       elsif( (($reason,$tmp) = $detail =~ m/.*( the server sent an error response: 553 553)\s*[^\s]+:(.*)/) )
		 {$reason .= " [filename]: " . $tmp}
	       elsif( (($reason) = $detail =~ m/(.*Cannot retrieve final message from)/) )
		 {$reason .= "[filename]"}
	       #elsif( $detail =~ /.*RequestFileStatus.* failed with error.*state.*/)
		# {$reason = $detail; $reason =~ s/(.*RequestFileStatus).*(failed with error:).*(state.*)/$1 [Id] $2 $3/;}
	       elsif( $detail =~ /copy failed/ )
		 { $reason = $detail; $reason =~ s/at (\w{3} \w{3} \d+ \d+:\d+:\d+ \w+ \d+)/at \[date\]/g}
	       elsif( $detail =~ /state Failed : file not found/ )
		 { $reason = "file not found"; }
               elsif( $detail =~ /transfer expired in the PhEDEx download agent queue after [\d.]*h/ )
                 { $reason= "transfer expired in the PhEDEx download agent queue after [hours] h"; }
	       else {$reason = $detail};
	     } else {$reason = $detail};

	     if($reason eq "-") {
	       my $valreason;
	       $validate =~ s/srm:\/\/[^\s]+/\[srm-URL\]/g;
	       if( (($valreason) = $validate =~ m/.*(credential remaining lifetime is less then a minute).*/) ) {}
	       elsif( (($valreason) = $validate =~ m/.*(file \[srm-URL\] doesn\'t seem to exist).*/) ) {}
	       elsif( (($valreason) = $validate =~ m/.*(size mismatch disk=)\s+db=\d+.*/) )
		 { $valreason = "fake " . $valreason . " (nothing on disk)" }
	       elsif( (($valreason) = $validate =~ m/.*(size mismatch)\d+\s+db=\d+.*/) )
		 { $valreason .= " CHECK DB - MAY BE A CONSISTENCY ISSUE" }
	       else { $valreason = "[unknown reason - inspect log]"; }

	       $reason = "no detail - validate failed: $valreason";
	     }

	     if( $reason =~ /transfer expired/ ) {
		 $sitestat{"$from"}{"EXP"}++;
		 $statstr="EXP";
		 $failedfile{"$fname"}{$from}{"exp"}++ if $flag_multiFailures;
	     } elsif ( $reason =~ /^\s*Canceled/ ) {
		 $sitestat{"$from"}{"CANC"}++;
		 $statstr="CANC";
                 # TODO: cancelled transfers are not accounted for correctly yet for the
                 #       multiple transfer failures mode
		 $failedfile{"$fname"}{$from}{"canc"}++ if $flag_multiFailures;
	     } elsif ( $reason =~ /agent lost/ ) {
		 $sitestat{"$from"}{"LOST"}++;
		 $statstr="LOST";
                 # TODO: lost transfers are not accounted for correctly yet for the
                 #       multiple transfer failures mode
		 $failedfile{"$fname"}{$from}{"lost"}++ if $flag_multiFailures;
	     } else {
		 $failedfile{"$fname"}{$from}{"err"}++ if $flag_multiFailures;
	     }

	     if($flag_multiFailures) {
		 $failedfile{"$fname"}{$from}{"reason"}{$reason}++;
		 ($failedfile{"$fname"}{$from}{"frompfn"}) = $line =~ m/from-pfn=([^\s]*)\s+to-pfn/;
	     }

	     $errinfo{$from}{$reason}{num}++;
	     push @{$errinfo{$from}{$reason}{tasks}},$task;
	     push @{$errinfo{$from}{$reason}{time}},$localdateend if $flag_errhisto;
	 
         }
       
#         ($date_old,$from_old,$ttransfer_old)=($date,$from,$ttransfer);
       

       if($closedbunch) {
	   $ttransfer = $tdone_old - $txfer_old;
	   die "ERROR: ttransfer=0 ?????? in line:\n $line\n" if $ttransfer == 0;
	   $MbperS=$bunchsize*8/$ttransfer/1e6;
	   $MBperS=$bunchsize/1000/1000/$ttransfer;
	   printf("   *** Bunch:  succ. files: $bunchfiles  size=%.2f GB  transfer_time=%.1f s (%.1f MB/s = %.1f Mb/s)\n"
		  ,$bunchsize/1000/1000/1000,$ttransfer,$MBperS,$MbperS) if $flag_debug && $flag_bunchDetect;

	   $bunchfiles = 1;
	   $bunchsize = $size;
	 }
	 printf("$statstr $from  $fname  size=%.2f GB $date\n",$size/1000/1000/1000)  if $flag_debug;

   }  #while line=<LOG>

   close LOG;

   $datestart = $localdatestart if ($localdatestart && $localdatestart < $datestart);
   $dateend = $localdateend if ($localdateend && $localdateend > $dateend);
   
} #foreach log


#Now we process and report
#for XMLout we need to pass data structure $errinfo{from}{to}{reason}{num, time=>[]}
#but here $errinfo is missing {to}, since it's always your local site!
#so we need to make a trick, insert $to values. 
#$to value comes from the last record in the log file
if (exists $option{"f"} ) {
    my %errinfo2 = ();
while ( my ($k, $v) = each %errinfo ) {
    $errinfo2{$k} = {$to => $v}
}

# VMB: added GIVENENDTIME GIVENSTARTTIME
&XMLout(\%errinfo2,\%sitestat,$logx, 
	STARTTIME=>$datestart, ENDTIME=>$dateend,
	STARTLOCALTIME=>scalar localtime($datestart), ENDLOCALTIME=>scalar localtime($dateend),
	GIVENSTARTTIME=>scalar localtime($dstart),    GIVENENDTIME=>scalar localtime($dend), # VMB added
	GETERRORORIGIN=>1);
}


if ($flag_multiFailures) {
    my %total;
    foreach my $fname (keys %failedfile) {
	foreach my $from (keys %{$failedfile{$fname}}) {
	    foreach my $failmode (qw(err exp canc lost)) {
		$total{$fname}{$failmode} += $failedfile{$fname}{$from}{$failmode};
	    }
	}
    }
    print "\nRepeatedly failing files that never were transferred correctly:\n";
    print   "===============================================================\n";
    print(" real errors  [canc,exp,lost]\n");

    foreach my $fname (sort {$total{$b}{"err"} <=> $total{$a}{"err"}} keys %total) {
	my $t = $total{"$fname"};
	my $f = $failedfile{$fname};
	
	next if $multiFilePrintThresh > $t->{"err"}+$t->{"exp"};
	
	printf(" %3d [%3d,%3d,%3d] $fname\n",$t->{"err"}, $t->{"canc"}, $t->{"exp"}, $->{"lost"});
	
	if($flag_verbose) {
	    foreach my $from (keys %{$f}) {
		my $ff = $f->{$from};
		print "        from $from\n";
		print "        pfn=$ff->{frompfn}\n";
		foreach $reason (sort { $ff->{"reason"}{$b} <=> $ff->{"reason"}{$a} } keys %{$ff->{"reason"}} ) {
		    my $ffr = $ff->{"reason"}{$reason};
		    printf("        %4d   $reason\n",$ffr);
		}
	    }
	}
	print "\n";
    }

    print "\nNumber of distinct files that failed to transfer: " . keys(%failedfile) . "\n";
    print "--------------------------------------------------------\n";
    
    print "\nHistogram of failed attempts per file until successful transfer:\n";
    print "--------------------------------------------------------\n";
    print "   Attempts     real errors     [incl. expired/cancl]\n\n";
    
    # to fix for real/exp! 
    foreach my $from (sort {$a cmp $b} keys %attempts) {
	print "   $from:\n";
	
	$attempts{$from}{"toterr"}{"0"}=$sitestat{$from}{"OK"};
	
	foreach my $n (sort {$a <=> $b} keys %{$attempts{$from}{"toterr"}}) {
	    my $af = $attempts{$from};
	    printf("    %3d  %4d   [%4d]\n",$n,
		   $af->{"toterr"}{$n} - $af->{"exp"}{$n},$af->{"toterr"}{$n});
	}
    }
}

if($flag_showErrors) {
    print "\n\n==============\n";
    print "ERROR ANALYSIS\n";
    print "==============\n";
    
    unless ($flag_nodberrors) {

	print "\n\nData base Errors\n";
	print "==================\n";
	
	foreach my $err (keys %dberrinfo) {
	    printf("   %3d  $err\n",$dberrinfo{$err}{num});
	    my $h=simpleHisto(\@{$dberrinfo{$err}{"date"}},10);
	    printTimeHisto($h);
	}
    }

    # makes reason hash
    my %reasons = ();
    foreach my $from (keys %errinfo) {
	foreach $reason (keys %{$errinfo{$from}}) {
	    $reasons{$reason} += $errinfo{$from}{$reason}{num};
#	    print "Added $errinfo{$from}{$reason} from $from for $reason\n";
	}
    }

    print "\n\nExpired tasks\n";
    print "==================\n";
    print "Total: ", scalar @expiredinfo, "\n";
    if($flag_verbose) { print "Task IDs: @expiredinfo", "\n" };


    print "\n\nError message statistics per site:\n";
    print "===================================\n";
    foreach $from (keys %errinfo) {
	print "\n *** ERRORS from $from:***\n";
	foreach $reason (sort { $errinfo{$from}{$b}{num} <=> $errinfo{$from}{$a}{num} } keys %{$errinfo{$from}}) {
	    printf("   %4d   $reason\n",$errinfo{$from}{$reason}{num});
	    print "             task IDs: ", join(",",@{$errinfo{$from}{$reason}{tasks}}) . "\n\n" if $flag_verbose;
	    if($flag_errhisto) {
		my $h=simpleHisto(\@{$errinfo{$from}{$reason}{"time"}},10);
		print "      simple histogram:\n";
		printTimeHisto($h);
	    }
	}
    }
}

print "\nSITE STATISTICS:\n";
print "==================\n";

if ($dateend ==0) {
#    print "   No transfer entries found ($datestart, $dateend)\n";
    print "   No transfer entries found ($sdstart, $sdend)\n";
    exit 0;
}

printf("                         first entry: %s      last entry: %s\n",
       strftime("%Y-%m-%d %H:%M:%S",localtime($datestart)),
       strftime("%Y-%m-%d %H:%M:%S",localtime($dateend)));

my $deltat=$dateend-$datestart; 
$deltat ||= 1; #to prevent 0 delta in later division

my ($MbperS,$MBperS);
my $totalsize=0;
foreach my $site (sort {$a cmp $b} keys %sitestat) {
    my $ss = $sitestat{$site};
    foreach my $res (qw(OK FAILED EXP CANC LOST)) {
	$ss->{$res} ||= 0;
    }
#    $sitestat{$site}{"OK"}=0 if ! defined $sitestat{$site}{"OK"};
#    $sitestat{$site}{"FAILED"}=0 if ! defined $sitestat{$site}{"FAILED"};
#    $sitestat{$site}{"EXP"}=0 if ! defined $sitestat{$site}{"EXP"};
    my $ok = $ss->{"OK"};
    my $failed = $ss->{"FAILED"}; 
    my $err = $ss->{"FAILED"} - $ss->{"EXP"} - $ss->{"LOST"};
    my $exp = $ss->{"EXP"};
    my $canc = $ss->{"CANC"};
    my $lost = $ss->{"LOST"};
    #print "site: $site (OK: " . $sitestat{$site}{"OK"} . "   Err: " . $err
    #. "   Exp/Cancl: " . $sitestat{$site}{"EXP"} . ")";
    printf("%20s (OK: %3d  Err: %3d  Exp: %3d  Canc: %3d  Lost: %3d)",$site,$ok,$err,$exp,$canc,$lost);
    
    if (($ok + $err) > 0) {
	my $succ = $ok/($ok + $err)*100;
	printf("   succ.: %.1f %%", $succ);
    }
    
    $sitestat{$site}{"size"}=0 if ! exists $sitestat{$site}{"size"};
    my $size = $ss->{"size"};
    $totalsize+=$size;
    printf("   total: %6.1f GB  (%4.1f MB/s)",$size/1e9,$size/1e6/$deltat);
    
    if ( exists $ss->{"ttransfer"} && $ss->{"ttransfer"}>0) {
	$MbperS=$size*8/$ss->{"ttransfer"}/1e6;
	$MBperS=$ss->{"size"}/1000/1000/$ss->{"ttransfer"};
	printf("   avg. rate: %.1f MB/s = %.1f Mb/s",$MBperS,$MbperS) if $flag_bunchDetect;
    }
    print "\n";
}

# Calculate total throughput from first to last used log entry
if($deltat>0) {
    $MbperS=$totalsize/(1000*1000)*8/$deltat;
    $MBperS=$totalsize/(1000*1000)/$deltat;
    my $GBperDay=$MBperS/1000*3600*24;
    
    print "\nTOTAL SUMMARY:\n";
    print "==================\n";
    printf("                         first entry: %s      last entry: %s\n",
	   strftime("%Y-%m-%d %H:%M:%S",localtime($datestart)),
	   strftime("%Y-%m-%d %H:%M:%S",localtime($dateend)));
    printf("total transferred: %.1f GB  in %.1f hours\n",$totalsize/(1000*1000*1000),
	   $deltat/3600);
    printf("avg. total rate: %.1f MB/s = %.1f Mb/s  = %.1f GB/day\n",$MBperS,$MbperS,$GBperDay);
}

# simple 1D histo
sub simpleHisto {
  my $data = shift; # ref to array of data values
  my $nbins = shift; # number of desired bins

  return undef if $#{@{$data}} < 0;

  my %histo;  # return structure
  my @h=();
  my @xlabel=();

  my $min=@{$data}[0];
  my $max=@{$data}[0];
  foreach my $x (@{$data}) {
    if($x < $min) {
      $min = $x;
      next;
    }
    $max = $x if $x > $max;
  }

  if ($#{@{$data}}==0) {
  }

  if($max==$min) {
    push @h,$#{@$data} + 1;
    push @xlabel,$min;
    %histo=( "value"=> \@h,
	     "xlabel"=> \@xlabel,
	     "binsize"=> undef
	   );
    return \%histo;
  }

  my $binsize = ($max-$min)/$nbins;
  if ($binsize <=0) {
    print STDERR "Error: Binsize=$binsize,  min=$min   max=$max  # datapoints:". $#{@{$data}}+1 . " nbins=$nbins\n";
    print "DATA: " . join(", ",@{$data}) . "\n";
    return undef;
  }

  for(my $n=0; $n<$nbins; $n++) {
    $xlabel[$n] = $min + ($n+0.5) * $binsize;
    $h[$n]=0;
  }

  my $bin;
  foreach my $x (@{$data}) {
    $bin = int(($x - $min)/$binsize);
    $h[$bin]++;
  }

  # need to add topmost bin to bin n-1
  $h[$nbins-1] += $h[$nbins];
  pop @h;

  $histo{value}=\@h;
  $histo{xlabel}=\@xlabel;
  $histo{binsize}=$binsize;

  return \%histo;
}

sub printTimeHisto {
  my $h = shift;

  for(my $i=0;$i<= $#{@{$h->{value}}};$i++) {
    printf("     %6d   %s\n",$h->{value}[$i],    strftime("%Y-%m-%d %H:%M:%S",localtime($h->{xlabel}[$i])));
  }
}



# This function I use to replace ParseDateString of
# Date::Manip.
# It can handle these formats:

# my @tests= ("2007-05-08 09:28:22","1970-01-01 00:00:00",
#	    "2007-05-08",
# 	    "-4hours","- 1 hour",
# 	    "-1 day", "-3days",
# 	    "now","yesterday"
# 	    );
sub DateToUnixEpochSeconds {
    my $date = shift;

    my $unixs=undef;
    my ($Y,$M,$D,$h,$m,$s)=(0,0,0,0,0,0);

    if( (($Y,$M,$D,$h,$m,$s) = $date =~ m/\s*(\d+)-(\d+)-(\d+)\s*(\d+)?:?(\d+)?:?(\d+)?/) ) {
	die "strange month number in date ($M)? Date was: $date\n"if $M < 0 or $M >12;
	$unixs=strftime("%s",$s, $m, $h, $D, $M-1, $Y-1900, -1, -1, -1);
    } elsif( (($D) = $date =~ m/^\s*-\s*(\d+)\s*days?$/) ) {
	$unixs = time() - 24*3600*$D;
    } elsif( (($h) = $date =~ m/^\s*-\s*(\d+)\s*hours?$/) ) {
	$unixs = time() - 3600*$h;
    } elsif( (($m) = $date =~ m/^\s*-\s*(\d+)\s*mins?$/) ) {
	$unixs = time() - 60*$m;
    } elsif( $date =~ /^\s*now\s*$/) {
	$unixs = time();
    } elsif( $date =~ /^\s*yesterday\s*$/) {
	$unixs = time() - 24*3600;
    } else {
	warn "Error: Unknown date format: $date\n";
        #$unixs = "UNKNOWN_DATE";
    }
    return $unixs;
}

#!/usr/bin/env perl

##H Show information on running agents in TMDB
##H
##H Options:
##H      -db :  DBParam file (required)
##H    -node :  Filter on node name
##H   -agent :  Filter on agent name
##H   -label :  Filter on agent label
##H     -pid :  Filter on process ID
##H -release :  Filter on the release version
##H    -plog :  Filter on process log
##H
##H Filters use SQL wildcard characters '%' and '_'

use Getopt::Long;

use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Formats;
use PHEDEX::Core::Timing;

my %args;
&GetOptions ("db=s"            => \$args{DBCONFIG},
	     "node=s"          => \$args{NODE},
	     "agent=s"         => \$args{AGENT},
             "label=s"         => \$args{LABEL},
	     "pid=s"           => \$args{PID},
	     "release=s"       => \$args{RELEASE},
	     "plog=s"          => \$args{PLOG},
	     "help|h"          => sub { &usage() });

# Check arguments.
if (!$args{DBCONFIG})
{
  die "Insufficient parameters, use -h for help.\n";
}

my $self = { DBCONFIG => $args{DBCONFIG} };
my $dbh = &connectToDatabase ($self);
my $now = &mytimeofday();

my $sql = qq{
    select * from (
      select 
        n.name node_name,
        a.name agent_name,
        s.label agent_label,
        s.host_name,
        s.process_id,
        s.time_update status_update,
        l.time_update log_update,
        v.filename,
        v.release,
        v.revision,
        v.tag,
        l.reason log_reason,
        l.message log_process,
        rank() over (partition by s.host_name, a.name, s.label
                     order by n.name, a.name, l.time_update desc) rn
      from t_agent_status s
      join t_agent a on a.id = s.agent
      join t_adm_node n on n.id = s.node
      join t_agent_log l 
        on l.host_name = s.host_name
       and l.process_id = s.process_id
 left join t_agent_version v
        on v.agent = a.id
       and v.node = n.id
       and v.filename = a.name
  order by n.name, a.name, s.label, s.process_id
    ) where rn = 1
};

my @where;
my %binds;

if ($args{NODE}) {
    push @where, 'node_name like :node';
    $binds{':node'} = $args{NODE};
}

if ($args{AGENT}) {
    push @where, 'agent_name like :agent';
    $binds{':agent'} = $args{AGENT};
}

if ($args{LABEL}) {
    push @where, 'agent_label like :label';
    $binds{':label'} = $args{LABEL};
}

if ($args{PID}) {
    push @where, 'process_id = :pid';
    $binds{':pid'} = $args{PID};
}

if ($args{RELEASE}) {
    push @where, 'release like :release';
    $binds{':release'} = $args{RELEASE};
}

if ($args{PLOG}) {
    push @where, 'log_process like :plog';
    $binds{':plog'} = $args{PLOG};
}


if (@where) { $sql .= join(' and ', '', @where); }

$dbh->{LongReadLen} = 10_000;
my $q = &dbexec($dbh, $sql, %binds);

while (my $agent = $q->fetchrow_hashref()) {
    $agent->{LAST_UPDATE} = &age($now - $agent->{STATUS_UPDATE}). " ago";

    $agent->{$_} = &formatTime($agent->{$_}, 'stamp') . " ($agent->{$_})"
	foreach (qw(STATUS_UPDATE LOG_UPDATE));

    print '=' x 80, "\n";
    foreach (qw(NODE_NAME AGENT_NAME AGENT_LABEL HOST_NAME PROCESS_ID 
		RELEASE STATUS_UPDATE LOG_UPDATE LAST_UPDATE)) {
	printf("%15s:  %s\n", lc $_, $agent->{$_});
    }
    print '- ' x 40, "\n";
    printf("%15s:  %s\n", lc $_, $agent->{$_}) foreach (qw(LOG_REASON LOG_PROCESS));
}

&disconnectFromDatabase($self, $dbh, 1);

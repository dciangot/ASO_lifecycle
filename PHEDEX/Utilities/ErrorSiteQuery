#!/usr/bin/env perl

###############################################################################
# Script to analyze the PhEDEx download error logs in TMDB with sites as the
# main selection criterion
#
# Author: Derek Feichtinger <derek.feichtinger@psi.ch>
#
# Version info: $Id: ErrorSiteQuery,v 1.3 2008/06/20 12:27:09 trunov Exp $:
###############################################################################

use Getopt::Long;
use POSIX qw(strftime);
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Timing;
use PHEDEX::Error::Classify;
use PHEDEX::Error::Report;

use strict;
#use re 'debug';

######################################################################
# This DummyLogger is necessary because using of the PhEDEx DB calls requires
# passing of an object with a Hdr function. Newer perl versions
# seem not to accept a unblessed HASH (which is only correct).
package DummyLogger;
use Data::Dumper;

sub new {
  my $class = shift;
  my $self  = { LOG => 0 };

  bless ($self, $class);
  return $self;
}

# sub Logmsg {
#   my $self=shift;
#   my $msg = shift;

#   return if ! $self->{LOG};
#   my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
#   my $date = sprintf("%4d-%02d-%02d %02d:%02d:%02d",1900+$year,
# 		     $mon+1,$mday,$hour,$min,$sec);
#   print STDERR "(LOG) $date: $msg\n";

# }

sub Hdr {
   my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
   my $date = sprintf("%4d-%02d-%02d %02d:%02d:%02d",1900+$year,
 		     $mon+1,$mday,$hour,$min,$sec);
     return "(LOG) $date: ";
}

1;

#######################################################################
package main;


############ DEFAULTS ########################
my $starttime="-10 days";
my $max_results=100;
my $errmsglen=200; # max length of characters to consider for error class
my $dbg=0;
##############################################

sub usage {
  print <<"EOF";
  Name: ErrorSiteQuery - Classify errors from the PhEDEx DB

  Synopsis: ErrorSiteQuery --db DBParamfile:instance [options]

  Description:
   This script will perform a query on the recent error logs stored in the
   PhEDEx TMDB. It will try to collect errors in classes.

  options:
   'expr' is a placeholder for a SQL search expression. Use '%' as a wildcard
   character.

    Configuration options:
      --db  file:instance      :  location of a PhEDEx DBParam file and on which
                                  instance to run
    Selection options:
      -s date                  :  date of oldest error logs to be considered
      -m, --maxresults  number :  specifies maximal number of records to retrieve
      --src  expr              :  match on source site name
      --dst  expr              :  match on destination site name
      
    Output options:
      -d, --debug              :  debug output (can be used multiple times: -d -d)
      -f filename              :  produces output in XML format into specified file

Examples:
   ErrorSiteQuery --db /home/phedex/DBParam.MYSITE:Debug/MYSITE --src "%CSCS%" -m 500 -s "-12 hours"

EOF
}


########## MAIN ################################

my $max_log_length = 100_000;
my $search_xferlog=0;
my $dst_site=undef;
my $src_site=undef;
my $xmloutfile=undef;


my %args;
GetOptions (
	    "db=s"        => \$args{DBCONFIG},
	    "debug|d" => sub { $dbg++; },
            "dst=s" => \$dst_site,
            "src=s" => \$src_site,
	    "s=s" => \$starttime,
	    "maxresults|m=i", \$max_results,
	    "f=s", \$xmloutfile,
	    "help|h"      => sub { usage(); exit 0; }
	   );


unless ($args{DBCONFIG}) {
    usage();
    die "Error: you need to specify the --db option\n";
}


my $conn = new DummyLogger;
$conn->{DBCONFIG}=$args{DBCONFIG};
$conn->{LOG}=1;

my $dbh = connectToDatabase($conn);

$dbh->{LongReadLen} = $max_log_length;
$dbh->{LongTruncOk} = 1;

my $t_start=DateToUnixEpochSeconds($starttime);
my $t_end = time();

my $resparams="";
$resparams.=",log_xfer " if $search_xferlog;

#$resparams = qq{,time_xfer, report_code, xfer_code, from_pfn, to_pfn};


my $where_clause="time_done > :tstart";
$where_clause .= " and ns.name LIKE :src_site "if(defined $src_site);
$where_clause .= " and nd.name LIKE :dst_site "if(defined $dst_site);

my $sql = qq{select * from (
  select ns.name from_node, nd.name to_node, time_done, log_detail
  $resparams
  from t_xfer_error xe
  join t_adm_node nd on nd.id = xe.to_node
  join t_adm_node ns on ns.id = xe.from_node
  where $where_clause
  ) where rownum <= :maxresults
 };

my $sth = dbprep($dbh, $sql);
my @handlearr=($sth,
	   ':tstart' => $t_start,
	   ':maxresults' => $max_results);
push @handlearr,(":src_site" => $src_site) if(defined $src_site);
push @handlearr,(":dst_site" => $dst_site) if(defined $dst_site);

dbbindexec(@handlearr);

my %errinfo;
my $nrows=0;
my  $nprimaryrows=0;

my $starttime = 2_000_000_000;
my $endtime = 0;

while (my $row = $sth->fetchrow_hashref()) {
  $nprimaryrows++;

  #print "DEBUG: $row->{TIME_DONE}       " .localtime($row->{TIME_DONE})." \n";
  my $reason=ErrorClassify($row->{LOG_DETAIL},$errmsglen);
  $errinfo{$row->{FROM_NODE}}{$row->{TO_NODE}}{$reason}{num}++;
  push @{$errinfo{$row->{FROM_NODE}}{$row->{TO_NODE}}{$reason}{time}}, $row->{TIME_DONE};
  $starttime = $row->{TIME_DONE} if ($row->{TIME_DONE} < $starttime);
  $endtime = $row->{TIME_DONE} if ($row->{TIME_DONE} > $endtime);  
}

disconnectFromDatabase($conn, $dbh, 1);

print "Results starting from date $t_start  " . localtime($t_start) ."\n";
print "Number of results: $nprimaryrows (of max $max_results)\n";
foreach my $from (sort {$a <=> $b} keys %errinfo) {
  foreach my $to (sort {$a <=> $b} keys %{$errinfo{$from}}) {
    print "\n\n**** from $from to $to:\n";
    foreach my $reason (sort { $errinfo{$from}{$to}{$b}{num} <=> $errinfo{$from}{$to}{$a}{num} } keys %{$errinfo{$from}{$to}}) {
      printf("   %4d   $reason\n",$errinfo{$from}{$to}{$reason}{num});
    }
  }
}

my %a;

&XMLout(\%errinfo, \%a, $xmloutfile, 
	STARTTIME=>$starttime, ENDTIME=>$endtime, 
	STARTLOCALTIME=>scalar localtime($starttime), ENDLOCALTIME=>scalar localtime($endtime), 
	GIVENSTARTTIME=>scalar localtime($t_start), GIVENENDTIME=>scalar localtime($t_end),
	GETERRORORIGIN=>1) if ($xmloutfile);

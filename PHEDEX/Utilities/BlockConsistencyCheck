#!/usr/bin/env perl
use strict;

##H
##H  Compare file size (and checks tape migration if possible) for files on
##H  storage vs. TMDB for blocks or datasets
##H
##H  Check the PhEDEx Consistency tools page for more documentation. In
##H  particular, it will contain examples and clarifications to the basic
##H  information here. The page is in the CMS Twiki at
##H  https://twiki.cern.ch/twiki/bin/view/CMS/PhedexProjConsistency
##H
##H   Usage:
##H
##H   BlockConsistencyCheck -db DBCONFIG -buffer BUFFER -tfc TFC
##H                         -namespace NAMESPACE
##H                        [-dataset DATASET] [-block BLOCK] [-lfnlist LFNLIST]
##H                        [-tfcprotocol TFCPROTOCOL]
##H                        [-verbose]
##H                        [-dumpstats DUMPFILE]
##H 
##H   DBCONFIG is the usual PhEDEx DB contact file.
##H
##H   TFC is the path to your trivial file catalogue
##H
##H   NAMESPACE is the namespace plugin to use to access the storage.
##H   It should be a valid plugin defined in PHEDEX/perl_lib/PHEDEX/Namespace
##H
##H   BUFFER is the name of one or more buffers that you wish to verify.
##H   If you specify more than one buffer, they should support access by
##H   the same technology (rfio, srm, ...). You can specify multiple
##H   buffers as a comma-separated list, or using the '%' character as a
##H   wildcard, or by repeating the --buffer option, or any combination of
##H   the three.
##H
##H   One of DATASET, BLOCK, or LFNLIST is obligatory. These also support multiple
##H   values as comma-separated lists, or using the '%' wildcard, or by
##H   repeating the option.
##H 
##H   LFNLIST is a file containing full LFNs as found in your storage
##H   element, one lfn per line. Anything before the '/store/' part is
##H   ignored, anything after it is taken to be the full LFN.
##H   If LFNLIST is given as '-', the script will read from stdin.
##H   Gzipped (*.gz) or bzipped (*.bz2) files can be read directly,
##H   allowing for compact filelists.
##H
##H   You can use the DATASET, BLOCK, and LFNLIST options together, in
##H   which case the script will take both into account.
##H
##H   TFCPROTOCOL is the protocol by which LFNs are converted to PFNs. By
##H   default, the default protocol defined by your namespace plugin is used,
##H   usually 'direct'.
##H
##H   The dumpstats option will perform all the TMDB magic, then instead of
##H   analysing the results and printing the summary, it will dump them to the
##H   named DUMPFILE as a Perl Data::Dumper structure, and exit. This can then
##H   be eval'ed in another program for independant analysis. The data-format
##H   is not standardised, and is subject to change without warning, so do not
##H   rely on it for major work without negotiating with the PhEDEx developers
##H   beforehand.
##H
##H   EXAMPLES:
##H
##H   BlockConsistencyCheck -db ~/private/DBParam:Prod/Reader
##H      -buffer T1_CERN_%
##H      -block '/Minbias/CMSSW_1_4_3-CSA07-1911/GEN-SIM#ff6c979f-377f-47e2-af3b-ec7841baa581'
##H      --tfc ~/public/COMP/SITECONF/CERN/PhEDEx/storage.xml
##H   
##H   BlockConsistencyCheck -db ~/private/DBParam:Prod/Reader
##H      -buffer T1_CERN_%
##H      -block '/Minbias/CMSSW_1_4_3-CSA07-1911/GEN-SIM#ff6c979f%'
##H      --tfcprotocol srm
##H      --tfc ~/public/COMP/SITECONF/CERN/PhEDEx/storage.xml
##H   
##H

# Process command line arguments.
use Getopt::Long;
use Data::Dumper;
use File::Basename;
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Catalogue;
use PHEDEX::Core::Loader;
use PHEDEX::BlockConsistency::SQL;

my ($dbh);
my ($verbose,$debug,$terse);
my (%h,$conn,$dumpstats,$readstats,$msscache,%msscache);
my ($DBCONFIG,%check,@check,$autoBlock);
my (@DATASET,@BLOCK,@LFN,@BUFFER);
my (@dataset,@block,@lfn,@buffer,@bufferIDs);
my ($callout,$callouton,%calloutonAllowed);
my ($data,$lfn,$lfnlist,$wide);
my ($tfcprotocol,$tfc,$namespace,$module,$loader,$ns);
my ($SQL,$incomplete_blocks,$preload);
my $debug_me = 1;

%check = (
		'size'		=> 1,
 		'migration'	=> 0,
#	        'ondisk'        => 0,
#		'cksum'		=> 0,
#		'dbs'		=> 0,
	 );

$verbose = $debug = $terse = $autoBlock = 0;
$callouton   = '';
%calloutonAllowed = ( failure => 1, success => 1, all => 1);
$incomplete_blocks = 0;

GetOptions("db=s"           => \$DBCONFIG,
           "block=s@"       => \@BLOCK,
           "dataset=s@"     => \@DATASET,
           "lfn=s@"         => \@LFN,
           "lfnlist=s"      => \$lfnlist,
	   "buffer=s@"	    => \@BUFFER,
	   "tfc=s"	    => \$tfc,
	   "namespace=s"    => \$namespace,
	   "tfcprotocol=s"  => \$tfcprotocol,

	   "check=s@"	    => \@check,

           "verbose|v+"     => \$verbose,
           "debug+"         => \$debug,
           "autoBlock"      => \$autoBlock,
           "terse"          => \$terse,
           "readstats=s"    => \$readstats,
           "dumpstats=s"    => \$dumpstats,
           "msscache=s"     => \$msscache,

           "wide"           => \$wide,
           "callout=s"      => \$callout,
           "callouton=s"    => \$callouton,

           "incomplete-blocks" => \$incomplete_blocks,
	   "preload=s"	    => \$preload,

           "help|h"         => sub { &usage() }
	  );


die "NAMESPACE argument must be specified\n" unless $namespace;

my $catalogue = PHEDEX::Core::Catalogue->new($tfc);

$loader = PHEDEX::Core::Loader->new( NAMESPACE => 'PHEDEX::Namespace',
				     REJECT    => [ qw / common namespace spacecountcommon / ] );

$module = $loader->Load($namespace);

$ns = $module->new(	VERBOSE	=> $verbose,
			DEBUG	=> $debug,
			PRELOAD	=> $preload,
			CATALOGUE => $catalogue,
			PROTOCOL => $tfcprotocol,
			);

if ( $callouton && ! exists($calloutonAllowed{$callouton}) )
{
  die "callouton='$callouton' not valid. Legal values are: '",
       join("', '",keys %calloutonAllowed), "'\n";
}
if ( $callout && !$callouton ) { $callouton = 'success'; }

# Check arguments.
if( !$DBCONFIG ||
    !@BUFFER   ||
    ( !@BLOCK      &&
      !@DATASET    &&
      !@LFN	   &&
      !$lfnlist
    ) ||
    !$tfc
  )
{
  die "Insufficient parameters, use -h for help.\n";
}

#-------------------------------------------------------------------------------
if ($lfnlist) {
    if ( $lfnlist =~ m%.gz$% )
    { open LFN, "cat $lfnlist | gzip -d - |" or die "open: $lfnlist: $!\n"; }
    elsif ( $lfnlist =~ m%.bz2$% )
    { open LFN, "cat $lfnlist | bzip2 -d - |" or die "open: $lfnlist: $!\n"; }
    elsif ( $lfnlist =~ m%^-$% )
    { *LFN = *STDIN; }
    else
    { open LFN, "<$lfnlist" or die "open: $lfnlist: $!\n"; }
    
    while ( <LFN> )
    {
	chomp;
	$debug && print "Read: $_\n";;
	s%^.*/store%/store%;
	s%\s.*$%%;
	push @LFN, $_;
    }
}

#-------------------------------------------------------------------------------
# Which integrity checks are we going to run?
foreach ( split m|[,\s*]|, "@check" )
{
  my $v = 1;
  if ( s%^no%% ) { $v = 0; }
  my $k = lc($_);

  if ( !defined($check{$k}) )
  {
    print "Unknown check \"$_\" requested. Known checks are: ",
	join(', ',
		map { "\"$_\"(" . $check{$_} . ")" } sort keys %check),
	"\n";
    exit 1;
  }
  $check{$k} = $v;
}

my $nchecks=0;
$verbose >= 2 && print "Perform the following checks:\n";
foreach ( sort keys %check )
{
  $verbose >= 2 && printf " %10s : %3s\n", $_, ($check{$_} ? 'yes' : 'no');
  $nchecks += $check{$_};
}
die "Woah, nothing to check!\n" unless $nchecks;

#-------------------------------------------------------------------------------
#
# First, traverse-forward, expanding the arguments from the command line and
# finding the lower strata (buffers->datasets->blocks, blocks->lfns etc)
#
# Then, go backwards, and for all lfns make sure a block is known, for all
# blocks that a dataset is known, etc...
#

goto CHEAT if $readstats;
$conn = { DBCONFIG => $DBCONFIG };
$dbh = &connectToDatabase ( $conn );
$SQL = PHEDEX::BlockConsistency::SQL->new( DBH => $dbh );

#-------------------------------------------------------------------------------
# Buffers first...
# Expand the Buffer argument...
@buffer = split m|[,\s*]|, "@BUFFER";
foreach my $buffer ( @buffer )
{
  $debug && print "Getting buffers with names like '$buffer'\n";
  my $tmp = $SQL->getBuffersFromWildCard($buffer);
  map { $h{Buffers}{ID}{$_} = $tmp->{$_} } keys %$tmp;
}
$debug && exists($h{Buffers}{ID}) && print "done getting buffers!\n";
@bufferIDs = sort keys %{$h{Buffers}{ID}};
@bufferIDs or die "No buffers found matching \"@BUFFER\", typo perhaps?\n";

#-------------------------------------------------------------------------------
# Datasets next...

#
# Here I cheat. Dataset names are simply short forms of block names, so I
# add a wildcard to the dataset name and call it a block!
#
# Cunning, eh?
#

@dataset = split m|[,\s*]|, "@DATASET";
@block = map { $_ . '%' } @dataset;

#-------------------------------------------------------------------------------
# Blocks next...

# Expand the BLOCK argument...
push @block, split m|[,\s*]|, "@BLOCK";
$DB::single=1;
if ( @block )
{
# Find those I want and mark them, then GC the rest...
  my %g;
  foreach my $block ( @block )
  {
    $debug && print "Getting blocks with names like '$block'\n";
    my $complete_blocks = $incomplete_blocks ? 0 : 1;
    my $tmp = $SQL->getBlockReplicasFromWildCard(
                                             BLOCK => $block,
                                             NODES => \@bufferIDs,
                                             COMPLETE_BLOCKS => $complete_blocks,
					  );
    map { $g{$_->{NAME}}++ } values %{$tmp};
    map { $h{Blocks}{$_->{NAME}} = {} } values %{$tmp};
  }
  foreach my $block ( keys %{$h{Blocks}} )
  {
    if ( ! defined($g{$block}) )
    {
      my $data = $h{Blocks}{$block}{Dataset};
      delete $h{Datasets}{$data}{Blocks}{$block};
      delete $h{Blocks}{$block};
    }
  }
}

#-------------------------------------------------------------------------------
# Expand the LFN argument
@lfn = split m|[,\s*]|, "@LFN";
foreach my $lfn ( @lfn )
{
  $verbose >= 3 && print "Getting lfns with names like '$lfn'\n";
  my $tmp = $SQL->getLFNsFromWildCard($lfn);
  map { $h{LFNs}{$_} = {} } @$tmp;
}

foreach my $lfn ( keys %{$h{LFNs}} )
{
  next if exists($h{LFNs}{$lfn}{Block});
  my $tmp = $SQL->getBlocksFromLFNs($lfn);
  map { $h{LFNs}{$lfn}{Block} = $_   } @$tmp;
  map { $h{Blocks}{$_}{LFNs}{$lfn}++ } @$tmp;
}
$debug && defined($h{LFNs}) && print "done getting LFNs!\n";

#-------------------------------------------------------------------------------
# Fill in relationships between Blocks and Datasets or LFNs. Do this after
# inserting LFNs because then {Blocks}{$b}{LFNs} will exist, so blocks which
# are inserted only because they match LFNs will not be expanded!
foreach my $block ( keys %{$h{Blocks}} )
{
  if ( !defined($h{Blocks}{$block}{Dataset}) )
  {
#   Set up Block<->Dataset mapping
    my $tmp = $SQL->getDatasetsFromBlocks($block);
    map { $h{Datasets}{$_}{Blocks}{$block}++ } @$tmp;
    map { $h{Blocks}{$block}{Dataset} = $_   } @$tmp;
  }

  if ( $autoBlock || !defined($h{Blocks}{$block}{LFNs}) )
  {
#   Set up Block<->LFN mapping
    my $tmp = $SQL->getLFNsFromBlocks($block);
    map { $h{LFNs}{$_}{Block} = $block   } @$tmp;
    map { $h{Blocks}{$block}{LFNs}{$_}++ } @$tmp;
  }
}

$debug && print "done getting block-lfn mapping!\n\n";
printf "Got %8d Buffers\n",  scalar keys %{$h{Buffers}{ID}};
printf "Got %8d Datasets\n", scalar keys %{$h{Datasets}};
printf "Got %8d Blocks\n",   scalar keys %{$h{Blocks}};
printf "Got %8d LFNs\n",     scalar keys %{$h{LFNs}};

#-------------------------------------------------------------------------------
# Now to start extracting information to check against the storage
foreach my $lfn ( keys %{$h{LFNs}} )
{
  $debug and print "Getting TMDB stats for $lfn\n";
  my $tmp = $SQL->getTMDBFileStats($lfn);
  map { $h{LFNs}{$lfn}{lc($_)} = $tmp->{$_} } keys %{$tmp};
}

#-------------------------------------------------------------------------------
# All TMDB lookups are done, from here on I compare with storage
$dbh->disconnect();

#-------------------------------------------------------------------------------
# Get the information needed for checking...

my ($t,$step,$last,$etc);
$step = 1;
$last = $t = 0;
if ( $check{size} || $check{migration} || $check{ondisk} )
{
# Determine the castor size and migration status of the LFNs...
  my ($i,$j);
  $i = scalar keys %{$h{LFNs}};
  foreach $lfn ( keys %{$h{LFNs}} )
  {
    $j++;
    $h{SE}{$lfn} = $msscache{$lfn} if exists($msscache{$lfn});
    next if defined $h{SE}{$lfn};

    if ( time - $t > 1 )
    {
      print STDERR "Getting SE stats: file $j / $i";
      $t = time;
      if ( $last )
      {
        $etc = int( 10 * $step * ($i-$j)/($j-$last) ) / 10;
        print STDERR ". Done in $etc seconds  ";
      }
      $last = $j;
      print STDERR "\r";
    }

    $h{SE}{$lfn} = {};

    my $sesize = $ns->size($lfn);
    if ( defined($h{SE}{$lfn}{size} = $sesize) )
    {
	if ($ns->{MAP}->{is_migrated})
	{
	    $h{SE}{$lfn}{migration} = $ns->is_migrated($lfn);
	}
    }
  }
}
print STDERR "\n";

#-------------------------------------------------------------------------------
# Has the user requested that we dump the hash for future use?
if ( $dumpstats )
{
  open DUMP, ">$dumpstats" or die "Cannot open \"$dumpstats\" for writing\n";
  print DUMP Data::Dumper->Dump([ \%h ], [ 'h' ]);
  close DUMP;
  print "TMDB data dumped to \"$dumpstats\"\n";
  exit 0;
}

CHEAT:
if ( $readstats )
{
  eval
  {
    do "$readstats";
    map { $h{$_} = delete $main::h->{$_} } keys %{$main::h};
  };
  if ( $@ )
  {
    die "Cannot read $readstats: $@\n";
    exit 1;
  }
}

#-------------------------------------------------------------------------------
# Now to start doing the checks.
if ( $check{size} )
{
  foreach $lfn ( keys %{$h{SE}} )
  {
#   Don't care about files not in TMDB
    next unless exists $h{LFNs}{$lfn};


    my $block   = $h{LFNs}{$lfn}{Block} or
				 die "Cannot determine block for $lfn\n";
    my $dataset = $h{Blocks}{$block}{Dataset} or
				 die "Cannot determine dataset for $block\n";

    my ($field);
    if ( defined($h{SE}{$lfn}{size}) )
    {
      if ( $h{LFNs}{$lfn}{size} == $h{SE}{$lfn}{size} ) { $field = 'OK'; }
      else { $field = 'SizeMismatch'; }
      $h{Checks}{size}{Dataset}{$dataset}{size} += $h{LFNs}{$lfn}{size};
      $h{Checks}{size}{Blocks} {$block}  {size} += $h{LFNs}{$lfn}{size};
#      $_ = dirname $lfn;
#      $h{Checks}{Paths}{Dataset}{$dataset}{$_}++;
#      $h{Checks}{Paths}{Blocks} {$block}  {$_}++;
    }
    else { $field = 'Missing'; }
    $h{Checks}{size}{Dataset}{$dataset}{$field}++;
    $h{Checks}{size}{Blocks} {$block}  {$field}++;
    $h{Checks}{size}{LFNs}   {Total}   {$field}++;

    if ( $field ne 'OK' ) { $h{Detail}{$dataset}{$block}{$lfn}{$field}++; }
    $h{LFNs}{$lfn}{$field}++;
  }
}

if ( $check{migration} )
{
  foreach $lfn ( keys %{$h{SE}} )
  {
#   Don't care about files not in TMDB
    next unless exists $h{LFNs}{$lfn};


    my $block   = $h{LFNs}{$lfn}{Block} or
				 die "Cannot determine block for $lfn\n";
    my $dataset = $h{Blocks}{$block}{Dataset} or
				 die "Cannot determine dataset for $block\n";

    my $field = 'Errors';
    if ( defined($h{SE}{$lfn}{migration}) )
    {
      $field = $h{SE}{$lfn}{migration} ? 'OK' : 'NotOnTape';
    }
    else { $field = 'Missing'; }
    $h{Checks}{migration}{Dataset}{$dataset}{$field}++;
    $h{Checks}{migration}{Blocks} {$block}  {$field}++;
    $h{Checks}{migration}{LFNs}   {Total}   {$field}++;

    if ( $field ne 'OK' ) { $h{Detail}{$dataset}{$block}{$lfn}{$field}++; }
  }
}

if ( $check{ondisk} )
{
  foreach $lfn ( keys %{$h{SE}} )
  {
#   Don't care about files not in TMDB
    next unless exists $h{LFNs}{$lfn};


    my $block   = $h{LFNs}{$lfn}{Block} or
				 die "Cannot determine block for $lfn\n";
    my $dataset = $h{Blocks}{$block}{Dataset} or
				 die "Cannot determine dataset for $block\n";

    my $field = 'Errors';
    if ( defined($h{SE}{$lfn}{ondisk}) )
    {
      $field = $h{SE}{$lfn}{ondisk} ? 'OnDisk' : 'NotOnDisk';
    }
    else { $field = 'Missing'; }
    $h{Checks}{ondisk}{Dataset}{$dataset}{$field}++;
    $h{Checks}{ondisk}{Blocks} {$block}  {$field}++;
    $h{Checks}{ondisk}{LFNs}   {Total}   {$field}++;

    if ( $field ne 'OnDisk' ) { $h{Detail}{$dataset}{$block}{$lfn}{$field}++; }
  }
}

# Print report
print "\n";
my ($check,$k,$l,$m);
foreach $k ( qw / LFNs Blocks Dataset / )
{
  print "#------------------------------------------------------------------\n";
  print " ==> summarising $k\n";
  foreach $check ( sort keys %{$h{Checks}} )
  {
    print " checking \"$check\"\n\n";
    foreach $l ( sort keys %{$h{Checks}{$check}{$k}} )
    {
      print $wide ? "check=$check $k=$l " : " $l\n";
      foreach $m ( sort keys %{$h{Checks}{$check}{$k}{$l}} )
      {
        if ( $m eq 'size' )
        {
          next unless $verbose;
          my $n = $h{Checks}{$check}{$k}{$l}{$m};
          $n = int($n*100/1000/1000/1000)/100;
          $h{Checks}{$check}{$k}{$l}{$m} = "$n GB";
        }
        print " $m=",$h{Checks}{$check}{$k}{$l}{$m};
      }
      print "\n\n";
    }
  }
}

print "#------------------------------------------------------------------\n";
if ( ! keys %{$h{Detail}} )
{
  print "There were no failures detected!\n";
}
elsif ( $verbose )
{
  print " Detailed list of failures:\n";
  foreach my $dataset ( sort keys %{$h{Detail}} )
  {
    print " ==> Dataset=$dataset\n";
    foreach my $block ( sort keys %{$h{Detail}{$dataset}} )
    {
      print " ==> Block=$block\n";
      foreach my $lfn ( sort keys %{$h{Detail}{$dataset}{$block}} )
      {
        print "     LFN=$lfn ";
        print join(' ', sort keys %{$h{Detail}{$dataset}{$block}{$lfn}} ),"\n";
      }
    }
  }
}

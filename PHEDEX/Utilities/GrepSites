#!/usr/bin/env perl

##H Create a simple text file of sites, contacts, and nodes 
##H from data in site request emails.  This file is to be scrutinized and 
##H edited by someone in-the-know, then passed on to the ImportSites script
##H
##H Usage:
##H   GrepSites -db DBCONFIG [email files]
##H
##H Examples:
##H   GrepSites -db Schema/DBParam:Foo \
##H     phedex_minnesota_prod:jmmans@physics.umn.edu

# Process command line arguments.
my %args;
use Getopt::Long;
use File::Basename;
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Timing;
&GetOptions ("db=s"            => \$args{DBCONFIG},
	     "help|h"          => sub { &usage() });

# Check arguments.
if (!$args{DBCONFIG})
{
  die "Insufficient parameters, use -h for help.\n";
}

my $self = { DBCONFIG => $args{DBCONFIG} };
my $dbh = &connectToDatabase ($self);

# Get a list of nodes
my %nodes;
my $q = &dbexec($dbh, qq{
    select id, name from t_adm_node
});

while (my ($id, $name) = $q->fetchrow_array) {
    $nodes{$name}{ID} = $id;
    $nodes{$name}{USED} = 0;
}

# Iterate through the files
my @unusedsites;
foreach my $file (@ARGV) {
    # Get the site and email from the filename
    my $filebase = basename($file);
    next if ($filebase !~ /^phedex/ or $filebase =~ /\~$/);
    my ($site, $email) = split /:/, $filebase;
    $site =~ s/^phedex_//;
    $site =~ s/_prod$//; # XXX: Incompatible with Dev directory

    # Get the dn and the role from the inside of the file
    my $dn = '';
    my $role = '';
    open FILE, '<', $file or die $!;
    while (<FILE>) {
	chomp;
	if (/^\(/ && /\),$/) {
	    $dn = $_;
	    $dn =~ s/^\(//;
	    $dn =~ s/\),$//;
	}
	
	if (/using authentication role/) {
	    ($role) = ($_ =~ /authentication role (\w+)/);
	}
    }
    close FILE;

    # Try to associate nodes to site based on the site name
    my @sitenodes = grep /$site/i, keys %nodes;

    # Get propper site casing from nodes
    if (@sitenodes) {
	$nodes{$_}{USED} = 1 foreach @sitenodes;
	my ($propersite) = ($sitenodes[0] =~ /T\d+_(\w+)_\w+$/);
	$site = $propersite if ($propersite);
    } else {
	push @unusedsites, $site;
    }

    # Printout the information
    print 
	"site:  '$site'\n",
	"email: '$email'\n",
	"dn:    '$dn'\n",
	"role:  '$role'\n",
	"nodes: '", join(',', @sitenodes), "'\n",
	"\n";
}

# Report unused sites and nodes that were found
print join "\n  ", "Unused Nodes:", grep( !$nodes{$_}{USED}, sort keys %nodes);
print "\n\n";

print join "\n  ", "Unused sites:", sort @unusedsites;
print "\n";

&disconnectFromDatabase($self, $dbh, 1);

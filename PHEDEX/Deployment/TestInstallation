#!/usr/bin/env perl

##H This script tests the following requirements:
##H
##H 1. availability of transfer tools
##H 2. availability of Perl DBI modules and quick check they do work
##H 3. check grid certificate
##H
##H It is meant to provide a quick overview whether required tools are
##H available and set-up correctly.
##H
##H Usage:
##H   TestInstallation 
##H      [-help] -db DBCONFIG:DBNAME -poolcat POOLCATALOGUE
##H
##H -help:    Shows this help text
##H -db:      DB config file plus DBname to contact to
##H

use PHEDEX::Core::Help;
use Getopt::Long;

# get arguments
my %args = (DBTYPE => 'Oracle');
my $OK = 1;

&GetOptions ("help"       => \$args{HELP},
	     "db=s"       => \$args{DBConfig},
	     "poolcat=s"  => \$args{POOLCAT});

if ($args{HELP} || !$args{DBConfig})
{ &usage(); }

# get the DB config from the DBConfig file
my ($DBFile, $DBSection) = split(":", $args{DBConfig});
open (CONFFILE,"<$DBFile") or die "Couldn't open $DBFile";

my $rightsection = 0;
my @DBParams =();

foreach my $line (<CONFFILE>) {
    chomp $line;
    if ($line =~ m|Section|) {
	$rightsection = 1 if ($line =~ m|$DBSection|);
	$rightsection = 0 if ($line !~ m|$DBSection|);
    }

    if ($rightsection && $line =~ m|^Interface\s+(\S+)|) {
	$DBParams[0] = $1;
    } elsif ($rightsection && $line =~ m|Database\s+(\S+)|) {
	$DBParams[1] = $1;
    } elsif ($rightsection && $line =~ m|AuthDBUsername\s+(\S+)|) {
	$DBParams[2] = $1;
    } elsif ($rightsection && $line =~ m|AuthDBPassword\s+(\S+)|) {
	$DBParams[3] = $1;
    }
}
close(CONFFILE);

print "Interface: $DBParams[0]\n";
print "Database:  $DBParams[1]\n";
print "Username:  $DBParams[2]\n";
print "Password:  <censored>\n";

# execute one test after the other
# if one test fails it will return 0, making $OK also 0
$OK *= &testTools();
$OK *= &testOracle(@DBParams);
$OK *= &testGridCert();


# judge whether there is a chance to run successfully
print "\n";
if ($OK)
{
    print "Your setup seems to provide all requirements\n";
    print "Please check that all transfer methods you intended to use\n";
    print "are marked as working in the above listing\n";
}
else
{
    print "Your setup is missing some crucial parts. Please check !\n\n";
    exit 1;
}

exit 0;



#---------------------
# Test routines
#---------------------

sub testTools
{
    # try to identify and execute available transfer tools
    my %ttools = ('globus-url-copy'   =>'not available',
		  'srmcp'             =>'not available',
		  'rfcp'              =>'not available',
		  'dccp'              =>'not available');

    print "checking availability for ".scalar(keys(%ttools))." tools:\n";
    print "---------------------------------------------------------------------\n";
    foreach my $tool (keys %ttools)
    {
	# check if we find the binaries for that tool
	my $absent = system("which $tool >& /dev/null");
	$ttools{$tool} = 'binary exists in path, but execution failed' if ! $absent;
	
	# check if the tools are executable
	my $executable  = `sh -c '$tool -h 2>&1 |grep -i usage'` if !$absent;
	$ttools{$tool} = 'transfer tool available and executable' if $executable;
	
	#finally tell user the status of that tool
	print "$tool: $ttools{$tool}\n";
    }
    print "---------------------------------------------------------------------\n";
    return 0 if (!grep($_ !~ 'not available',(keys(%ttools)))); # report failure
    return 1; # report success
}

sub testOracle
{
    my ($DBType, $DBName, $DBUser, $DBPass) = @_;
    
    # ORACLE_HOME must be set properly
    my $ORACLE = $ENV{ORACLE_HOME};
    do {print "ORACLE_HOME is not set... Please set it correctly !!\n";
	print "---------------------------------------------------------------------\n";
	return 0} if !$ORACLE;

    # TNSAdmin must be set properly
    my $TNSADMIN = $ENV{TNS_ADMIN};
    do {print "TNS_ADMIN is not set...\n";
	print "I typically points to '<PhedexInstallDir>/Schema' !!\n";
	print "---------------------------------------------------------------------\n";
	return 0} if !$TNSADMIN;
    
    # make sure we find the DBI module....
    # PERL5LIB must be set properly
    my $PERL5LIB = $ENV{PERL5LIB};
    do {print "---------------------------------------------------------------------\n";
	print "PERL5LIB is not set ! It should include the DBI modules !\n";
	print "---------------------------------------------------------------------\n";
	return 0} if !$PERL5LIB;
    eval "use DBI";
    do {print "---------------------------------------------------------------------\n";
	print "DBI module wasn't found: $@ !!\n";
	print "---------------------------------------------------------------------\n";
	return 0} if ($@);  

    # try to use the DBD modules to connect and disconnect from TMDB
    eval
    {
	# now get the DBI module
	use DBI;
	#try connecting to the DB
	my $DBH = DBI->connect("DBI:$DBType:$DBName",
			       $DBUser, $DBPass,
			       { RaiseError => 1, AutoCommit => 0 })
	    or die "Couldn't connect to DB $DBName !!\n";
	# disconnect
	$DBH->disconnect() if $DBH;
    };
    do {print "Didn't succeed in using the DBD modules....\n";
	print "Error was: $@\n";
	print "---------------------------------------------------------------------\n";
	return 0} if $@;
    
    print "DBD perl modules found and successfully accessed TMDB\n";
    print "---------------------------------------------------------------------\n";
    return 1; #report success
}

sub testGridCert
{
    # check for grid-proxy-info command
    do {print "didn't find grid-proxy-info.... cannot check your certificate proxy\n";
	print "---------------------------------------------------------------------\n";
	return 0;} if system("which grid-proxy-info >& /dev/null");
    
    # use it and grep for time left
    my $timeleft = `grid-proxy-info |grep timeleft`;
    do {print "no certificate proxy found.... perform a grid-proxy-init\n";
	print "---------------------------------------------------------------------\n";
	return 0} if !$timeleft;
    my $timeout = grep(m|0:00:00|,$timeleft);
    do {print "certificate proxy timed out.... perform a new grid-proxy-init\n";
	print "---------------------------------------------------------------------\n";
	return 0} if $timeout;
    
    print "Grid certificate available and valid proxy found\n";
    print "---------------------------------------------------------------------\n";
    return 1; # report success
}

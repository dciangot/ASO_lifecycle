# Migration procedure applied to Debug instance **

# This migration should be able to be performed while site agents are still active
# Web services and central agents should be shut down for the instance, however.

# cd to a directory where the PHEDEX directory exists and there is an
# RPM installation

cd /data/DebugNodes

# Source environment
source sw/slc*/cms/PHEDEX-admin/PHEDEX_*/etc/profile.d/env.sh

# Checkout the Schema revision for 4.0

cvs co -d PHEDEX_CVS/Schema -r PHEDEX_4_0_0 COMP/PHEDEX/Schema

# Set authentication for DB access
export PHEDEX_INSTANCE=Debug;
export PHEDEX_DB="SITECONF/CH_CERN/PhEDEx/DBParam:${PHEDEX_INSTANCE}/Admin";
export PHEDEX_DB_R="SITECONF/CH_CERN/PhEDEx/DBParam:${PHEDEX_INSTANCE}/Reader";
export PHEDEX_DB_W="SITECONF/CH_CERN/PhEDEx/DBParam:${PHEDEX_INSTANCE}/CERN";
export PHEDEX_CON=$(PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB});
export PHEDEX_CON_R=$(PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB_R});
export PHEDEX_CON_W=$(PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB_W});
export PHEDEX_SCHEMA=$(echo $PHEDEX_CON | perl -p -e 's|/.*$||')
export PHEDEX_SCHEMA_R=$(echo $PHEDEX_CON_R | perl -p -e 's|/.*$||')
export PHEDEX_SCHEMA_W=$(echo $PHEDEX_CON_W | perl -p -e 's|/.*$||')
env | egrep 'PHEDEX_(DB|CON|SCHEMA)';

# Get rid of X tables
sqlplus -S $PHEDEX_CON @PHEDEX_CVS/Schema/OracleResetOld.sql </dev/null

# Connect to DB using SQLPlus
sqlplus $PHEDEX_CON

-- Deploying the schema over a 3.3 schema
-- From SQLPLUS

set serveroutput on size 100000;
set timing on;
spool migration.sqllog

-- create 'deprecated-undefined' group and store id in mygroup variable

var mygroup number;
var mygroupname varchar2(20);
set define off;

BEGIN
 :mygroupname := 'deprecated-undefined';
 insert into t_adm_group (id,name) values (seq_adm_group.nextval,:mygroupname) returning id into :mygroup;
 END;
/

print :mygroup;

select * from t_adm_group where id=:mygroup;

rename t_req_xfer to xt_req_xfer;

BEGIN
   --------------------
   -- Constraints
   FOR o IN
     (SELECT constraint_name name, table_name FROM user_constraints
      WHERE constraint_name NOT LIKE 'X%'
        AND constraint_name NOT LIKE 'SYS%'
        AND constraint_name LIKE '%_REQ_XFER%')
   LOOP
      dbms_output.put_line ('Renaming constraint ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter table ' || o.table_name
	  || ' rename constraint ' || o.name
	  || ' to X' || substr (o.name, 1, 29);
   END LOOP;

   --------------------
   -- Indices
   FOR o IN
     (SELECT index_name name, table_name FROM user_indexes
      WHERE index_name NOT LIKE 'X%'
        AND index_name NOT LIKE 'SYS%'
        AND index_name LIKE '%_REQ_XFER%')
   LOOP
      dbms_output.put_line ('Renaming index ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter index ' || o.name
	  || ' rename to X' || substr (o.name, 1, 29);
   END LOOP;
END;
/

-- recreate t_req_xfer table

create table t_req_xfer
  (request		integer		not null,
   priority		integer		not null,
   is_custodial		char(1)		not null,
   is_move		char(1)		not null,
   is_static		char(1)		not null,
   is_transient		char(1)		not null,
   is_distributed	char(1)		not null,
   user_group		integer		not null,
   time_start           float                   ,
   data			clob			,
   --
   constraint pk_req_xfer
     primary key (request),
   --
   constraint fk_req_xfer_req
     foreign key (request) references t_req_request (id)
     on delete cascade,
   --
   constraint fk_req_xfer_group
     foreign key (user_group) references t_adm_group (id),
   --
   constraint ck_req_xfer_custodial
     check (is_custodial in ('y', 'n')),
   constraint ck_req_xfer_move
     check (is_move in ('y', 'n')),
   constraint ck_req_xfer_static
     check (is_static in ('y', 'n')),
   constraint ck_req_xfer_transient
     check (is_transient in ('y', 'n')),
   constraint ck_req_xfer_distributed
     check (is_distributed in ('y', 'n'))
);

create index ix_req_xfer_group
  on t_req_xfer (user_group);

-- to migrate dev from 4.0.0pre3 to 4.0.0
-- insert /*+ append */ into t_req_xfer
-- (request,priority,is_custodial,is_move,is_static,is_transient,is_distributed,user_group,time_start,data)
-- select r.request, r.priority, r.is_custodial, r.is_move, r.is_static, r.is_transient, r.is_distributed, nvl(r.user_group,(select id from t_adm_group where name=':group')),r.time_start,r.data from xt_req_xfer r;

-- to migrate debug/prod from 3.3.2 to 4.0.0
-- fill old request table into new table
insert /*+ append */ into t_req_xfer
(request,priority,is_custodial,is_move,is_static,is_transient,is_distributed,user_group,time_start,data)
select r.request, r.priority, r.is_custodial, r.is_move, r.is_static, r.is_transient, r.is_distributed, nvl(r.user_group,:mygroup),NULL,r.data from xt_req_xfer r;

commit;

-- cross check old/new request tables

select count(*) from t_req_xfer;
select count(*) from xt_req_xfer;
select count(*) from t_req_xfer r
 join xt_req_xfer xr on xr.request=r.request and (xr.priority!=r.priority or xr.is_custodial!=r.is_custodial
  or xr.is_move!=r.is_move or xr.is_Static!=r.is_static or xr.is_transient!=r.is_transient or xr.is_distributed!=r.is_distributed
  or nvl(xr.user_group,:mygroup)!=r.user_group);
select count(*) from t_req_xfer r
 join xt_req_xfer xr on xr.request=r.request and xr.priority=r.priority and xr.is_custodial=r.is_custodial
  and xr.is_move=r.is_move and xr.is_Static=r.is_static and xr.is_transient=r.is_transient and xr.is_distributed=r.is_distributed
  and nvl(xr.user_group,:mygroup)=r.user_group;
select sum(request) from t_req_xfer;
select sum(request) from xt_req_xfer;
select sum(priority) from t_req_xfer;
select sum(priority) from xt_req_xfer;
select sum(user_group) from t_req_xfer;
select sum(nvl(user_group,:mygroup)) from t_req_xfer;


-- Deploying the schema over a 3.3 schema
-- From SQLPLUS

alter table t_dps_block add constraint uq_dps_block_dataset unique (dataset, id);

rename t_dps_subscription to xt_dps_subscription;

BEGIN
   --------------------
   -- Constraints
   FOR o IN
     (SELECT constraint_name name, table_name FROM user_constraints
      WHERE constraint_name NOT LIKE 'X%'
        AND constraint_name NOT LIKE 'SYS%'
        AND constraint_name LIKE '%_DPS_SUBSCRIPTION%')
   LOOP
      dbms_output.put_line ('Renaming constraint ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter table ' || o.table_name
          || ' rename constraint ' || o.name
          || ' to X' || substr (o.name, 1, 29);
   END LOOP;

   --------------------
   -- Indices
   FOR o IN
     (SELECT index_name name, table_name FROM user_indexes
      WHERE index_name NOT LIKE 'X%'
        AND index_name NOT LIKE 'SYS%'
        AND index_name LIKE '%_DPS_SUBSCRIPTION%')
   LOOP
      dbms_output.put_line ('Renaming index ' || o.name || ' [' || o.table_name || ']');
      execute immediate
          'alter index ' || o.name
          || ' rename to X' || substr (o.name, 1, 29);
   END LOOP;
END;
/

@PHEDEX_CVS/Schema/OracleCoreSubscription

-- Dump request parameters in subscription parameter table
insert into t_dps_subs_param
(id, request, 
 priority, is_custodial, user_group, 
 original, time_create)
select seq_dps_subs_param.nextval, rx.request,
       rx.priority, rx.is_custodial, rx.user_group,
       'y', r.time_create
  from t_req_xfer rx
  join t_req_request r on r.id = rx.request;

-- Copy over dataset subscriptions, linking to original parameters
insert into t_dps_subs_dataset
(destination, dataset, param, is_move, 
 time_create, time_fill_after, time_suspend_until,
 time_complete, time_done)
select s.destination, s.dataset, sp.id, s.is_move,
       s.time_create, NULL, s.time_suspend_until,
       s.time_complete, s.time_done
  from xt_dps_subscription s
  join t_dps_subs_param sp on sp.request = s.request
 where s.request is not null
   and s.dataset is not null;

-- Copy over dataset subscriptions with no request
-- First create parameters (for blocks with null request too)
insert into t_dps_subs_param
(id, request, 
 priority, is_custodial, user_group, 
 original, time_create)
select seq_dps_subs_param.nextval, NULL,
       uq.*
  from (select distinct s.priority, s.is_custodial, nvl(s.user_group,:mygroup),
               'y', s.time_create
          from xt_dps_subscription s
         where request is null) uq;

-- Now get the datasets
insert into t_dps_subs_dataset
(destination, dataset, param, is_move,
 time_create, time_fill_after, time_suspend_until,
 time_complete, time_done)
select s.destination, s.dataset, sp.id, s.is_move,
       s.time_create, NULL, s.time_suspend_until,
       s.time_complete, s.time_done
  from xt_dps_subscription s
  join t_dps_subs_param sp on sp.priority = s.priority
                          and sp.is_custodial = s.is_custodial
                          and sp.user_group = nvl(s.user_group,:mygroup)
                          and sp.time_create = s.time_create
 where s.request is null
   and s.dataset is not null;

-- Now get the block-only subscriptions with a request
insert into t_dps_subs_block
(destination, dataset, block, param, is_move,
 time_create, time_suspend_until,
 time_complete, time_done)
select s.destination, b.dataset, s.block, sp.id, s.is_move,
       s.time_create, s.time_suspend_until,
       s.time_complete, s.time_done
  from xt_dps_subscription s
  join t_dps_block b on b.id = s.block
  join t_dps_subs_param sp on sp.request = s.request
 where s.request is not null
   and s.block is not null;

-- And block-only subscriptions without a request
insert into t_dps_subs_block
(destination, dataset, block, param, is_move,
 time_create, time_suspend_until,
 time_complete, time_done)
select s.destination, b.dataset, s.block, sp.id, s.is_move,
       s.time_create, s.time_suspend_until,
       s.time_complete, s.time_done
  from xt_dps_subscription s
  join t_dps_block b on b.id = s.block
  join t_dps_subs_param sp on sp.priority = s.priority
                          and sp.is_custodial = s.is_custodial
                          and sp.user_group = nvl(s.user_group,:mygroup)
                          and sp.time_create = s.time_create
 where s.request is null
   and s.block is not null;

-- Sanity check: count subscriptions of each level, they should be equal!
select count(*) from xt_dps_subscription where dataset is not null;
select count(*) from t_dps_subs_dataset;
select count(*) from xt_dps_subscription where block is not null;
select count(*) from t_dps_subs_block;

-- Now create new subscription parameters for those subscriptions where the current parameters
-- have been updated since the original request
-- Note: time_create is arbitrarily set to the creation time of the subscription
-- since no record of parameter updates applied through the website is available
-- Another arbitrary possibility is the update time of the block destination

insert into t_dps_subs_param 
(id, request,
 priority, is_custodial, user_group,
 original, time_create)  
select seq_dps_subs_param.nextval, uq.* from (
       select distinct sub.request,                                                                                                               
       sub.priority, sub.is_custodial, nvl(sub.user_group,:mygroup),  
       'n', sub.time_create 
  from xt_dps_subscription sub
  left join t_dps_subs_dataset sd on sd.dataset=sub.dataset and sd.destination=sub.destination
  left join t_dps_subs_block sb on sb.block=sub.block and sb.destination=sub.destination
  join t_dps_subs_param sp on sd.param=sp.id or sb.param=sp.id 
    where sp.priority != sub.priority
    or sp.is_custodial != sub.is_custodial                                                                                               
    or sp.user_group != nvl(sub.user_group,:mygroup)) uq;

-- Link to the new subscription parameters those dataset-level subscriptions where the current parameters        
-- have been updated since the original request
merge into t_dps_subs_dataset d using
(select sub.dataset, sub.destination, pm.id param from xt_dps_subscription sub
	join t_dps_subs_dataset ds on ds.dataset=sub.dataset and ds.destination=sub.destination
	join t_dps_subs_param pm on
	  nvl(pm.request,-1) =  nvl(sub.request,-1)
	  and pm.priority = sub.priority
          and pm.is_custodial = sub.is_custodial                                                                                               
          and pm.user_group = nvl(sub.user_group,:mygroup)                                                                                   
          and pm.time_create = sub.time_create
	join t_dps_subs_param sp on
	 sp.id=ds.param	   
	where sp.priority != sub.priority            
	 or sp.is_custodial != sub.is_custodial
	 or sp.user_group != nvl(sub.user_group,:mygroup)) dnew on
	(d.dataset=dnew.dataset and d.destination=dnew.destination)
	 when matched then
	  update set d.param=dnew.param;

-- Link to the new subscription parameters those block-level subscriptions where the current parameters                                                   
-- have been updated since the original request
merge into t_dps_subs_block b using
 (select sub.block, sub.destination, pm.id param from xt_dps_subscription sub                                                                                      
        join t_dps_subs_block ds on ds.block=sub.block and ds.destination=sub.destination                                                              
        join t_dps_subs_param pm on     
          nvl(pm.request,-1) =  nvl(sub.request,-1)  
          and pm.priority = sub.priority  
           and pm.is_custodial = sub.is_custodial  
           and pm.user_group = nvl(sub.user_group,:mygroup)   
           and pm.time_create = sub.time_create    
         join t_dps_subs_param sp on  
          sp.id=ds.param  
         where sp.priority != sub.priority   
          or sp.is_custodial != sub.is_custodial   
          or sp.user_group != nvl(sub.user_group,:mygroup)) dnew on    
         (b.block=dnew.block and b.destination=dnew.destination)   
          when matched then   
           update set b.param=dnew.param;

-- Sanity check: both queries should return 0; all new subscriptions should now have the same parameters as the old ones

select count(*) from t_dps_subs_dataset sd
 join t_dps_subs_param sp on sp.id=sd.param
 join xt_dps_subscription sub on sub.dataset=sd.dataset
  and sub.destination=sd.destination
 where sub.is_custodial!=sp.is_custodial
  or nvl(sub.user_group,:mygroup)!=sp.user_group
  or sub.priority!=sp.priority;

select count(*) from t_dps_subs_block sd
 join t_dps_subs_param sp on sp.id=sd.param
 join xt_dps_subscription sub on sub.block=sd.block
  and sub.destination=sd.destination
 where sub.is_custodial!=sp.is_custodial
  or nvl(sub.user_group,:mygroup)!=sp.user_group
  or sub.priority!=sp.priority;
 
-- Now, create block-level subscriptions for all blocks in a dataset-level subscription
-- note: time_complete and time_done come from t_dps_block_dest, if available
-- note: for moves, time_done is NULL - it will be set by BlockAllocator on the first cycle
-- after checking for source deletions
merge into t_dps_subs_block n using
(
select sd.destination, b.dataset, b.id block, sd.param, sd.is_move,
       greatest(sd.time_create, b.time_create) time_create, sd.time_suspend_until,
       bd.time_complete,
       case
        when sd.is_move='n' then bd.time_complete
        else NULL
       end time_done
  from t_dps_subs_dataset sd
  join t_dps_block b on b.dataset = sd.dataset
left join t_dps_block_dest bd on bd.block = b.id and bd.destination = sd.destination
) o on (n.destination = o.destination
        and n.dataset = o.dataset
        and n.block = o.block)
when not matched then insert
(destination, dataset, block, param, is_move,
 time_create, time_suspend_until,
 time_complete, time_done)
values
(o.destination, o.dataset, o.block, o.param, o.is_move,
 o.time_create, o.time_suspend_until,
 o.time_complete, o.time_done);

-- Sanity check: IFF the BlockAllocator was shut down after the last subscription was created,
-- then these three queries will be equal
select count(*) from t_dps_block_dest;
select count(*) from t_dps_subs_block;
select count(*) from t_dps_block_dest bd
 join t_dps_subs_block bs on bd.block=bs.block
  and bd.destination=bs.destination;

-- Sanity check: block destinations and block subscriptions should have the same parameters
-- KNOWN ISSUE: currently this might not be true for custodiality, if the block destination
-- custodiality was not updated when the subscription custodiality was changed manually in the DB

select count(*) from t_dps_block_dest bd join t_dps_subs_block bs on bd.block=bs.block and bd.destination=bs.destination
join t_dps_subs_param sp on sp.id=bs.param
where bd.priority!=sp.priority;

select count(*) from t_dps_block_dest bd join t_dps_subs_block bs on bd.block=bs.block and bd.destination=bs.destination
join t_dps_subs_param sp on sp.id=bs.param
where bd.is_custodial!=sp.is_custodial;

-- Finally, update t_dps_dataset.time_fill_after to the latest block creation time
update t_dps_subs_dataset sd
   set sd.time_fill_after = 
     (select max(b.time_create) 
       from t_dps_block b
      where sd.dataset = b.dataset);

-- Increase the schema_version
create or replace function schema_version return varchar is
  result varchar(20);
begin
  return('4.0.0');
end schema_version;

select schema_version from dual;

quit;

-- If you're running on Testbed, you're done here, otherwise remember to run
-- the following scripts in a shell
-- PHEDEX_SCHEMA,PHEDEX_SCHEMA_R,PHEDEX_SCHEMA_W : the Admin, Reader, Writer user name (DB instance name)
-- PHEDEX_CON,PHEDEX_CON_R,PHEDEX_CON_W) : the Admin, Reader, Writer connection ID as returned by PHEDEX/Utilities/OracleConnectId

-- Create synonmys
PHEDEX_CVS/Schema/OracleSyns.sh $PHEDEX_SCHEMA $PHEDEX_CON $PHEDEX_CON_R
PHEDEX_CVS/Schema/OracleSyns.sh $PHEDEX_SCHEMA $PHEDEX_CON $PHEDEX_CON_W

-- Create privileges
PHEDEX_CVS/Schema/OraclePrivs.sh $PHEDEX_CON $PHEDEX_SCHEMA_R $PHEDEX_SCHEMA_W


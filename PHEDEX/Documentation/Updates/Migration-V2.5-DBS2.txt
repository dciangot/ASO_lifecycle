** Migration procedure applied to Prod instance **

# Even if you are on an slc4 machine, you have to lie because there
# are no slc4 DBS rpms
export MYARCH=slc3_ia32_gcc323

# Install DBS client and external python RPMs
wget -O aptinstaller.sh http://cmsdoc.cern.ch/cms/cpt/Software/download/cms/aptinstaller.sh
chmod +x aptinstaller.sh
./aptinstaller.sh setup -path $PWD -arch $MYARCH
eval `./aptinstaller.sh config -path $PWD -arch $MYARCH -sh`             
apt-get update
apt-get install cms+dbs-client+DBS_1_0_0
apt-get install external+py2-cx-oracle+4.2
cvs co PHEDEX/Migration/DBS2 PHEDEX/Toolkit/DBS PHEDEX/Toolkit/Common PHEDEX/Utilities PHEDEX/Schema

# Source environment
source slc3_ia32_gcc323/external/python/2.4.3/etc/profile.d/init.sh
source slc3_ia32_gcc323/external/py2-cx-oracle/4.2/etc/profile.d/init.sh
source slc3_ia32_gcc323/cms/dbs-client/DBS_1_0_0/etc/profile.d/init.sh

# Set up grid proxy
source /afs/cern.ch/cms/LCG/LCG-2/UI/cms_ui_env.sh
grid-proxy-init

# Set authentication for DB access
# first set DBPARAM to a valid DBParam file
export PHEDEX_DB="${DBPARAM}:Prod/Admin";
export PHEDEX_DB_R="${DBPARAM}:Prod/Reader";
export PHEDEX_DB_W="${DBPARAM}:Prod/CERN";
export PHEDEX=$PWD/PHEDEX
export DBS2_R="http://vocms05.cern.ch/cms_egeland_dev/servlet/DBSServlet"
export DBS2_W="https://vocms05.cern.ch:8443/cms_egeland_dev/servlet/DBSServlet"
export MIGRATION_FILE=$PHEDEX/Migration/DBS2/MigrationFile.txt

# Save all old tables to xt
sqlplus -S $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB}) @$PHEDEX/Schema/OracleResetOld.sql </dev/null
sqlplus -S $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB}) @$PHEDEX/Schema/OracleSave.sql </dev/null

# Load the new schema
sqlplus -S $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB}) @$PHEDEX/Schema/OracleReset.sql </dev/null
sqlplus -S $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB}) @$PHEDEX/Schema/OracleInit.sql </dev/null
sqlplus -S $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB}) @$PHEDEX/Schema/OracleStatsEnable.sql </dev/null

# Connect to DB using SQLPlus
sqlplus $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB})
-- Disable all triggers
begin
  for o in (select trigger_name from user_triggers) loop
    execute immediate 'alter trigger ' || o.trigger_name || ' disable';
  end loop;
end;
/
exit

# Create name mapping tables
sqlplus -S $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB}) @$PHEDEX/Migration/DBS2/OracleCreateMigrationMaps.sql

$PHEDEX/Migration/DBS2/DBSMappingFill -f $MIGRATION_FILE -u $DBS2_R -c $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB}) 2>mapfill.err |tee mapfill.out
grep "Could not map block" mapfill.out > vijay-whynofile.txt

# Migrate renamed datasets, blocks, files, replicas to TMDB
# Connect to DB using SQLPlus
sqlplus $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB})

insert into t_adm_node select * from xt_adm_node;

insert into t_dps_dataset
select seq_dps_dataset.nextval, 1, temp.new, 'y', 'n', temp.time_create, temp.time_update
from
(select dm.new, max(od.time_create) time_create, max(od.time_update) time_update
   from T_MIGRATION_DATASET_MAP dm join xt_dps_dataset od
   on dm.old=od.name group by dm.new) temp;

insert into t_dps_block
select seq_dps_block.nextval, nd.id, bm.new, ob.files, ob.bytes, ob.is_open, ob.time_create, ob.time_update from
T_MIGRATION_BLOCK_MAP bm
join xt_dps_block ob on bm.old=ob.name
join xt_dps_dataset od on ob.dataset=od.id
join T_MIGRATION_DATASET_MAP dm on dm.old=od.name
join t_dps_dataset nd on nd.name=dm.new;

insert into t_dps_file
select seq_dps_file.nextval, f.node, nb.id, f.logical_name, f.checksum, f.filesize, f.time_create
from t_dps_block nb 
join t_migration_block_map bm on bm.new = nb.name
join xt_dps_block ob on ob.name = bm.old
join xt_dps_file f on f.inblock = ob.id;



# From the old migration plan we are missing the link informations and the history

-- Crate partitions per node
begin
  for o in (select id, name from t_adm_node) loop
    execute immediate 'alter table t_xfer_replica add partition node_' || lower(o.name) || ' values (' || o.id || ')';
    execute immediate 'alter table t_xfer_request add partition dest_' || lower(o.name) || ' values (' || o.id || ')';
    execute immediate 'alter table t_xfer_task    add partition to_'   || lower(o.name) || ' values (' || o.id || ')';
  end loop;
end;
/

-- Insert t_adm_link stuff
insert into t_adm_link select * from xt_adm_link;
insert into t_adm_link_param select * from xt_adm_link_param;

-- Inset t_history stuff
insert /*+ append */
   into t_history_link_stats select * from xt_history_link_stats;
insert /*+ append */
  into t_history_link_events select * from xt_history_link_events;
insert /*+ append */ into t_history_dest select * from xt_history_dest;

-- Migrate block_replica informations
insert into t_dps_block_replica (BLOCK, NODE, IS_ACTIVE, SRC_FILES, SRC_BYTES, DEST_FILES,
DEST_BYTES, NODE_FILES, NODE_BYTES, XFER_FILES, XFER_BYTES, TIME_CREATE, TIME_UPDATE)
   (select nb.id, br.node, br.is_active,
   br.src_files, br.src_bytes,
   br.dest_files, br.dest_bytes,
   br.node_files, br.node_bytes,
   br.xfer_files, br.xfer_bytes,
   br.time_create, br.TIME_UPDATE
   from xt_dps_block_replica br left join xt_dps_block ob on br.block=ob.id
      left join t_migration_block_map bm on ob.NAME=bm.OLD
      left join t_dps_block nb on bm.new=nb.NAME
   where nb.id is not null);

-- Now the rest
insert into t_adm_contact select * from xt_adm_contact;
insert into t_adm_identity select * from xt_adm_identity;
insert into t_adm_client select * from xt_adm_client;
insert into t_adm_contact_attr select * from xt_adm_contact_attr;
insert into t_adm_global_admin select * from xt_adm_global_admin;
insert into t_adm_identity_attr select * from xt_adm_identity_attr;
insert into t_adm_site select * from xt_adm_site;
insert into t_adm_site_admin select * from xt_adm_site_admin;
insert into t_adm_site_node select * from xt_adm_site_node;
insert into t_agent select * from xt_agent;
insert into t_agent_log select * from xt_agent_log;
insert into t_agent_status select * from xt_agent_status;
insert into t_agent_message select * from xt_agent_message;
insert into t_agent_version select * from xt_agent_version;
insert into t_req_request select * from xt_req_request;
insert into t_req_action select * from xt_req_action;
insert into t_req_action_attr select * from xt_req_action_attr;
insert into t_req_info select * from xt_req_info;
insert into t_req_info_block select * from xt_req_info_block;
insert into t_req_info_dataset select * from xt_req_info_dataset;
insert into t_req_info_dest select * from xt_req_info_dest;
insert into t_req_task select * from xt_req_task;
insert into t_status_block_dest select * from xt_status_block_dest;
insert into t_status_file select * from xt_status_file;
insert into t_status_file_size_histogram select * from xt_status_file_size_histogram;
insert into t_status_file_size_overview select * from xt_status_file_size_overview;
insert into t_status_path select * from xt_status_path;
insert into t_status_replica select * from xt_status_replica;
insert into t_status_request select * from xt_status_request;
insert into t_status_task select * from xt_status_task;

-- Don't forget to ensure the sequences are current!
set serveroutput on;

Declare
  increment number;
  dummy number;
Begin
    FOR o IN
      (SELECT sequence_name FROM user_sequences
         WHERE sequence_name LIKE 'SEQ%' and last_number=1)
   LOOP
      select last_number-1 into increment from user_sequences where sequence_name='X'||o.sequence_name;
      dbms_output.put_line('Incrementing '|| o.sequence_name ||' by ' || increment);
      execute immediate 'alter sequence ' || o.sequence_name || ' increment by ' || increment;
      execute immediate 'select ' || o.sequence_name || '.nextval from dual' into dummy;
      execute immediate 'alter sequence ' || o.sequence_name || ' increment by 1';
   END LOOP;
End;
/

-- Migrate subscription data
insert into t_dps_subscription (DATASET, BLOCK, DESTINATION, PRIORITY, IS_MOVE, IS_TRANSIENT,
TIME_CREATE, TIME_COMPLETE, TIME_CLEAR, TIME_DONE, TIME_SUSPEND_UNTIL)
select m.newds, m.newblock, m.destination,
xs.priority, xs.is_move, xs.is_transient, 
xs.time_create, xs.time_complete,
xs.time_clear, xs.time_done, xs.time_suspend_until
from xt_dps_subscription xs
join
(
-- This groups merged datasets or blocks
select nd.id newds, nb.id newblock, s.destination, 
    max(s.dataset) oldds, max(s.block) oldblock
   from XT_DPS_SUBSCRIPTION s left join xt_dps_block ob on s.block=ob.id
      left join t_migration_block_map bm on ob.NAME=bm.OLD
      left join t_dps_block nb on bm.new=nb.NAME
      left join xt_dps_dataset od on s.dataset=od.id
      left join t_migration_dataset_map dm on od.NAME=dm.OLD
      left join t_dps_dataset nd on dm.new=nd.NAME
   where (nb.id is not null or nd.id is not null)
   group by nd.id, nb.id, s.destination
) m on (m.oldds = xs.dataset or m.oldblock = xs.block) and m.destination=xs.destination
;


-- Migrate t_xfer informations for partially transfered blocks
insert into t_xfer_file (id, inblock, logical_name, checksum, filesize)
select id, inblock, logical_name, CHECKSUM, FILESIZE from t_dps_file where INBLOCK in
   (select block from t_dps_block_replica where is_active='y');

insert into t_xfer_replica (id, node, fileid, state, time_create, time_state)
select ro.id, ro.node, fn.id, ro.state, ro.time_create, ro.time_state from xt_xfer_replica ro
   left join xt_xfer_file fo on ro.FILEID=fo.id
   left join t_xfer_file fn on fo.LOGICAL_NAME=fn.LOGICAL_NAME
where fn.id is not null;

-- Close blocks, that were close in old TMDB
update t_dps_block set IS_OPEN='n' where NAME in
(select bm.new from xt_dps_block bo
   join T_MIGRATION_BLOCK_MAP bm on bo.name=bm.old
where bo.IS_OPEN='n');

commit;

-- Re-enable all triggers
begin
  for o in (select trigger_name from user_triggers) loop
    execute immediate 'alter trigger ' || o.trigger_name || ' enable';
  end loop;
end;
/
exit;

# Update the DBS2 name
echo "update t_dps_dbs set name='$DBS2_W' where name='migrateDBS';" | sqlplus $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB})

# Add replicas to DBS2
$PHEDEX/Migration/DBS2/DBSReplicaSync -f $MIGRATION_FILE -u $DBS2_W -c $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB}) 2>replicasync.err |tee replicasync.out

# Creating synonyms for the other users
$PHEDEX/Schema/OracleSyns.sh 'cms_transfermgmt' $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB}) $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB_R})
$PHEDEX/Schema/OracleSyns.sh 'cms_transfermgmt' $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB}) $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB_W})

# Update statistics
sqlplus -S $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB}) @$PHEDEX/Schema/OracleStatsUpdate.sql </dev/null

# Create privileges
$PHEDEX/Schema/OraclePrivs.sh $($PHEDEX/Utilities/OracleConnectId  -db ${PHEDEX_DB}) 'cms_transfermgmt_reader' 'cms_transfermgmt_writer'

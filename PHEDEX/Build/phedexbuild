#!/usr/bin/env perl

use warnings;
use strict;
$|++;

use Getopt::Long;
use File::Path qw(mkpath rmtree);

my $wipe = 0;
GetOptions ("wipe!" => \$wipe);

my @known_pkg = qw(agents web);
my @known_actions = qw(build upload release);
my ($config_dir, $me) = ($0 =~ m:(.*)/([^/]+)$:);

my $action = shift @ARGV;
my $pkg    = shift @ARGV;

die "$me: must provide an action, one of (@known_actions)\n" unless $action;
die "$me: must provide package to build, one of (@known_pkg)\n" unless $pkg;
chomp($pkg, $action);
die "$me: unknown package $pkg, options are (@known_pkg)\n" unless grep $pkg eq $_, @known_pkg;
die "$me: unknown action $action, options are (@known_actions)\n" unless grep($action eq $_, @known_actions);

$config_dir .= "/$pkg";
die "$me: $action: config dir $config_dir does not exist\n" unless -d $config_dir;

my $pkgtools_tag=`cat $config_dir/pkgtools-tag`; chomp $pkgtools_tag;
my $cmsdist_tag=`cat $config_dir/cmsdist-tag`; chomp $cmsdist_tag;
my $cmsos=`cmsos`;  chomp $cmsos;
my ($os, $arch) = split /_/, $cmsos;
#my $gcc_tag=`cat $config_dir/${os}-gcc-tag`; chomp $gcc_tag;
my $gcc_ver;
$gcc_ver = "345" if $os eq 'slc4';
$gcc_ver = "434" if $os eq 'slc5';
my $fullarch = "${cmsos}_gcc${gcc_ver}";
my $gcc_ver_dots = join('.', split(//, $gcc_ver));

print "$me: $action: using PKGTOOLS=$pkgtools_tag CMSDIST=$cmsdist_tag cmsos=$cmsos os=$os arch=$arch gcc_ver=$gcc_ver fullarch=$fullarch\n";

if ($wipe || !-d "./PKGTOOLS") {
    print "$me: wipe/checkout PKGTOOLS\n";
    rmtree "./PKGTOOLS";
    print `cvs co -r $pkgtools_tag PKGTOOLS`, "\n";
}
my $cmsbuild = "./PKGTOOLS/cmsBuild";
die "cmsBuild command not found" unless -f $cmsbuild;

if ($wipe || !-d "./CMSDIST") {
    print "$me: wipe/checkout CMSDIST...\n";
    rmtree "./CMSDIST";
    print `cvs co -r $cmsdist_tag CMSDIST`, "\n";
#    print "$me: getting $gcc_tag version of gcc...\n";
#    print `cvs up -r $gcc_tag CMSDIST/gcc.spec`, "\n";
}

my $sync_back  = 0;
my $cfg_commit = 0;
if ($action eq 'release') {
    $action = 'upload';
    $sync_back = 1;
    $cfg_commit = 1;
}
$wipe = $action eq 'upload' ? 0 : $wipe;

#my $cfg = $config_dir . "/${action}-${cmsos}.cfg";
my $cfg = $config_dir . "/${action}.cfg";

die "$me: config $cfg does not exist\n" unless -f $cfg;

my $ssh_agent = $action eq 'upload' ? 1 : 0;
if ($ssh_agent) { 
    print "Did you start an ssh-agent?  If not, press Ctr-C now and ",
    "then enter the following commands and start again:\n",
    join("\n", '-----', 'eval `ssh-agent -t 36000`', 'ssh-add', '-----'), "\n",
    "otherwise press enter to continue.\n";
    my $dummy = <STDIN>;
}

my ($log) = ($cfg =~ m:.*/([^/]+):);
$log =~ s/\.cfg$/\.log/;
unlink $log;
if ($wipe) { 
    print "$me: wipe work areas...\n";
    rmtree "./work"; rmtree "./tmp"; 
}
my $cmd = "$cmsbuild --architecture $fullarch --compiler-version $gcc_ver_dots --cfg $cfg --cmsdist CMSDIST --work-dir work";
$cmd .= " --sync-back" if $sync_back;
exec_command($cmd, $log);

print "$me:  $action finished.  log saved to $log\n";

if ($cfg_commit) {
    print "$me:  committing $config_dir";
    chdir $config_dir;
    exec_command("cvs ci -m 'new version'");
    exec_command("cvs tag -F release");
}

sub exec_command
{
    my ($cmd, $log) = @_;
    print "$me: executing '$cmd'\n";
    open(CMD, "$cmd |") or die $!;
    open(LOG, ">$log") or die $! if $log;
    while (<CMD>) {
	print $_;
	print LOG $_ if $log;
    }
    close(LOG) if $log;
    close(CMD) or die $! ? "$me: $action: error closing pipe $!\n" : "$me: $action: exit $?\n";
}

exit 0;

#!/usr/bin/env python
"""
_DBSInvalidateFile_
                                                                                
Command line tool to invalidate a file.

"""
from DBSAPI.dbsApi import DbsApi
from DBSAPI.dbsOptions import DbsOptionParser

import string,sys,os

#  //
# // Invalidate LFNs
#//
def setLFNStatus(url,alfn,valid):

#  //
# // Get API to DBS
#//
  args = {'url' : url}
  dbsapi = DbsApi(args)

  if valid:
    print "Validating LFN %s"%alfn
    dbsapi.updateFileStatus(alfn,"VALID")

  else:
    print "Invalidating LFN %s"%alfn
    dbsapi.updateFileStatus(alfn,"INVALID")

  return

def updateLFNStatus(url,llfn,valid):
  if (llfn != None):
    filesList=llfn.split(',')
    for lfn in filesList:
      setLFNStatus(url,lfn,valid)

  return

def updateFileListStatus(url,llfn,valid):
  if (llfn != None) :
    try:
      expand_lfnFileList=os.path.expandvars(os.path.expanduser(llfn))
    except Exception, ex:
      print "File not found: %s" % expand_lfnFileList
      sys.exit(1)

    lfnlist_file = open(expand_lfnFileList,'r')
    for line in lfnlist_file.readlines():
      lfn=line.strip()
      setLFNStatus(url,lfn,valid) 
    lfnlist_file.close()

    return

def updateBlockStatus(url,lblock,valid):
  args = {'url' : url}
  dbsapi = DbsApi(args)
  
  fileBlock = {}

  allowedRetriveValue = [#'all',
                   'retrive_invalid_files',
                   #'retrive_status',
                   #'retrive_type',
                   #'retrive_block',
                   #'retrive_date',
                   #'retrive_person',
                   #'retrive_parent',
                   #'retrive_child',
                   #'retrive_algo',
                   #'retrive_tier',
                   #'retrive_lumi',
                   #'retrive_run',
                   #'retrive_branch',
                   ]

#Get LFN list
  if (lblock != None):
    blockList=lblock.split(',')
    for block in blockList:
      fileBlock[block]=dbsapi.listFiles(blockName=block,retriveList=allowedRetriveValue)
#Change file status
    for files in fileBlock.itervalues():
      for file in files:
        setLFNStatus(url,file['LogicalFileName'],valid)

  return

def main ():
  from optparse import OptionParser

  usage="""\npython DBSInvalidateFile <options>"""
  parser = OptionParser(usage=usage)

  parser.add_option('-u', '--url', dest='url', default='https://cmsdbsprod.cern.ch:8443/cms_dbs_prod_global_writer/servlet/DBSServlet', help='DBS URL')
  parser.add_option('-l', '--lfn', dest='lfn', default=None, help='LFN')
  parser.add_option('-s', '--lfnFileList', dest='lfnFileList', default=None, help='file with the list of LFNs')
  parser.add_option('-b', '--block', dest='block', default=None, help='Block to be invalidated')
  parser.add_option('-v', '--valid', action="store_true", default=False,dest='valid', help='Validate status instead of invalidate')

  (opts, args) = parser.parse_args()

  if opts.url == None:
    print "--url option not provided."
    print "Using %s"%opts.url

  if opts.lfn == None and opts.lfnFileList == None and opts.block == None:
    print "\n either --lfn or --lfnFileList or --block option has to be provided"
    print usage
    sys.exit(1)

  try:
    if opts.lfn != None:
      updateLFNStatus(opts.url, opts.lfn, opts.valid)

    if opts.lfnFileList != None:
      updateFileListStatus(opts.url, opts.lfnFileList, opts.valid)

    if opts.block != None:
      updateBlockStatus(opts.url, opts.block, opts.valid)
  
  except Exception, ex:
    print "Caught exception %s:"%str(ex)
    sys.exit(1)

  sys.exit(0)

if __name__ == "__main__":
  main()


#!/usr/bin/env perl

##H Create new LoadTest injections for old LoadTest07 destination datasets
##H Example:
##H    LoadTestDestConverter -db DBPARAM NODE RATE
##H NODE is the source node of LoadTest07 injections
##H RATE is the desired injection rate in MB

# Process command line arguments.
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Timing;
&GetOptions ("db=s"        => \$args{DBCONFIG},
	     "help|h"      => sub { &usage() });

# Check arguments.
if (scalar @ARGV < 2 || !$args{DBCONFIG})
{
  die "Insufficient parameters, use -h for help.\n";
}

my $self = { DBCONFIG => $args{DBCONFIG} };
my $dbh = &connectToDatabase ($self);

my $now = &mytimeofday();
my $node = shift(@ARGV);
my $rate = shift(@ARGV);
$rate = $rate * (1024 ** 2); # Rate in MB
my ($nodeid) = &dbexec($dbh, qq{
  select id from t_adm_node where name = :node},
  ":node" => $node)->fetchrow();
die "Node $node not known\n" if ! defined $nodeid;

print "Getting info for $node\n";

eval {
my $q = &dbexec($dbh, q{
  select ds.id src_dataset, ds.name src_dataset_name
    from t_dps_dataset ds
    join t_dps_block b on b.dataset = ds.id
    join t_dps_file f on f.inblock = b.id
   where ds.name like '%LoadTest07Source%' and f.node = :node and rownum = 1
}, ':node' => $nodeid);

my $src = $q->fetchrow_hashref();
die "ERROR:  Source dataset not found at $node\n" unless $src;

# Gets destination datasets as subscribed
# Switches MSS node to Buffer node where possible
$q = &dbexec($dbh, q{
  select ds.id dest_dataset, ds.name dest_dataset_name,
         nvl(tn.id, dn.id) throttle_node,
         nvl(tn.name, dn.name) throttle_node_name
    from t_dps_dataset ds
    join t_dps_subscription s on s.dataset = ds.id
    join t_adm_node dn on dn.id = s.destination
left join t_adm_link l on l.from_node = dn.id and l.is_local = 'y'
                      and dn.kind = 'MSS'
left join t_adm_node tn on tn.id = l.to_node
   where ds.name like '%LoadTest07%'
     and exists (select 1
                   from t_dps_file f
                   join t_dps_block b on b.id = f.inblock
                  where b.dataset = ds.id and f.node = :node)
}, ':node' => $nodeid);

my $trans_ds = &dbprep($dbh, q{ update t_dps_dataset ds set ds.is_open = 'y', ds.is_transient = 'y'
				   where ds.id = :dataset });

my $close_b = &dbprep($dbh, q{ update t_dps_block b set b.is_open = 'n'
				   where b.dataset = :dataset });

my $ins_lt = &dbprep($dbh, q{
  insert into t_loadtest_param
  (src_dataset, dest_dataset, dest_node, is_active,
   dataset_size, dataset_close, block_size, block_close,
   rate, inject_now, throttle_node, time_create, time_update)
  values
  (:src_dataset, :dest_dataset, :dest_node, :is_active,
   :dataset_size, :dataset_close, :block_size, :block_close,
   :rate, :inject_now, :throttle_node, :time_create, :time_update)});

my $check_sql = q{
   select 1 from t_loadtest_param
    where src_dataset = :src_dataset
      and dest_dataset = :dest_dataset
      and dest_node = :dest_node};

while (my $dest = $q->fetchrow_hashref()) {
    print "Adding injections from $$src{SRC_DATASET_NAME} to $$dest{DEST_DATASET_NAME}...";

    my ($exists) = &dbexec($dbh, $check_sql,
			   ':src_dataset' => $$src{SRC_DATASET},
			   ':dest_dataset' => $$dest{DEST_DATASET},
			   ':dest_node' => $nodeid)->fetchrow();

    if ($exists) {
	print "Already Exists!\n";
	next;
    }

    &dbbindexec($trans_ds, ':dataset' => $$dest{DEST_DATASET});
    &dbbindexec($close_b,  ':dataset' => $$dest{DEST_DATASET});
    &dbbindexec($ins_lt,
		':src_dataset' => $$src{SRC_DATASET},
		':dest_dataset' => $$dest{DEST_DATASET},
		':dest_node' => $nodeid,
		':is_active' => 'y',
		':dataset_size' => undef,
		':dataset_close' => 'n',
		':block_size' => 100,
		':block_close' => 'y',
		':rate' => $rate,
		':inject_now' => 0,
		':throttle_node' => $$dest{THROTTLE_NODE},
		':time_create' => $now,
		':time_update' => $now);
    print "Done\n";
    
}
};
if ($@) {
    $dbh->rollback();
    die $@;
} else {
    print "All Done\n";
    $dbh->commit();
}
&disconnectFromDatabase($self, $dbh, 1);

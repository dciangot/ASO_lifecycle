#! /usr/bin/env perl
my $debug_me = 1;

######################################################################
use Getopt::Long;
use PHEDEX::BlockConsistency::Agent;

sub usage
{
    my $interface=shift;
    # Load Namespace module to access information about plugins:
    $loader = PHEDEX::Core::Loader->new( NAMESPACE => 'PHEDEX::Namespace',
					 REJECT    => [ qw / common namespace cache spacecountcommon / ] );
    if ($interface) {
	$loader->ModuleHelp($interface);
    }else{
	# Here comes general usage help:
	print <<EOF;
This agent performs the verification of downloaded blocks.
It uses the namespace framework, documented at 
https://twiki.cern.ch/twiki/bin/view/CMS/PhedexProjConsistency

Usage:
  BlockDownloadVerify
     -namespace NAME 
     -state DIRECTORY -nodes NODE
     -db FILE[:SECTION] [-log OUT]

-state         agent state directory.
-nodes         nodes to run and check files for.
-db            database connection configuration parameter file.
-log           where to redirect logging information.
-namespace     namespace - i.e. SE-access-style - to use to perform
               the tests. Examples include 'posix', 'castor', 'dcache'
               and 'srm'. New namespaces can be added easily, as perl
               plugin modules. This allows customisation for optimal
               performance at any site, without having to modify the
               core agent.
-protocol      protocol to use with storage map, by default "direct".
-queue_length  <integer>, the number of tasks to fetch from the database
               per cycle. This should not be set without consultation
               with the developers.

For namespace specific details use --help --namespace NAME.
Known namespaces in this installation are:
EOF
	print " '",join("', '", grep (!/\//,sort keys %{$loader->Commands})),"'\n\n";
    }
    exit(1);
}

&GetOptions ("state=s"      => \$args{DROPDIR},
	     "log=s"        => \$args{LOGFILE},
	     "db=s"         => \$args{DBCONFIG},
	     "label=s"      => \$args{LABEL},
	     "storagemap=s" => \$args{STORAGEMAP},
	     "namespace=s"  => \$args{NAMESPACE},
             "protocol=s"   => \$args{PROTOCOL},
             "nodes=s"      => sub { push(@{$args{NODES}}, split(/,/, $_[1])) },
             "ignore=s"     => sub { push(@{$args{IGNORE_NODES}}, split(/,/, $_[1])) },
             "accept=s"     => sub { push(@{$args{ACCEPT_NODES}}, split(/,/, $_[1])) },
	     "help|h"	    => \$help,
	     "use_srm"      => \$args{USE_SRM},
	     "use_lcgutil!" => \$args{USE_LCGUTIL},
	     "use_rfdir"    => \$args{RFIO_USES_RFDIR},
	     "preload=s"    => \$args{PRELOAD},
	     "queue_length=i" => \$args{QUEUE_LENGTH},
             "dbs_url=s"    => \$args{DBS_URL},
	    );

if ($help) {&usage($args{NAMESPACE})and exit};
$args{USE_SRM} = 'y' if defined($args{USE_SRM});
foreach ( keys %args ) { delete $args{$_} unless defined $args{$_}; }
die "--storagemap argument is not known, please remove it\n" if $args{STORAGEMAP};
die "--use_rfdir argument is not known, use --namespace instead\n" if $args{RFIO_USES_RFDIR};
die "--use_srm argument is not known, use --namespace instead\n" if $args{USE_SRM};
die "Namespace technology (--namespace) must be specified\n" unless $args{NAMESPACE};
my $agent = PHEDEX::BlockConsistency::Agent->new(%args, @ARGV);
POE::Kernel->run();
print "POE kernel has ended, now I shoot myself\n";
exit 0;

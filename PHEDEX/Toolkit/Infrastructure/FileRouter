#!/usr/bin/env perl

##H Route files toward destination nodes.
##H
##H Usage:
##H   FileRouter -state DIRECTORY -db FILE[:SECTION] [-log OUT] [-window-size N_TB] [-request-alloc METHOD]
##H
##H -state           agent state directory
##H -db              database connection configuration parameter file
##H -log             where to redirect logging information
##H -window-size     size in TB for priority windows.  Default 10 TB.
##H -request-alloc   method to use when allocating file requests.  Default is BY_AGE
##H -probe-chance    probability (0 to 1) that a route is forced on failure
##H -external-rate   external source to calculate rate in routeCost, can be a list of files
##H
##H Request Allocation methods (METHOD):
##H
##H   BY_AGE (the default)
##H     Route blocks with older requests having priority.
##H   DATASET_BALANCE
##H     Attempt to load-balance requests to a node by dataset.

######################################################################
my %args;
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::Infrastructure::FileRouter::Agent;

&GetOptions ("state=s"         => \$args{DROPDIR},
	     "log=s"           => \$args{LOGFILE},
	     "db=s"            => \$args{DBCONFIG},
	     "window-size=n"   => \$args{WINDOW_SIZE},
	     "request-alloc=s" => \$args{REQUEST_ALLOC},
	     "probe-chance=f"  => \$args{PROBE_CHANCE},
             "external-rate=s@" => sub { push(@{$args{EXTERNAL_RATE_FILE}}, split(/,/, $_[1])) }, 
	     "help|h"           => sub { &usage() });

if (!$args{DROPDIR} || !$args{DBCONFIG})
{
    die "Insufficient parameters, use -h for help.\n";
}

my $agent = PHEDEX::Infrastructure::FileRouter::Agent->new(%args,@ARGV);
POE::Kernel->run();
print "POE kernel has ended, now I shoot myself\n";
exit 0;

#!/usr/bin/env perl

##H Manage downloads into an MSS node, marking transfer completed
##H when the files have been migrated to tape.
##H
##H This agent is technically a transfer agent, so follows the file
##H routing rules.  However it can only be a terminal node and is
##H somewhat simplified in its logic.  We also short-cut the data
##H wanted/available protocol as this is not a real transfer.
##H
##H Usage:
##H   FileMSSMigrate
##H      -state DIRECTORY -db FILE[:SECTION] [-log OUT]
##H      -nodes PATTERN[,PATTERN...] [-protocols PROTOCOL[,PROTOCOL...]]
##H      -mssbackend [srm|castor|dcache|fake] [-checkroutine CHECK_SCRIPT]
##H      [-retransferlost !!!dCache only, developmental!!!]
##H
##H -state         agent state directory
##H -db            database connection configuration parameter file
##H -log           where to redirect logging information
##H -nodes         the nodes for which this agent runs
##H -protocols     the protocols accepted by this agent (default: 'direct')
##H -mssbackend    the type of MSS, for which standard code exists. 
##H                Available are: srm, castor, dcache, fake. Default is 'fake'.
##H                Don't forget to also specify a proper protocol from your TFC!
##H -checkroutine  If you use a back end that isn't natively supported you can specify
##H                a file containing a perl subroutine to perform the migration check. 
##H                This option has precendence over -mssbackend
##H                No default, as it's optional. See example at the end this file.
##H -retransferlost Mark lost files for retransfer. 
##H                 Curently only dcache plugin supports it. Even there it's fake. :)



######################################################################
my %args;
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::File::MSSMigrate::Agent;

&GetOptions ("state=s"     => \$args{DROPDIR},
	     "log=s"       => \$args{LOGFILE},
             "db=s"        => \$args{DBCONFIG},
             "nodes=s"     => sub { push(@{$args{NODES}},
                                         split(/,/, $_[1])) },
             "protocols=s" => sub { push(@{$args{PROTOCOLS}},
                                         split(/,/, $_[1])) },
	     "mssbackend=s" => \$args{MSSBACKEND},
	     "checkroutine=s" => \$args{CHECKROUTINE},
	     "retransferlost!" => \$args{RETRANSFERLOST},
	     "nodaemon"    => \$args{NODAEMON},
	     "auto-migrate-noncust"    => \$args{AUTOMIGRATENONCUST},
	     "help|h"      => sub { &usage() },
);

if (!$args{DROPDIR} || !$args{DBCONFIG} || !$args{NODES})
{
    die "Insufficient parameters, use -h for help.\n";
}

my $agent = PHEDEX::File::MSSMigrate::Agent->new(%args,@ARGV);
POE::Kernel->run();
print "POE kernel has ended, now I shoot myself\n";
exit 0;

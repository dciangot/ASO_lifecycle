#!/usr/bin/env perl

##H PhEDEx management console / control panel application.
##H
##H This management utility channels PhEDEx administrative operations
##H from installation and deployment to configuration to daily ops
##H to problem analysis via a simple easy-to-use web interface.
##H
##H The actual web interface is stored in HTML and CSS files, with
##H links to pseudo web-pages implemented by this server.  The server
##H uses perl modules / plugins to provide the functionality.
##H
##H Upon starting the server prints out the URL at which it can be
##H contacted, and then forks into background in daemon mode.  This
##H allows idiom such as "open $(Toolkit/Management/Console)" to
##H point to the server.  With the "-nodeamon" option the program
##H stays in interactive mode without returning to the prompt until
##H the session is terminated (either with Ctrl-C from the command
##H line it was started from, or with the "Quit" option from the
##H user interface).
##H
##H Once the server has been contacted, it will only accept requests
##H from the IP address it was first contacted from.  In order to
##H prevent abuse of the server before first contact, use the
##H "-restrict" option to accept only connections from a specific
##H host or IP address.
##H
##H The server will by default automatically quit after 300 seconds
##H of inactivity.  Use "-timeout" option to specify another limit.
##H However do not use large timeouts in daemon mode -- it prevents
##H forgotten servers to run forever.
##H
##H Note that the server runs under the privileges of the user that
##H started it, and therefore can perform all the operations the user
##H can.  Also note this is not, and is not intended to be, a high
##H performance web server.
##H
##H Usage:
##H   Console [-restrict IP-OR-HOST-NAME] [-timeout N] [-nodaemon]
##H
##H -restrict    accept connections only from the specified host
##H -timeout     set auto-exit timeout in seconds (default: 300)
##H -nodaemon    do not go into daemon mode

BEGIN {
  use strict; use warnings; $^W=1;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

######################################################################
my %args;
use Getopt::Long;
use UtilsHelp;
&GetOptions ("restrict=s"  => \$args{RESTRICT},
	     "timeout=i"   => \$args{TIMEOUT},
             "nodaemon"    => sub { $args{DAEMON} = 0 },
	     "help|h"      => sub { &usage() });

if (@ARGV)
{
    die "Insufficient parameters, use -h for help.\n";
}

(new Console (%args))->run ();

######################################################################
# Routines specific to this agent.
package Console; use strict; use warnings;
use HTTP::Daemon;
use HTTP::Status;
use Socket;
use POSIX;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = {};
    my %params = (RESTRICT => undef,		# Connection filter
	  	  TIMEOUT => undef,		# Idle connection counter
	  	  DAEMON => 1);			# Control of daemon mode
    my %args = (@_);
    map { $$self{$_} = $args{$_} || $params{$_} } keys %params;
    bless $self, $class;
    return $self;
}

# Start the web server and handle requests.
sub run
{
    my ($self) = @_;
    
    # First configure the parameters.
    if (! defined $$self{TIMEOUT})
    {
        # If no default timeout was given, set it.  In daemon mode we
	# use 300 seconds (5 minutes), and in interactive an hour.
	$$self{TIMEOUT} = $$self{DAEMON} ? 300 : 3600;
    }

    # Initialise home directory
    $$self{FILE_HOME} = $0;
    $$self{FILE_HOME} =~ s|/[^/]+$||;
    $$self{FILE_HOME} ||= ".";
    $$self{FILE_HOME} .= "/../..";

    # Start the clock on serving requests
    $$self{TIME_AUTO_QUIT} = time() + $$self{TIMEOUT} if $$self{TIMEOUT};

    # If we have a restrict host, convert it to an address.
    if (defined $$self{RESTRICT})
    {
	my $peer = inet_aton($$self{RESTRICT});
	die "$0: failed to lookup -restrict host $$self{RESTRICT}\n" if ! defined $peer;
	$$self{RESTRICT_PEER} = $peer;
    }

    # Start the web server
    $$self{HTTP_SERVER} = new HTTP::Daemon;
    print $$self{HTTP_SERVER}->url, "\n";

    # If in daemon mode, daemonize.
    $self->daemonise() if $$self{DAEMON};

    # Serve requests
    $self->runloop();

    # We are done...
    exit (0);
}

# Run the server loop
sub runloop
{
    my ($self) = @_;
    while (1)
    {
	# If we have exceeded our time, quit now.  Note that
	# TIME_AUTO_QUIT is getting updated every time we
	# see activity.
	my $timeleft = $$self{TIME_AUTO_QUIT} - time();
	last if $timeleft <= 0;

	# Accept a new connection, but only until timeout.
	my ($conn, $peer);
	eval {
	    local $SIG{ALRM} = sub { die "alarm\n" }; alarm ($timeleft);
	    ($conn, $peer) = $$self{HTTP_SERVER}->accept();
	    alarm (0);
	};
	if ($@)
	{
	    # Die on genuine problems, otherwise just exit
	    die $@ if $@ ne "alarm\n";
	    last;
	}

	# Check if we talk to this peer host.
	my ($port, $host) = sockaddr_in ($peer);
	if (! defined $$self{RESTRICT_PEER})
	{
	    $$self{RESTRICT_PEER} = $host;
	}
	elsif ($$self{RESTRICT_PEER} ne $host)
	{
	    print STDERR "Rejecting connection from @{[inet_ntoa($host)]}\n";
	    $conn->close();
	    undef ($conn);
	    next;
	}

	# Receive requests and process them while we don't exceed timer.
	# FIXME: Same alarm magic here as above?
	while (my $request = $conn->get_request())
	{
	    last if $$self{TIME_AUTO_QUIT} - time() <= 0;
	    return if ! $self->handle ($peer, $conn, $request);
	    $$self{TIME_AUTO_QUIT} = time() + $$self{TIMEOUT} if $$self{TIMEOUT};
	}

	# Finish this connection
	$conn->close();
	undef ($conn);
    }
}

# Handle requests
sub handle
{
    my ($self, $peer, $connection, $request) = @_;
    if ($request->method eq 'GET')
    {
	my $rpath = $request->url->path;
	my ($session, $rest) = ($rpath =~ m!^/(S[\dA-F]+)(/.*)?!);
	$rest ||= "/";
	if (! $session)
	{
	    my ($port, $host) = sockaddr_in ($peer);
	    $session = sprintf ("S%X%X%X", $port, time(), rand(16));
	    $$self{SESSION_DATA}{$session} = {
		SESSIONID => $session,
		REMOTE_HOST => $host,
		REMOTE_PORT => $port
	    };

	    $connection->send_redirect ("/$session$rest");
	    return 1;
	}

	if (grep($rest eq $_, qw(/ /index.html /index.htm /default.htm)))
	{
	    my $path = "$$self{FILE_HOME}/Toolkit/Management/index.html";
	    $connection->send_file_response ($path);
	    return 1;
	}

	elsif ($request->url->path eq '/quit')
	{
	    my $path = "$$self{FILE_HOME}/Toolkit/Management/quit.html";
	    $connection->send_file_response ($path);
	    return 0;
	}
    }

    $connection->send_error (RC_FORBIDDEN);
    return 1;
}

# Put the program into daemon mode.
sub daemonise
{
    my ($self) = @_;

    # Real daemon would chdir('/') and umask(0), but we want to stay
    # where we are, as this is our "working base".
    # chdir('/') or die "$0: cannot daemonise: cannot chdir to /: $!\n";
    # umask(0) or die "$0: cannot damonise: cannot set umask to 0: $!\n";

    # Close standard input, output and error streams
    open (STDIN, '< /dev/null') or die "$0: cannot daemonise: cannot read null: $!\n";
    open (STDOUT, '>> /dev/null') or die "$0: cannot daemonise: cannot write null: $!\n";
    open (STDERR, '>> /dev/null') or die "$0: cannot daemonise: cannot write null: $!\n";

    # Fork, then quit the parent and leave child to run
    my $pid = fork();
    defined ($pid) or die "$0: cannot daemonise: cannot fork: $!\n";
    exit (0) if $pid;

    # Create a new session to detach us from terminal group
    setsid() or die "$0: cannot daemonise: cannot start new session: $!\n";
}

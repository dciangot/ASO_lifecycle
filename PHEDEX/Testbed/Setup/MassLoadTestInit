#!/usr/bin/env perl

##H Does stuff

BEGIN {
  $^W = 1; use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

# Process command line arguments.
use Getopt::Long;
use UtilsHelp;
use UtilsDB;
use UtilsTiming;
&GetOptions ("db=s"        => \$args{DBCONFIG},
	     "help|h"      => sub { &usage() });

# Check arguments.
if ( !$args{DBCONFIG})
{
  die "Insufficient parameters, use -h for help.\n";
}

my $self = { DBCONFIG => $args{DBCONFIG} };
my $dbh = &connectToDatabase ($self, 0);

my $now = &mytimeofday();
eval {
for my $n (1 .. 1000) {
    my $name = "/LTSink/LTSink/dataset-$n";
    print "Creating $name...\n";
    my $dest_ds;
    &dbexec($dbh, qq{
     	   insert into t_dps_dataset
	   (id, dbs, name, is_open, is_transient, time_create)
           values
	   (seq_dps_dataset.nextval, 1, :name, 'y', 'y', :now)
	   returning id into :dest_ds },
	    ':name' => $name,
	    ':now' => $now,
	    ':dest_ds' => \$dest_ds);
    
    my $rate = 100 * (1024**2);
    &dbexec($dbh, qq{
       insert into t_loadtest_param 
       (src_dataset, dest_dataset, dest_node, is_active,
	dataset_size, dataset_close, block_size, block_close,
	rate, inject_now, throttle_node,
	time_create, time_update)
       values
       (:src_ds, :dest_ds, :dest_node, 'y',
	NULL, 'n', 10, 'y', 
	:rate, 0, NULL,
	:time_create, :time_update)
   }, ':src_ds' => 1361, ':dest_ds' => $dest_ds, ':dest_node' => 262,
	    ':rate' => $rate, ':time_create' => $now, ':time_update' => $now);
}
};
if ($@) {
    warn $@;
    $dbh->rollback(); }
else {
    $dbh->commit();
}
&disconnectFromDatabase($self, $dbh, 1);

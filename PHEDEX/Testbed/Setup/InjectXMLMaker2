#!/usr/bin/env perl

##H Make TMDBInject XMLs
##H
##H Example:
##H    InjectXMLMaker -d DATASET -b N_BLOCKS -f N_FILES 
##H                   [ -O OUTPUT ] [ --open-blocks ]
##H                   [ --mean-size SIZE ] [ --sdev-size SDEV ]

use warnings;
use strict;
use Getopt::Long qw( :config no_ignore_case );;
use PHEDEX::Core::Help;
use PHEDEX::Core::XML;

my ($dataset, $blocks, $files, $xmlfile);
my $dbs  = "test";
my $open = 0;
my $mean_size = 1;
my $sdev_size = 0;

GetOptions('d|dataset=s' => \$dataset,
	   'b|blocks=i' => \$blocks,
	   'f|files=i' => \$files,
	   'O|output=s' => \$xmlfile,
	   'o|open-blocks' => \$open,
	   's|mean-size=f' => \$mean_size,
	   'S|sdev-size=f' => \$sdev_size,
	   "help|h"      => sub { &usage() });

unless ($dataset && $blocks && $files) {
    die "missing parameters\n";
}

unless ($xmlfile) {
    $xmlfile = $dataset;
    $xmlfile =~ s:^/::;  $xmlfile =~ s:/:-:g; $xmlfile .= '.xml';
}

#my $dls = "lfc:unknown";
my @xml = PHEDEX::Core::XML::makeData(
			dbs	=> $dbs,
			dataset_open => 'y',
			block_open => $open,
			dataset	=> $dataset,
			blocks	=> $blocks,
			files	=> $files,
			mean_size	=> $mean_size,
			sdev_size	=> $sdev_size,
		  );
open XML, '>', $xmlfile or die $!;
print XML @xml;
close XML;
print "Wrote injection file to $xmlfile\n";

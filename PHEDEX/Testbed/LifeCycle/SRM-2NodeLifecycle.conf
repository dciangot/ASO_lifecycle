# This is where it all happens...
%PhEDEx::Lifecycle =
(
  Name		=> 'PhEDEx Lifecycle Agent', # don't worry about this

# These are true global values. Overriding these per dataflow does not make sense
  Quiet		=> 0,
  Verbose	=> 1,
  Debug		=> 1,
  Dummy		=> 0,   # Don't update TMDB, just run the framework. Used only for
			# specialised debugging (of the LifeCycle agent itself)
  StopOnIdle	=> 1,   # Not yet implemented...
  DoInjection	=> 1,   # Set to 1 to run, to 0 to drain
  Jitter	=> 0.1, # Spread delay-times for workflow events by a small factor
  CycleSpeedup	=>   1, # speed up time. 1 => real-time, 7 => do a week of work in a day

# Use real files, listed in this file. The format is ^$lfn $filesize $cksum$
# where $filesize and $cksum will be fabricated if they do not exist. You can
# provide $filesize and not $cksum if you like, but you cannot provide the
# $cksum without providing the $filesize. Checking is minimal, so get it right!
  LFNList	=> $ENV{PHEDEX_CONFIG} . '/lfn-list.txt',

# Next, some global values that _can_ be overridden sensibly, per dataflow or per dataset
  FileSizeMean	 => 2.0, # GB
  FileSizeStdDev => 0.2, # GB

# After the global values, set the Dafaflow default values and dataset workflow
  DataflowDefaults =>
  {
#   Default parameters for each workflow. These override global defaults, but
#   are in turn overridden by values in the specific dataflow instance.
#   Typically, set CycleTime and NFiles, based on the expectations from the
#   computing model in question. For example, NFiles * FileSizeMean / CycleTime
#   (FileSizeMean is set above) gives you the average rate of data 'flowing'
#   through your system. Each of those values can be set per workflow
    'RAW' =>
    {
      Priority		=>     1,
      CycleTime		=>    10, # Start another instance of this workflow every so often
      NFiles		=>     1, # Number of files to create for each workflow-instance
      FileSizeStdDev	=>   0.1, # GB - override global default value for this dataflow
    },
  },

# This is a hash of named dataflows. Datasets are classified according to the key,
# and the array of workflow-steps describe what will happen to them.
  Dataflow =>
  {
#   This workflow will inject data at the T0, subscribe it to the t1, then,
#    when it gets there, delete it from the T0.
    'RAW'      => [ 'inject', 't1subscribe' ],
  },

  DatasetDefaults =>
  {
#   These are global defaults. They are overridden by per-dataflow defaults and
#   by values in the individual workflows.
    InUse		=>    1, # These are standard block-parameters
    IsOpen		=>   'y',
    IsMove		=>   'n',
    IsTransient		=>   'n',
    IsCustodial		=>   'y',
    InjectionSite	=>    'T0_Test_Buffer',
    NFiles		=> 1000,
    Priority		=>    3,
    InjectionsPerBlock	=>   10, # Use open blocks <n> times, then close them

    NCycles	=>   25, # < 0 => infinite. > 0 to limit
    CycleTime	=>   7200,

#   These are intervals between events. Undefined => event fires immediately
    inject	=> undef,
    t1subscribe	=>     3, # subscribe the data for transfer almost immediately
    srcdelete	=>  3600, # set deletion for some time after arrival
  },

# This is where I name my datasets and their detailed parameters. This is a
# Perl array of hashes, each of which has a Name and a Dataflow that say
# what type of data it is. They also have a set of T1s or T2s specified
# to steer the workflow accordingly. For example, when a dataset is to be
# subscribed to a T1, it will go to all of the T1s listed in this definition.
# Different dataset instances can go to different sets of T1s.
  Datasets =>
  [
    {
      Name	=> '/lifecycle/custodial/raw_2',
      Dataflow	=> 'RAW',
      T1s	=> ['TX_Test1_Buffer'],
    },
  ],

# These are in case I am using a PhEDEx::Logger to send stuff to. I'm not...
  QueueEntries  => 1,
  RetryInterval => 2,
);

do "$ENV{PHEDEX_CONFIG}/2NodeLifecycleNodes.pl";

# Everything below here can be ignored.
%Logger::Receiver =
(
  ConfigRefresh	=> 10, # Interval for checking config file
  Host		=> 'localhost',
  Port		=> 22201,
# Logfile	=> /tmp/wildish/PhEDEx/logs/prototype.log,
  Quiet		=> 0,
  Verbose	=> 1,
  Debug		=> 0,
);

%Logger::Sender =
(
  QueueEntries	=> 1,
  RetryInterval => 2,
  Quiet		=> 1,
  Verbose	=> 0,
  Debug		=> 0,
);

1;

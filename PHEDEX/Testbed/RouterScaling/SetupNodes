#!/usr/bin/env perl

##H Seed test database (set up with separate SQL) with a number of
##H files.
##H
##H Use: $0 -db <DBCONFIG> NODE...
##H
##H Parameters:
##H      db:       path to DB Config file
##H      NODE:     type and count of nodes to create: 4:T1 10:T2

BEGIN { use strict; use warnings; $^W=1;
	my $me = $0; $me =~ s|.*/||;
	our $home = $0; $home =~ s|/[^/]+$||; $home ||= ".";
	unshift(@INC, "$home/../../Toolkit/Common"); }

my %args;
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Timing;
&GetOptions ("db=s"        => \$args{DBCONFIG},
    	     "help|h"      => sub { &usage() });

$|=1;
my %nodes = ();
foreach (@ARGV)
{
    my ($amount, $kind) = split m|:|, $_;
    $nodes{$kind} = $amount;
}

my $checksum = 1;
my $size = 1000000000;

if (! $args{DBCONFIG} || ! %nodes)
{
    die "Insufficient parameters, use -h for help.\n";
}

my $now = &mytimeofday();
my $dbh = &connectToDatabase (\%args, 0);

eval
{
    # Create nodes and links
    my $index = "001";
    my (@allnodes, @allnames, %connections);
    foreach my $kind (keys %nodes)
    {
        for (my $i = 1; $i <= $nodes{$kind}; ++$i, ++$index)
        {
	    push(@allnodes, "${kind}_${index}");
        }
    }

    # Create Tier-1 Buffer/MSS nodes
    print "Creating nodes:";
    foreach my $node (grep(/^T1/, @allnodes))
    {
	my $buffer = "${node}_Buffer";
	my $mss = "${node}_MSS";
	my $msg;

        print " $buffer";
	$msg = qx($home/../../Utilities/NodeNew \\
		  -db $args{DBCONFIG}:$args{DBSECTION} \\
		  -name $buffer -kind Buffer -technology Other \\
		  -se-name $node.test 2>&1);
	die "\nFailed to create node $buffer:\n$msg" if $?;

        print " $mss";
	$msg = qx($home/../../Utilities/NodeNew \\
		  -db $args{DBCONFIG}:$args{DBSECTION} \\
		  -name $mss -kind MSS -technology Other \\
		  -se-name $node.test 2>&1);
	die "\nFailed to create node $mss:\n$msg" if $?;

	$connections{$buffer} = [
	    "$mss:L/1",
	    (map { "${_}_Buffer:R/2" } grep(/^T1/ && $_ gt $node, @allnodes)),
	    map { "${_}_Disk:R/3" } grep(/^T2/, @allnodes) ];
	push(@allnames, $buffer, $mss);
    }

    # Now Tier-2 disk nodes
    foreach my $node (grep(/^T2/, @allnodes))
    {
	my $disk = "${node}_Disk";
        print " $disk";
	my $msg = qx($home/../../Utilities/NodeNew \\
		     -db $args{DBCONFIG}:$args{DBSECTION} \\
		     -name $disk -kind Disk -technology Other \\
		     -se-name $node.test 2>&1);
	die "\nFailed to create node $disk:\n$msg" if $?;
	push(@allnames, $disk);
    }

    # Finally links
    print "\nCreating links:";
    foreach my $node (sort keys %connections)
    {
        print " $node";
	my $msg = qx($home/../../Utilities/LinkNew \\
		     -db $args{DBCONFIG}:$args{DBSECTION} \\
		     $node @{$connections{$node}} 2>&1);
	die "\nFailed to create links for $node:\n$msg" if $?;
    }
    print "\n";
    $dbh->commit();
};
if ( $@ )
{
    chomp ($@);
    print "$@\n";
    print "Rolling back\n";
    $dbh->rollback();
}
&disconnectFromDatabase(\%args, $dbh, 1);

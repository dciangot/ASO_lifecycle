#!/usr/bin/env perl

##H Seed test database (set up with separate SQL) with a number of
##H files.
##H
##H Use: $0 -db <DBCONFIG> -datasets N_DS -blocks N_BLOCKS -files N_FILES
##H
##H Parameters:
##H      db:       path to DB Config file
##H      datasets: amount of datasets you wish to make known to the DB
##H      blocks:   amount of blocks you wish to make known to the DB
##H      count:    amount of files you wish to make known to the DB

my %args;
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Timing;
&GetOptions ("db=s"        => \$args{DBCONFIG},
	     "datasets=i"  => \$args{DATASETS},
	     "blocks=i"    => \$args{BLOCKS},
	     "files=i"     => \$args{FILES},
	     "nodes=s"     => sub { push @{$args{NODES}},
				    split m|,|, $_[1] },
    	     "help|h"      => sub { &usage() });

$|=1;
my $checksum = 1;
my $size = 1000000000;

if (! $args{DBCONFIG} || ! $args{DATASETS} || ! $args{BLOCKS} || ! $args{FILES})
{
    die "Insufficient parameters, use -h for help.\n";
}

my $files = $args{FILES};
my $blocks = $args{BLOCKS};
my $datasets = $args{DATASETS};
my $now = &mytimeofday();
my $dbh = &connectToDatabase (\%args, 0);

eval
{
    # Get list of nodes
    my @nodes = @{&dbexec($dbh, qq{
		      select id, name from t_adm_node
		      where name like 'T1%'})
                  ->fetchall_arrayref({})};

    # Prepare file and block injections into TMDB
    my $ifile = &dbprep($dbh, qq{
	insert /*+ append */ into t_dps_file
	(id,node,inblock,logical_name,checksum,filesize,time_create)
	values (seq_dps_file.nextval, ?, ?, ?, ?, ?, ?)});

    my $fid = 1;
    for( my $ds=1; $ds<=$datasets; $ds++)
    {
	my $dsid = undef;
        print "Dataset $ds, ";
	&dbexec($dbh, qq{
	   insert into t_dps_dataset
	   (id,dbs,name,is_open,is_transient,time_create)
	   values (seq_dps_dataset.nextval,1,:name,'n','y',:now)
	   returning id into :id},
	   ":id" => \$dsid, ":now" => $now, ":name" => "test.$ds");
	print "ID $dsid: ";

        my %params;
        for( my $block=1; $block<=$blocks; $block++)
        {
	    my $node = $nodes[($ds*$datasets+$block) % scalar @nodes]{ID};
	    my $bid = undef;
	    print ".";
	    &dbexec($dbh, qq{
	        insert into t_dps_block 
	        (id,dataset,name,files,bytes,is_open,time_create)
	        values (seq_dps_block.nextval,:ds,:name,0,0,'y',:now)
	        returning id into :id},
	        ":id" => \$bid, ":now" => $now, ":ds" => $dsid,
		":name" => "test.$ds.$block");
	    print "$bid";
	
	    for( my $f = 0; $f<$files; ++$f, ++$fid)
	    {
	        my $n = 1;
	        push(@{$params{$n++}}, $node);
	        push(@{$params{$n++}}, $bid);
	        push(@{$params{$n++}}, "/my/test/file/$fid");
	        push(@{$params{$n++}}, "cksum:1");
	        push(@{$params{$n++}}, $size);
	        push(@{$params{$n++}}, $now);
	    }
	}

        print " inserting files\n";
        &dbbindexec($ifile, %params);
        &dbexec($dbh, qq{
	    insert into t_xfer_file (id, inblock, logical_name, checksum, filesize)
	    (select f.id, f.inblock, f.logical_name, f.checksum, f.filesize
	     from t_dps_file f join t_dps_block b on b.id = f.inblock
	     where b.dataset = :ds)}, ":ds" => $dsid);
        &dbexec($dbh, qq{
	    insert into t_xfer_replica
	    (id, node, fileid, state, time_create, time_state)
	    (select seq_xfer_replica.nextval, f.node, f.id, 0, f.time_create, f.time_create
	     from t_dps_file f join t_dps_block b on b.id = f.inblock
	     where b.dataset = :ds)}, ":ds" => $dsid);
        $dbh->commit();
    }

    print "Inserting subscriptions\n";
    &dbexec($dbh, qq{
	insert into t_dps_subscription
	(dataset, destination, priority, is_move, is_transient, is_custodial, time_create)
	select ds.id, n.id, 1, 'n', 'n', 'n', 0 from t_dps_dataset ds, t_adm_node n});
    $dbh->commit();
    print "Done\n";
};
if ( $@ )
{
    chomp ($@);
    print "$@\n";
    print "Rolling back\n";
    $dbh->rollback();
}
&disconnectFromDatabase(\%args, $dbh, 1);

#!/usr/bin/env python
#
# Update DBS2 with block replica information

import sys
import string
from fnmatch import filter
import re
import traceback
import time
from string import lstrip
from DBSAPI.dbsApi import DbsApi
from phedex import PhedexApi

def getStats(dataset, newName):
  sql = """select ds.name dataset, count(distinct f.id) files
             from xt_dps_dataset ds
                  join xt_dps_block b on b.dataset = ds.id
                  join xt_dps_file f on f.inblock = b.id
             where ds.name = :dataset
             group by ds.name
         """
  t_files = 0
  cur = phedex.con.cursor()
  cur.execute(sql, {'dataset':dataset})
  data = cur.fetchall()
  if not data:
    t_files += 0
  else:
    for dataset, n_files in data:
      t_files += n_files

  # dbs
  n_dbs = 0
  try:
    n_dbs = len(dbs.listFiles(newName))
  except Exception, ex:
    print "DBS ERROR:  ", ex
  
  return (t_files, n_dbs)

def fileDiff(dataset, newName):
  sql = """select f.logical_name
             from xt_dps_dataset ds
                  join xt_dps_block b on b.dataset = ds.id
                  join xt_dps_file f on f.inblock = b.id
            where ds.name = :dataset
            order by f.logical_name
         """
  cur = phedex.con.cursor()
  cur.execute(sql, {'dataset':dataset})
  
  tmdb_files = set()
  for file in cur.fetchall():
    tmdb_files.add(file[0])
    
  dbs_files = set()
  try:
    for file in dbs.listFiles(newName):
      dbs_files.add(file['LogicalFileName'])
  except Exception, ex:
    print "DBS ERROR:  ", ex

  missing_dbs = tmdb_files - dbs_files
  missing_tmdb = dbs_files - tmdb_files

  return missing_dbs, missing_tmdb
  

def replicaDiff(dataset, newName):
  sql = """select n.name, n.se_name, bm.new
             from xt_dps_dataset ds
                  join xt_dps_block b on b.dataset = ds.id
                  join t_migration_block_map bm on bm.old = b.name
                  join xt_dps_block_replica br on br.block = b.id
                  join xt_adm_node n on n.id = br.node
             where ds.name = :dataset and n.se_name is not null
        """
  cur = phedex.con.cursor()
  cur.execute(sql, {'dataset':dataset})

  tmdb_replicas = {}
  for node, se, block in cur.fetchall():
    if block not in tmdb_replicas:
      tmdb_replicas[block] = set()
    tmdb_replicas[block].add(se)

  dbs_blocks = dbs.listBlocks(newName)
  dbs_replicas = {}
  for block in dbs_blocks:
    dbs_selist = set()
    for se in block['StorageElementList']:
      if se:
        dbs_selist.add(se['Name'])
    dbs_replicas[block['Name']] = dbs_selist
    
  missing = {}
  for block in set(tmdb_replicas.keys()).union(dbs_replicas.keys()):
    if block in tmdb_replicas:  tmdb_selist = tmdb_replicas[block]
    else:  tmdb_selist = set()
    if block in dbs_replicas:  dbs_selist = dbs_replicas[block]
    else:  dbs_selist = set()
    m_dbs = tmdb_selist - dbs_selist
    m_tmdb = dbs_selist - tmdb_selist
    missing[block] = {}
    if m_dbs:
      missing[block]['missing_dbs'] = m_dbs
    if m_tmdb:
      missing[block]['missing_tmdb'] = m_tmdb

  return missing

def parseDatasetNameMap(mapfile):
  map = {}
  f = open(mapfile)
  for line in f:
    if not line.startswith('/'): continue
    a = re.split("\s+", line)
    map[a[0]] = a[1]
  f.close
  return map
     

from optparse import OptionParser

usage =  "usage: %prog [options]\n"
usage += "\nCompares file counts between TMDB and DBS2"
parser = OptionParser(usage=usage)
parser.add_option('-f', '--mapfile', dest='mapfile', help='Old dataset to New Dataset name mapping file')
parser.add_option('-u', '--url', dest='url', help='DBS write URL')
parser.add_option('-c', '--phedex_connect', dest='phedex_connect', help='PhEDEx connection string')
parser.add_option('-d', '--diff_mismatch', action='store_true', dest='diff_mismatch', default=False,
                  help='Perform file diff in case of a mismatch')
parser.add_option('-D', '--diff_all', action='store_true', dest='diff_all', default=False,
                  help='Perform a file diff for every dataset')
parser.add_option('-R', '--diff_replicas', action='store_true', dest='diff_rep', default=False)
(opts, args) = parser.parse_args()

if not opts.mapfile or not opts.phedex_connect:
  print "Missing arguments.  Seek help.  (-h)"
  sys.exit(0)

phedex = PhedexApi(opts.phedex_connect)
dbs = DbsApi({'url':  opts.url})

map = parseDatasetNameMap(opts.mapfile)
t_tmdb, t_dbs = 0, 0

print time.strftime('%Y-%M-%d %H:%M:%S')
print "STATSHEAD:  %s\t%s\t%s\t%s\t%s\t%s" % ("OldDSName", "NewDSName", "N_TMDB", "N_DBS", "DIFF", "FLAG")
for dataset, newName in map.iteritems():
  try:
    n_tmdb, n_dbs = getStats(dataset, newName)
    flag = "OK"
    if n_tmdb == 0 and n_dbs == 0:
      flag = "NOTANYWHERE"
    elif n_tmdb == 0:
      flag = "NOTMDB"
    elif n_dbs == 0:
      flag = "NODBS"
    elif (n_tmdb != n_dbs):
      flag = "MISMATCH"
      
    print "STATS:  %s\t%s\t%s\t%s\t%s\t%s" % (dataset, newName, n_tmdb, n_dbs, n_tmdb-n_dbs, flag)
    t_tmdb += n_tmdb;  t_dbs += n_dbs;

    if (flag == 'MISMATCH' and opts.diff_mismatch) or opts.diff_all:
      missing_dbs, missing_tmdb = fileDiff(dataset, newName)
      for file in missing_dbs:  print "FILEDIFF NODBS  %s" % file
      for file in missing_tmdb: print "FILEDIFF NOTMDB %s" % file

    if (opts.diff_rep):
      missing = replicaDiff(dataset, newName)
      if missing:
        for block in missing:
          if 'missing_dbs' in missing[block]:
            print "REPDIFF NODBS  %s %s" % (block, string.join(missing[block]['missing_dbs']))
          if 'missing_tmdb' in missing[block]:
            print "REPDIFF NOTMDB %s %s" % (block, string.join(missing[block]['missing_tmdb']))
      else:
        print "REPDIFF OK %s %s" % (dataset, newName)

  except Exception, ex:
    print "ERROR:  ",ex
    traceback.print_exc(file=sys.stdout)


print "STATSTOTALS:  tmdb %s dbs %s" % (t_tmdb, t_dbs)

sys.exit(0)

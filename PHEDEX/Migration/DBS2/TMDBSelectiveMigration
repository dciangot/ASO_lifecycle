#!/usr/bin/env perl

##H Post DBS-2 Migration, selectively migrate old datasets back into production
##H
##H Usage:
##H   TMDBSelectiveMigration -db DBCONFIG -m MODE [-f datasetfile | DATASET1 DATASET2 ...]
##H
##H Arguments:
##H MODE    The mode of the migration.  This can take one of the following values:
##H
##H 'copy-as-is' 
##H   Takes the datasets, blocks, files, replicas from the xt_
##H   tables and copies them to the t_ tables.  No renaming of datasets
##H   or blocks is done.  Dataset names are the "old" xt_ dataset names.
##H   The associated DBS is as it was in the xt_ tables.
##H
##H 'copy-rename'
##H   Takes datasets, blocks, files, replicas from the xt_
##H   tables, applies the name changes according to the t_migration_*_map
##H   tables, and copies them to the t_ tables.  You must ensure the
##H   mapping tables are complete and correct beforehand.  (see
##H   DBSMappingFill) Dataset names are the "new" t_migration_*_map.new
##H   dataset names.The associated DBS for the copied data is the DBS-2
##H   production global instance (*).
##H
##H 'in-place-rename' 
##H   Renames datasets and blocks in the t_ tables using information from the
##H   t_migration_*_map tables.  You must ensure the mapping tables are
##H   complete and correct beforehand.  (see DBSMappingFill) The
##H   associated DBS is updated to be the DBS-2 production global
##H   instance (*).
##H
##H (*)  https://cmsdbsprod.cern.ch:8443/cms_dbs_prod_global_writer/servlet/DBSServlet
##H 
##H DATASET is a dataset string.  It is either the "old" or "new" name
##H         depending on the mode.
##H
##H Options:
##H   -db  The DBParam file and section
##H   --commit_often  Commit after every dataset, instead of at the very end
##H   -f  A file of dataset names
##H 
##H Examples:
##H   TMDBSelectiveMigration -db DBParam:Prod/Admin -m copy-as-is '%TAC%'


BEGIN {
  $^W = 1; use strict; use warnings;
  our $me = $0; $me =~ s|.*/||;
  our $home = $0; $home =~ s|/[^/]+$||; $home ||= "."; $home .= "/../../Toolkit/Common";
  unshift(@INC, $home);
}

# Process command line arguments.
use Getopt::Long;
use UtilsHelp;
use UtilsDB;
use UtilsTiming;
my $mode = '';
my $file = '';
my $commit_often = 0;
&GetOptions ("db=s"        => \$args{DBCONFIG},
	     "m|mode=s"    => \$mode,
	     "f|dataset_file=s" => \$file,
	     "commit_often" => \$commit_often,
	     "help|h"      => sub { &usage() });

# Check arguments.
if (!$mode ||  !grep $mode eq $_, qw(copy-as-is copy-rename in-place-rename)) {
    die "Unknown mode, use -h for help.\n";
}

if ((scalar @ARGV < 1 && !$file) || !$args{DBCONFIG})
{
  die "Insufficient parameters, use -h for help.\n";
}

my @datasets;
if ($file) {
    open FILE, '<', $file or die "Failed to open $file:  ", $!;
    @datasets = map { chomp $_;  $_; } <FILE>;
    close FILE;
} else {
    @datasets = @ARGV;
}

if (!@datasets) {
    die "No datasets to migrate.";
}
	
my $self = { DBCONFIG => $args{DBCONFIG} };
my $dbh = &connectToDatabase ($self, 0);

# Go to work
my $global_dbs1 = 'http://cmsdbs.cern.ch/cms/prod/comp/DBS/CGIServer/prodquery?instance=MCGlobal/Writer';
my $global_dbs2 = 'https://cmsdbsprod.cern.ch:8443/cms_dbs_prod_global_writer/servlet/DBSServlet';
my ($dbs1id, $dbs2id) = &checkDBS();
my ($t_ds, $t_b, $t_f, $t_br, $t_pb1, $t_pb2, $t_s) = (0) x 7;
foreach my $dataset (@datasets) {
    if (&datasetIsThere($dataset)) {
	print "WARN:  Dataset $dataset is already in production\n";
	next;
    }
    print "Migrating $dataset...  ";
    
    my ($n_ds, $n_b, $n_f) = &migrateFiles($dataset);
    
    if ($mode eq 'copy-as-is' || $mode eq 'copy-rename'){
        my ($n_br, $n_pb1, $n_pb2) = &migrateReplicas($dataset);
        my ($n_s) = &migrateSubscriptions($dataset);
    }
    
    if ($mode eq 'in-place-rename'){
        my ($n_reqds, $n_reqb) = &&migrateRequests($dataset);
    }
    
    if ($n_ds != 0) {
	print "$n_ds datasets $n_b blocks $n_f files and $n_br block_replicas $n_pb2 xfer_replicas $n_s subscriptions $n_reqds dataset request $n_reqb block requests\n";
    } else {
	print "WARN:  Nothing to migrate";
    }
    $dbh->commit() if $commit_often;
    $t_ds += $n_ds;  $t_b += $n_b;  $t_f += $n_f;
    $t_br += $n_br;  $t_pb1 += $n_pb1;  $t_pb2 += $n_pb2;
    $t_s += $n_s;
    $t_reqds += $n_reqds; $t_reqb += $n_reqb;
}

my $msg = 
    "$t_ds datasets $t_b blocks $t_f files and $t_br block_replicas $t_pb2 xfer_replicas $t_s subscriptions $t_reqds dataset request $t_reqb block requests were migrated '$mode'.\n";

if ($commit_often) {
    print $msg;
    exit(0);
}

my $yes = 'Yes I really want to commit this';
my $no = 'no';
$msg .= "Commit this? (enter '$yes' or '$no')\n";

my $response = '';
while ($response ne $yes and $response ne $no) {
    print $msg;
    $response = <STDIN>;
    chomp $response;
}

if ($response eq $yes) {
    print "Committing...";
    $dbh->commit();
} else {
    print "Rolling back...";
    $dbh->rollback();
}
print "Done.\n";

exit(0);



sub checkDBS
{
    unless (&dbexec($dbh, qq{select 1 from t_dps_dbs where name = :dbs}, ':dbs'=>$global_dbs2)->fetchrow()) {
	print "Inserting DBS $global_dbs2\n";
	my $now = time();
	&dbexec($dbh, qq{ insert into t_dps_dbs (id, name, dls, time_create)
			      values ( seq_dps_dbs.nextval, '$global_dbs2', ':dbs', $now) });
    }

    if ($mode eq 'copy-as-is') {
	unless (&dbexec($dbh, qq{select 1 from t_dps_dbs where name = :dbs}, ':dbs'=>$global_dbs1)->fetchrow()) {
	    print "Inserting DBS $global_dbs1\n";
	    &dbexec($dbh, qq{ insert into t_dps_dbs (id, name, dls, time_create)
				  select seq_dps_dbs.nextval, name, dls, time_create from xt_dps_dbs where name = :dbs },
		    ':dbs'=>$global_dbs1);
	}
    }
    
    my $sql = qq{select id from t_dps_dbs where name = :dbs};
    my ($dbs1id) = &dbexec($dbh, $sql, ':dbs'=>$global_dbs1)->fetchrow();
    my ($dbs2id) = &dbexec($dbh, $sql, ':dbs'=>$global_dbs2)->fetchrow();
    return $dbs1id, $dbs2id;
}

sub datasetIsThere()
{
    my ($dataset) = @_;
    return &dbexec($dbh, qq{ select 1 from t_dps_dataset where name = :dataset }, ':dataset'=>$dataset)->fetchrow();
}

# Migrate datasets, blocks, and datasets.  DBS must be specified to avoid copying duplicate dataset names to the same DBS.
sub migrateFiles()
{
    my ($dataset, $dbs) = @_;

    my $migrateDatasets;
    my $migrateBlocks;
    my $migrateFiles;
    if ($mode eq 'copy-as-is') {
	$migrateDatasets = qq{ insert into t_dps_dataset (id, dbs, name, is_open, is_transient, time_create, time_update)
				   select seq_dps_dataset.nextval, dbs.id, od.name, od.is_open, od.is_transient, od.time_create, od.time_update
				   from xt_dps_dataset od
				   join xt_dps_dbs old_dbs on old_dbs.id = od.dbs
				   join t_dps_dbs dbs on dbs.name = old_dbs.name
				   where od.name = :dataset and dbs.name = :old_dbs};

	$migrateBlocks = qq{ insert into t_dps_block (id, dataset, name, files, bytes, is_open, time_create, time_update)
				 select seq_dps_block.nextval, nd.id, ob.name, ob.files, ob.bytes, ob.is_open, ob.time_create, ob.time_update
				 from xt_dps_dataset od
				 join xt_dps_block ob on ob.dataset = od.id
				 join t_dps_dataset nd on nd.name = od.name
				 join t_dps_dbs dbs on dbs.id = nd.dbs
				 join xt_dps_dbs old_dbs on old_dbs.name = dbs.name
				 where od.name = :dataset and dbs.name = :old_dbs };

	$migrateFiles =  qq{ insert into t_dps_file (id, node, inblock, logical_name, checksum, filesize, time_create)
				 select seq_dps_file.nextval, newn.id, nb.id, oldf.logical_name, oldf.checksum, oldf.filesize, oldf.time_create
				 from xt_dps_dbs old_dbs
				 join xt_dps_dataset od on od.dbs = old_dbs.id
				 join xt_dps_block ob on ob.dataset = od.id
				 join xt_dps_file oldf on oldf.inblock = ob.id
				 join xt_adm_node oldn on oldn.id = oldf.node
				 join t_dps_dbs dbs on dbs.name = old_dbs.name
				 join t_dps_dataset nd on nd.name = od.name
				 join t_dps_block nb on nb.name = ob.name
				 join t_adm_node newn on newn.name = oldn.name
				 where od.name = :dataset and dbs.name = :old_dbs };
    } 
    elsif ($mode eq 'copy-rename') {
	$migrateDatasets = qq{ insert into t_dps_dataset
				   select seq_dps_dataset.nextval, $dbs2id, temp.new, 'y', 'n', temp.time_create, temp.time_update
				   from
				   (select dm.new, max(od.time_create) time_create, max(od.time_update) time_update
				    from t_migration_dataset_map dm
				    join xt_dps_dataset od on dm.old=od.name 
				    join xt_dps_dbs old_dbs on old_dbs.id = od.dbs
				    where dm.new = :dataset and old_dbs.name = :old_dbs
				    group by dm.new) temp };
	
	$migrateBlocks = qq{ insert into t_dps_block
				 select seq_dps_block.nextval, nd.id, bm.new, ob.files, ob.bytes, ob.is_open, ob.time_create, ob.time_update from
				 t_migration_block_map bm
				 join xt_dps_block ob on bm.old=ob.name
				 join xt_dps_dataset od on ob.dataset=od.id
				 join xt_dps_dbs old_dbs on old_dbs.id = od.dbs
				 join t_migration_dataset_map dm on dm.old=od.name
				 join t_dps_dataset nd on nd.name=dm.new
				 where nd.name = :dataset and old_dbs.name = :old_dbs};

	$migrateFiles = qq{ insert into t_dps_file
				select seq_dps_file.nextval, newn.id, nb.id, oldf.logical_name, oldf.checksum, oldf.filesize, oldf.time_create
				from t_dps_block nb 
				join t_dps_dataset nd on nd.id = nb.dataset
				join t_migration_block_map bm on bm.new = nb.name
				join xt_dps_block ob on ob.name = bm.old
				join xt_dps_dataset od on od.id = ob.dataset
				join xt_dps_dbs old_dbs on old_dbs.id = od.dbs
				join xt_dps_file oldf on oldf.inblock = ob.id
				join xt_adm_node oldn on oldn.id = oldf.node
				join t_adm_node newn on newn.name = oldn.name
				where nd.name = :dataset and old_dbs.name = :old_dbs
			    };
    }                            

    elsif ($mode eq 'in-place-rename') {
    
       $migrateBlocks = qq{ update
                            (select bm.new newname, ob.name oldname
                              from t_migration_block_map bm
                                join t_dps_block ob on bm.old=ob.name
                                join t_dps_dataset od on ob.dataset=od.id                                  
                                join t_migration_dataset_map dm on od.name=dm.old
                              where dm.new = :dataset)
                            set oldname = newname 
                           };
                                         
        $migrateDatasets = qq{ update t_dps_dataset nod 
                                set nod.name=:dataset, nod.dbs=$dbs2id
                                where nod.name =
                                 (select dm.old from t_migration_dataset_map dm
                                 where dm.new = :dataset) 
                             };
    }

    if ( $mode eq 'copy-as-is' || $mode eq 'copy-rename' ) {
        my ($h1, $n_ds) = &dbexec($dbh, $migrateDatasets, ':dataset'=>$dataset, ':old_dbs' => $global_dbs1 );
        my ($h2, $n_b)  = &dbexec($dbh, $migrateBlocks,   ':dataset'=>$dataset, ':old_dbs' => $global_dbs1 );
        my ($h3, $n_f)  = &dbexec($dbh, $migrateFiles,    ':dataset'=>$dataset, ':old_dbs' => $global_dbs1 );
    }
    elsif ( $mode eq 'in-place-rename' ){
        my ($h2, $n_b)  = &dbexec($dbh, $migrateBlocks,   ':dataset'=>$dataset );
        my ($h1, $n_ds) = &dbexec($dbh, $migrateDatasets, ':dataset'=>$dataset );        
        my $n_f=0;
    }    

    return ($n_ds, $n_b, $n_f);
}

sub migrateReplicas()
{
    my $dataset = shift @_;

    my $migrateReplicas;
    my $migratePartialBlocks1;
    my $migratePartialBlocks2;

    if ($mode eq 'copy-as-is') {
	$migrateReplicas = qq{ insert into t_dps_block_replica 
				   (block, node, is_active, src_files, src_bytes, dest_files,
				    dest_bytes, node_files, node_bytes, xfer_files, xfer_bytes, time_create, time_update)
				   (select nb.id, newn.id, br.is_active,
				    br.src_files, br.src_bytes,
				    br.dest_files, br.dest_bytes,
				    br.node_files, br.node_bytes,
				    br.xfer_files, br.xfer_bytes,
				    br.time_create, br.time_update
				    from xt_dps_block_replica br
				    join xt_dps_block ob on ob.id = br.block
				    join xt_dps_dataset od on ob.dataset = od.id
				    join xt_adm_node oldn on oldn.id = br.node
				    join t_adm_node newn on newn.name = oldn.name
				    join t_dps_block nb on nb.name = ob.name
				    where od.name = :dataset 
				    and nb.id is not null) };
    } elsif ($mode eq 'copy-rename') {
	$migrateReplicas = qq{ insert into t_dps_block_replica 
				   (block, node, is_active, src_files, src_bytes, dest_files,
				    dest_bytes, node_files, node_bytes, xfer_files, xfer_bytes, time_create, time_update)
				   (select nb.id, newn.id, br.is_active,
				    br.src_files, br.src_bytes,
				    br.dest_files, br.dest_bytes,
				    br.node_files, br.node_bytes,
				    br.xfer_files, br.xfer_bytes,
				    br.time_create, br.time_update
				    from xt_dps_block_replica br
				    join xt_adm_node oldn on oldn.id = br.node
				    join t_adm_node newn on newn.name = oldn.name
				    left join xt_dps_block ob on br.block=ob.id
				    left join t_migration_block_map bm on ob.name=bm.old
				    left join t_dps_block nb on bm.new=nb.name
				    left join t_dps_dataset nd on nd.id = nb.dataset
				    where nd.name = :dataset 
				    and nb.id is not null) };
    }


    if ($mode eq 'copy-rename' || $mode eq 'copy-as-is') {
	$migratePartialBlocks1 = qq{
	    insert into t_xfer_file (id, inblock, logical_name, checksum, filesize)
		select id, inblock, logical_name, checksum, filesize from t_dps_file where inblock in
		(select br.block 
		 from t_dps_block_replica br
		 join t_dps_block b on b.id = br.block 
		 join t_dps_dataset ds on ds.id = b.dataset
		 where br.is_active='y' and ds.name = :dataset)
	    };

	$migratePartialBlocks2 = qq{
	    insert into t_xfer_replica (id, node, fileid, state, time_create, time_state)
		select seq_xfer_replica.nextval, newn.id, fn.id, ro.state, ro.time_create, ro.time_state
		from xt_xfer_replica ro
		join xt_adm_node oldn on oldn.id = ro.node
		join t_adm_node newn on newn.name = oldn.name
		left join xt_xfer_file fo on ro.fileid=fo.id
		left join t_xfer_file fn on fo.logical_name=fn.logical_name
		left join t_dps_file f on f.id = fn.id
		left join t_dps_block b on b.id = f.inblock
		left join t_dps_dataset ds on ds.id = b.dataset
		where fn.id is not null and ds.name = :dataset
	    };
    }
    
    my ($h1, $n_br) = &dbexec($dbh, $migrateReplicas, ':dataset'=>$dataset);
    my ($h2, $n_pb1) = &dbexec($dbh, $migratePartialBlocks1, ':dataset'=>$dataset);
    my ($h3, $n_pb2) = &dbexec($dbh, $migratePartialBlocks2, ':dataset'=>$dataset);
    return $n_br, $n_pb1, $n_pb2;

}

sub migrateSubscriptions()
{
    my $dataset = shift @_;
    
    my $migrateSubscriptions;
    if ($mode eq 'copy-as-is') {
	$migrateSubscriptions =
	    qq{ insert into t_dps_subscription 
		    (dataset, block, destination, priority, is_move, is_transient,
		     time_create, time_complete, time_clear, time_done, time_suspend_until)
		    select nd.id, nb.id, newn.id, 
		    xs.priority, xs.is_move, xs.is_transient, 
		    xs.time_create, xs.time_complete,
		    xs.time_clear, xs.time_done, xs.time_suspend_until
		    from xt_dps_subscription xs
		    join xt_adm_node oldn on oldn.id = xs.destination
		    join t_adm_node newn on newn.name = oldn.name
		    left join xt_dps_dataset od on od.id = xs.dataset
		    left join t_dps_dataset nd on nd.name = od.name
		    left join xt_dps_block ob on ob.id = xs.block
		    left join t_dps_block nb on nb.name = ob.name
		    where (nb.id is not null or nd.id is not null) 
		    and nd.name = :dataset
		 };
    } elsif ($mode eq 'copy-rename') {
	$migrateSubscriptions =
	    qq{ insert into t_dps_subscription 
		    (dataset, block, destination, priority, is_move, is_transient,
		     time_create, time_complete, time_clear, time_done, time_suspend_until)
		    select m.newds, m.newblock, m.destination,
		    xs.priority, xs.is_move, xs.is_transient, 
		    xs.time_create, xs.time_complete,
		    xs.time_clear, xs.time_done, xs.time_suspend_until
		    from xt_dps_subscription xs
		    join
		    (
		     -- this groups merged datasets or blocks
		     select nd.id newds, nb.id newblock, s.destination, 
		     max(s.dataset) oldds, max(s.block) oldblock
		     from xt_dps_subscription s left join xt_dps_block ob on s.block=ob.id
		     left join t_migration_block_map bm on ob.name=bm.old
		     left join t_dps_block nb on bm.new=nb.name
		     left join xt_dps_dataset od on s.dataset=od.id
		     left join t_migration_dataset_map dm on od.name=dm.old
		     left join t_dps_dataset nd on dm.new=nd.name
		     where (nb.id is not null or nd.id is not null)
		     and nd.name = :dataset
		     group by nd.id, nb.id, s.destination
		     ) m on (m.oldds = xs.dataset or m.oldblock = xs.block) 
		           and m.destination=xs.destination
		 };
    }

    my ($h1, $n_s) = &dbexec($dbh, $migrateSubscriptions, ':dataset'=>$dataset);
    return $n_s;
}
sub migrateRequests()
{   
    my $dataset = shift @_;
    my $migrateReqBlocks;
    my $migrateReqDatasets;
    
    if ($mode eq 'in-place-rename') {
    
       $migrateReqBlocks = qq{ update (select rbi.dataset olddsname, dm.new newdsname, 
                                              rbi.block oldblockname, bm.new newblockname,
                                              rbi.dbs
                                        from t_req_info_block rbi
                                        join t_dps_block nb on nb.name = rbi.block
                                        join t_migration_block_map bm on nb.name=bm.new
                                        join t_dps_dataset nd on nb.dataset=nd.id                                  
                                        join t_migration_dataset_map dm on nd.name=dm.new
                                        where dm.new = :dataset) 
                               set 
                                oldblockname = newblockname
                                olddsname = newdsname
                                rbi.dbs = $global_dbs2 
                             };
                                                   
        $migrateReqDatasets = qq{ update t_req_info_dataset noreq
                                set 
                                 noreq.dataset = :dataset,         
                                 noreq.dbs = $global_dbs2
                                where noreq.dataset= 
                                (select dm.old from t_migration_dataset_map dm
                                 where dm.new = :dataset)               
                                };
    }

    if ( $mode eq 'in-place-rename' ){
        my ($h2, $n_reqb)  = &dbexec($dbh, $migrateReqBlocks, ':dataset'=>$dataset );
        my ($h1, $n_reqds) = &dbexec($dbh, $migrateDatasets, ':dataset'=>$dataset );        
    }    

    return ($n_reqds, $n_reqb);
}

